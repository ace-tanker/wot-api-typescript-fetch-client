/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Mounted modules
 * @export
 * @interface EncyclopediaVehicleprofileDataValueModules
 */
export interface EncyclopediaVehicleprofileDataValueModules {
    /**
     * Engine ID
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueModules
     */
    engine_id: number;
    /**
     * Gun ID
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueModules
     */
    gun_id: number;
    /**
     * Turret ID
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueModules
     */
    turret_id: number | null;
    /**
     * Suspension ID
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueModules
     */
    suspension_id: number;
    /**
     * Radio ID
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueModules
     */
    radio_id: number;
}

/**
 * Check if a given object implements the EncyclopediaVehicleprofileDataValueModules interface.
 */
export function instanceOfEncyclopediaVehicleprofileDataValueModules(value: object): value is EncyclopediaVehicleprofileDataValueModules {
    if (!('engine_id' in value) || value['engine_id'] === undefined) return false;
    if (!('gun_id' in value) || value['gun_id'] === undefined) return false;
    if (!('turret_id' in value) || value['turret_id'] === undefined) return false;
    if (!('suspension_id' in value) || value['suspension_id'] === undefined) return false;
    if (!('radio_id' in value) || value['radio_id'] === undefined) return false;
    return true;
}

export function EncyclopediaVehicleprofileDataValueModulesFromJSON(json: any): EncyclopediaVehicleprofileDataValueModules {
    return EncyclopediaVehicleprofileDataValueModulesFromJSONTyped(json, false);
}

export function EncyclopediaVehicleprofileDataValueModulesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaVehicleprofileDataValueModules {
    if (json == null) {
        return json;
    }
    return {
        
        'engine_id': json['engine_id'],
        'gun_id': json['gun_id'],
        'turret_id': json['turret_id'],
        'suspension_id': json['suspension_id'],
        'radio_id': json['radio_id'],
    };
}

export function EncyclopediaVehicleprofileDataValueModulesToJSON(json: any): EncyclopediaVehicleprofileDataValueModules {
    return EncyclopediaVehicleprofileDataValueModulesToJSONTyped(json, false);
}

export function EncyclopediaVehicleprofileDataValueModulesToJSONTyped(value?: EncyclopediaVehicleprofileDataValueModules | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'engine_id': value['engine_id'],
        'gun_id': value['gun_id'],
        'turret_id': value['turret_id'],
        'suspension_id': value['suspension_id'],
        'radio_id': value['radio_id'],
    };
}

export const EncyclopediaVehicleprofileDataValueModulesPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

