/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GlobalmapFrontsItemAvailableExtensionsItem } from './GlobalmapFrontsItemAvailableExtensionsItem.js';
import {
    GlobalmapFrontsItemAvailableExtensionsItemFromJSON,
    GlobalmapFrontsItemAvailableExtensionsItemFromJSONTyped,
    GlobalmapFrontsItemAvailableExtensionsItemToJSON,
    GlobalmapFrontsItemAvailableExtensionsItemToJSONTyped,
} from './GlobalmapFrontsItemAvailableExtensionsItem.js';

/**
 * 
 * @export
 * @interface GlobalmapFrontsItem
 */
export interface GlobalmapFrontsItem {
    /**
     * Front ID
     * @type {string}
     * @memberof GlobalmapFrontsItem
     */
    frontId: string;
    /**
     * Front name
     * @type {string}
     * @memberof GlobalmapFrontsItem
     */
    frontName: string;
    /**
     * Indicates if a map is active
     * @type {boolean}
     * @memberof GlobalmapFrontsItem
     */
    isActive: boolean;
    /**
     * Indicates the map type: regular map or events map
     * @type {boolean}
     * @memberof GlobalmapFrontsItem
     */
    isEvent: boolean;
    /**
     * Indicates if vehicles blocking is active
     * @type {boolean}
     * @memberof GlobalmapFrontsItem
     */
    vehicleFreeze: boolean;
    /**
     * Indicates presence of Fog of War
     * @type {boolean}
     * @memberof GlobalmapFrontsItem
     */
    fogOfWar: boolean;
    /**
     * Maximum battle duration in minutes
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    battleTimeLimit: number;
    /**
     * Minimum number of vehicles in division
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    minTanksPerDivision: number;
    /**
     * Maximum number of vehicles in division
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    maxTanksPerDivision: number;
    /**
     * Division cost
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    divisionCost: number;
    /**
     * Average clans rating
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    avgClansRating: number;
    /**
     * Average winning bid
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    avgWonBet: number;
    /**
     * Average minimum bid
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    avgMinBet: number;
    /**
     * Minimum vehicle Tier
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    minVehicleLevel: number;
    /**
     * Maximum vehicle Tier
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    maxVehicleLevel: number;
    /**
     * Available modules
     * @type {Array<GlobalmapFrontsItemAvailableExtensionsItem>}
     * @memberof GlobalmapFrontsItem
     */
    availableExtensions: Array<GlobalmapFrontsItemAvailableExtensionsItem>;
    /**
     * Amount of Provinces
     * @type {number}
     * @memberof GlobalmapFrontsItem
     */
    provincesCount: number;
}

/**
 * Check if a given object implements the GlobalmapFrontsItem interface.
 */
export function instanceOfGlobalmapFrontsItem(value: object): value is GlobalmapFrontsItem {
    if (!('frontId' in value) || value['frontId'] === undefined) return false;
    if (!('frontName' in value) || value['frontName'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('isEvent' in value) || value['isEvent'] === undefined) return false;
    if (!('vehicleFreeze' in value) || value['vehicleFreeze'] === undefined) return false;
    if (!('fogOfWar' in value) || value['fogOfWar'] === undefined) return false;
    if (!('battleTimeLimit' in value) || value['battleTimeLimit'] === undefined) return false;
    if (!('minTanksPerDivision' in value) || value['minTanksPerDivision'] === undefined) return false;
    if (!('maxTanksPerDivision' in value) || value['maxTanksPerDivision'] === undefined) return false;
    if (!('divisionCost' in value) || value['divisionCost'] === undefined) return false;
    if (!('avgClansRating' in value) || value['avgClansRating'] === undefined) return false;
    if (!('avgWonBet' in value) || value['avgWonBet'] === undefined) return false;
    if (!('avgMinBet' in value) || value['avgMinBet'] === undefined) return false;
    if (!('minVehicleLevel' in value) || value['minVehicleLevel'] === undefined) return false;
    if (!('maxVehicleLevel' in value) || value['maxVehicleLevel'] === undefined) return false;
    if (!('availableExtensions' in value) || value['availableExtensions'] === undefined) return false;
    if (!('provincesCount' in value) || value['provincesCount'] === undefined) return false;
    return true;
}

export function GlobalmapFrontsItemFromJSON(json: any): GlobalmapFrontsItem {
    return GlobalmapFrontsItemFromJSONTyped(json, false);
}

export function GlobalmapFrontsItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapFrontsItem {
    if (json == null) {
        return json;
    }
    return {
        
        'frontId': json['front_id'],
        'frontName': json['front_name'],
        'isActive': json['is_active'],
        'isEvent': json['is_event'],
        'vehicleFreeze': json['vehicle_freeze'],
        'fogOfWar': json['fog_of_war'],
        'battleTimeLimit': json['battle_time_limit'],
        'minTanksPerDivision': json['min_tanks_per_division'],
        'maxTanksPerDivision': json['max_tanks_per_division'],
        'divisionCost': json['division_cost'],
        'avgClansRating': json['avg_clans_rating'],
        'avgWonBet': json['avg_won_bet'],
        'avgMinBet': json['avg_min_bet'],
        'minVehicleLevel': json['min_vehicle_level'],
        'maxVehicleLevel': json['max_vehicle_level'],
        'availableExtensions': ((json['available_extensions'] as Array<any>).map(GlobalmapFrontsItemAvailableExtensionsItemFromJSON)),
        'provincesCount': json['provinces_count'],
    };
}

export function GlobalmapFrontsItemToJSON(json: any): GlobalmapFrontsItem {
    return GlobalmapFrontsItemToJSONTyped(json, false);
}

export function GlobalmapFrontsItemToJSONTyped(value?: GlobalmapFrontsItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'front_id': value['frontId'],
        'front_name': value['frontName'],
        'is_active': value['isActive'],
        'is_event': value['isEvent'],
        'vehicle_freeze': value['vehicleFreeze'],
        'fog_of_war': value['fogOfWar'],
        'battle_time_limit': value['battleTimeLimit'],
        'min_tanks_per_division': value['minTanksPerDivision'],
        'max_tanks_per_division': value['maxTanksPerDivision'],
        'division_cost': value['divisionCost'],
        'avg_clans_rating': value['avgClansRating'],
        'avg_won_bet': value['avgWonBet'],
        'avg_min_bet': value['avgMinBet'],
        'min_vehicle_level': value['minVehicleLevel'],
        'max_vehicle_level': value['maxVehicleLevel'],
        'available_extensions': ((value['availableExtensions'] as Array<any>).map(GlobalmapFrontsItemAvailableExtensionsItemToJSON)),
        'provinces_count': value['provincesCount'],
    };
}

