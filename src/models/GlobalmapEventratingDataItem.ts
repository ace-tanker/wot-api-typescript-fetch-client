/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GlobalmapEventratingDataItem
 */
export interface GlobalmapEventratingDataItem {
    /**
     * Clan ID
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    clan_id: number;
    /**
     * Clan name
     * @type {string}
     * @memberof GlobalmapEventratingDataItem
     */
    name: string;
    /**
     * Clan tag
     * @type {string}
     * @memberof GlobalmapEventratingDataItem
     */
    tag: string;
    /**
     * Clan color
     * @type {string}
     * @memberof GlobalmapEventratingDataItem
     */
    color: string;
    /**
     * Award level
     * @type {string}
     * @memberof GlobalmapEventratingDataItem
     */
    award_level: string | null;
    /**
     * Current rating
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    rank: number;
    /**
     * Rating changes during previous turn
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    rank_delta: number;
    /**
     * Date of rating calculation
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    updated_at: number | null;
    /**
     * Battle Fame Points
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    battle_fame_points: number | null;
    /**
     * Total Fame Points
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    total_fame_points: number;
    /**
     * Fame Points for completing a clan task
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    task_fame_points: number | null;
    /**
     * Amount of Fame Points needed to improve personal award
     * @type {number}
     * @memberof GlobalmapEventratingDataItem
     */
    fame_points_to_improve_award: number | null;
}

/**
 * Check if a given object implements the GlobalmapEventratingDataItem interface.
 */
export function instanceOfGlobalmapEventratingDataItem(value: object): value is GlobalmapEventratingDataItem {
    if (!('clan_id' in value) || value['clan_id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('tag' in value) || value['tag'] === undefined) return false;
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('award_level' in value) || value['award_level'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('rank_delta' in value) || value['rank_delta'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    if (!('battle_fame_points' in value) || value['battle_fame_points'] === undefined) return false;
    if (!('total_fame_points' in value) || value['total_fame_points'] === undefined) return false;
    if (!('task_fame_points' in value) || value['task_fame_points'] === undefined) return false;
    if (!('fame_points_to_improve_award' in value) || value['fame_points_to_improve_award'] === undefined) return false;
    return true;
}

export function GlobalmapEventratingDataItemFromJSON(json: any): GlobalmapEventratingDataItem {
    return GlobalmapEventratingDataItemFromJSONTyped(json, false);
}

export function GlobalmapEventratingDataItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventratingDataItem {
    if (json == null) {
        return json;
    }
    return {
        
        'clan_id': json['clan_id'],
        'name': json['name'],
        'tag': json['tag'],
        'color': json['color'],
        'award_level': json['award_level'],
        'rank': json['rank'],
        'rank_delta': json['rank_delta'],
        'updated_at': json['updated_at'],
        'battle_fame_points': json['battle_fame_points'],
        'total_fame_points': json['total_fame_points'],
        'task_fame_points': json['task_fame_points'],
        'fame_points_to_improve_award': json['fame_points_to_improve_award'],
    };
}

export function GlobalmapEventratingDataItemToJSON(json: any): GlobalmapEventratingDataItem {
    return GlobalmapEventratingDataItemToJSONTyped(json, false);
}

export function GlobalmapEventratingDataItemToJSONTyped(value?: GlobalmapEventratingDataItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clan_id': value['clan_id'],
        'name': value['name'],
        'tag': value['tag'],
        'color': value['color'],
        'award_level': value['award_level'],
        'rank': value['rank'],
        'rank_delta': value['rank_delta'],
        'updated_at': value['updated_at'],
        'battle_fame_points': value['battle_fame_points'],
        'total_fame_points': value['total_fame_points'],
        'task_fame_points': value['task_fame_points'],
        'fame_points_to_improve_award': value['fame_points_to_improve_award'],
    };
}

export const GlobalmapEventratingDataItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

