/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaInfoMeta } from './EncyclopediaInfoMeta.js';
import {
    EncyclopediaInfoMetaFromJSON,
    EncyclopediaInfoMetaFromJSONTyped,
    EncyclopediaInfoMetaToJSON,
    EncyclopediaInfoMetaToJSONTyped,
} from './EncyclopediaInfoMeta.js';
import type { EncyclopediaInfoData } from './EncyclopediaInfoData.js';
import {
    EncyclopediaInfoDataFromJSON,
    EncyclopediaInfoDataFromJSONTyped,
    EncyclopediaInfoDataToJSON,
    EncyclopediaInfoDataToJSONTyped,
} from './EncyclopediaInfoData.js';

/**
 * 
 * @export
 * @interface EncyclopediaInfoOk
 */
export interface EncyclopediaInfoOk {
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaInfoOk
     */
    status: EncyclopediaInfoOkStatusEnum;
    /**
     * 
     * @type {EncyclopediaInfoMeta}
     * @memberof EncyclopediaInfoOk
     */
    meta: EncyclopediaInfoMeta;
    /**
     * 
     * @type {EncyclopediaInfoData}
     * @memberof EncyclopediaInfoOk
     */
    data: EncyclopediaInfoData;
}


/**
 * @export
 */
export const EncyclopediaInfoOkStatusEnum = {
    Ok: 'ok'
} as const;
export type EncyclopediaInfoOkStatusEnum = typeof EncyclopediaInfoOkStatusEnum[keyof typeof EncyclopediaInfoOkStatusEnum];


/**
 * Check if a given object implements the EncyclopediaInfoOk interface.
 */
export function instanceOfEncyclopediaInfoOk(value: object): value is EncyclopediaInfoOk {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function EncyclopediaInfoOkFromJSON(json: any): EncyclopediaInfoOk {
    return EncyclopediaInfoOkFromJSONTyped(json, false);
}

export function EncyclopediaInfoOkFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaInfoOk {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'],
        'meta': EncyclopediaInfoMetaFromJSON(json['meta']),
        'data': EncyclopediaInfoDataFromJSON(json['data']),
    };
}

export function EncyclopediaInfoOkToJSON(json: any): EncyclopediaInfoOk {
    return EncyclopediaInfoOkToJSONTyped(json, false);
}

export function EncyclopediaInfoOkToJSONTyped(value?: EncyclopediaInfoOk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'meta': EncyclopediaInfoMetaToJSON(value['meta']),
        'data': EncyclopediaInfoDataToJSON(value['data']),
    };
}

