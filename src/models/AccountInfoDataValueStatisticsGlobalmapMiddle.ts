/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Battle statistics on the Global Map in Medium division.
 * @export
 * @interface AccountInfoDataValueStatisticsGlobalmapMiddle
 */
export interface AccountInfoDataValueStatisticsGlobalmapMiddle {
    /**
     * Battles fought
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    battles: number;
    /**
     * Victories
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    wins: number;
    /**
     * Total experience
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    xp: number;
    /**
     * Defeats
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    losses: number;
    /**
     * Battles survived
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    survived_battles: number;
    /**
     * Damage received
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    damage_received: number;
    /**
     * Damage caused
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    damage_dealt: number;
    /**
     * Enemies spotted
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    spotted: number;
    /**
     * Shots fired
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    shots: number;
    /**
     * Hits
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    hits: number;
    /**
     * Vehicles destroyed
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    frags: number;
    /**
     * Base capture points
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    capture_points: number;
    /**
     * Base defense points
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    dropped_capture_points: number;
    /**
     * Hit ratio
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    hits_percents: number;
    /**
     * Draws
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    draws: number;
    /**
     * Average experience per battle
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    battle_avg_xp: number;
    /**
     * Number of times an enemy was stunned by you
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    stun_number: number;
    /**
     * Number of battles on vehicles that cause the stun effect
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    battles_on_stunning_vehicles: number;
    /**
     * Damage to enemy vehicles stunned by you
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    stun_assisted_damage: number;
    /**
     * Damage dealt to the target with the actor keeping-on-track assistance
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    track_assisted_damage: number;
    /**
     * Damage dealt to the target with the actor radio recon assistance
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    radio_assisted_damage: number;
    /**
     * Ratio of damage blocked by armor from AP, HEAT, and APCR shells to damage received from these types of shells.
     * Value is calculated starting from version 9.0.
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    tanking_factor: number;
    /**
     * Direct hits received
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    direct_hits_received: number;
    /**
     * Hits received as a result of splash damage
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    explosion_hits_received: number;
    /**
     * Hits on enemy as a result of splash damage
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    explosion_hits: number;
    /**
     * Penetrations received
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    piercings_received: number;
    /**
     * Penetrations
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    piercings: number;
    /**
     * Direct hits received that caused no damage
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    no_damage_direct_hits_received: number;
    /**
     * Average damage blocked by armor per battle. Damage blocked by armor is damage received from shells (AP, HEAT and APCR) that hit a vehicle but caused no damage.
     * Value is calculated starting from version 9.0.
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    avg_damage_blocked: number;
    /**
     * Average damage upon your shooting the track
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    avg_damage_assisted_track: number;
    /**
     * Average damage upon your spotting
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    avg_damage_assisted_radio: number;
    /**
     * Average assisted damage without stun damage.
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    avg_damage_assisted: number;
    /**
     * Average assisted stun damage.
     * @type {number}
     * @memberof AccountInfoDataValueStatisticsGlobalmapMiddle
     */
    avg_damage_assisted_stun: number;
}

/**
 * Check if a given object implements the AccountInfoDataValueStatisticsGlobalmapMiddle interface.
 */
export function instanceOfAccountInfoDataValueStatisticsGlobalmapMiddle(value: object): value is AccountInfoDataValueStatisticsGlobalmapMiddle {
    if (!('battles' in value) || value['battles'] === undefined) return false;
    if (!('wins' in value) || value['wins'] === undefined) return false;
    if (!('xp' in value) || value['xp'] === undefined) return false;
    if (!('losses' in value) || value['losses'] === undefined) return false;
    if (!('survived_battles' in value) || value['survived_battles'] === undefined) return false;
    if (!('damage_received' in value) || value['damage_received'] === undefined) return false;
    if (!('damage_dealt' in value) || value['damage_dealt'] === undefined) return false;
    if (!('spotted' in value) || value['spotted'] === undefined) return false;
    if (!('shots' in value) || value['shots'] === undefined) return false;
    if (!('hits' in value) || value['hits'] === undefined) return false;
    if (!('frags' in value) || value['frags'] === undefined) return false;
    if (!('capture_points' in value) || value['capture_points'] === undefined) return false;
    if (!('dropped_capture_points' in value) || value['dropped_capture_points'] === undefined) return false;
    if (!('hits_percents' in value) || value['hits_percents'] === undefined) return false;
    if (!('draws' in value) || value['draws'] === undefined) return false;
    if (!('battle_avg_xp' in value) || value['battle_avg_xp'] === undefined) return false;
    if (!('stun_number' in value) || value['stun_number'] === undefined) return false;
    if (!('battles_on_stunning_vehicles' in value) || value['battles_on_stunning_vehicles'] === undefined) return false;
    if (!('stun_assisted_damage' in value) || value['stun_assisted_damage'] === undefined) return false;
    if (!('track_assisted_damage' in value) || value['track_assisted_damage'] === undefined) return false;
    if (!('radio_assisted_damage' in value) || value['radio_assisted_damage'] === undefined) return false;
    if (!('tanking_factor' in value) || value['tanking_factor'] === undefined) return false;
    if (!('direct_hits_received' in value) || value['direct_hits_received'] === undefined) return false;
    if (!('explosion_hits_received' in value) || value['explosion_hits_received'] === undefined) return false;
    if (!('explosion_hits' in value) || value['explosion_hits'] === undefined) return false;
    if (!('piercings_received' in value) || value['piercings_received'] === undefined) return false;
    if (!('piercings' in value) || value['piercings'] === undefined) return false;
    if (!('no_damage_direct_hits_received' in value) || value['no_damage_direct_hits_received'] === undefined) return false;
    if (!('avg_damage_blocked' in value) || value['avg_damage_blocked'] === undefined) return false;
    if (!('avg_damage_assisted_track' in value) || value['avg_damage_assisted_track'] === undefined) return false;
    if (!('avg_damage_assisted_radio' in value) || value['avg_damage_assisted_radio'] === undefined) return false;
    if (!('avg_damage_assisted' in value) || value['avg_damage_assisted'] === undefined) return false;
    if (!('avg_damage_assisted_stun' in value) || value['avg_damage_assisted_stun'] === undefined) return false;
    return true;
}

export function AccountInfoDataValueStatisticsGlobalmapMiddleFromJSON(json: any): AccountInfoDataValueStatisticsGlobalmapMiddle {
    return AccountInfoDataValueStatisticsGlobalmapMiddleFromJSONTyped(json, false);
}

export function AccountInfoDataValueStatisticsGlobalmapMiddleFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfoDataValueStatisticsGlobalmapMiddle {
    if (json == null) {
        return json;
    }
    return {
        
        'battles': json['battles'],
        'wins': json['wins'],
        'xp': json['xp'],
        'losses': json['losses'],
        'survived_battles': json['survived_battles'],
        'damage_received': json['damage_received'],
        'damage_dealt': json['damage_dealt'],
        'spotted': json['spotted'],
        'shots': json['shots'],
        'hits': json['hits'],
        'frags': json['frags'],
        'capture_points': json['capture_points'],
        'dropped_capture_points': json['dropped_capture_points'],
        'hits_percents': json['hits_percents'],
        'draws': json['draws'],
        'battle_avg_xp': json['battle_avg_xp'],
        'stun_number': json['stun_number'],
        'battles_on_stunning_vehicles': json['battles_on_stunning_vehicles'],
        'stun_assisted_damage': json['stun_assisted_damage'],
        'track_assisted_damage': json['track_assisted_damage'],
        'radio_assisted_damage': json['radio_assisted_damage'],
        'tanking_factor': json['tanking_factor'],
        'direct_hits_received': json['direct_hits_received'],
        'explosion_hits_received': json['explosion_hits_received'],
        'explosion_hits': json['explosion_hits'],
        'piercings_received': json['piercings_received'],
        'piercings': json['piercings'],
        'no_damage_direct_hits_received': json['no_damage_direct_hits_received'],
        'avg_damage_blocked': json['avg_damage_blocked'],
        'avg_damage_assisted_track': json['avg_damage_assisted_track'],
        'avg_damage_assisted_radio': json['avg_damage_assisted_radio'],
        'avg_damage_assisted': json['avg_damage_assisted'],
        'avg_damage_assisted_stun': json['avg_damage_assisted_stun'],
    };
}

export function AccountInfoDataValueStatisticsGlobalmapMiddleToJSON(json: any): AccountInfoDataValueStatisticsGlobalmapMiddle {
    return AccountInfoDataValueStatisticsGlobalmapMiddleToJSONTyped(json, false);
}

export function AccountInfoDataValueStatisticsGlobalmapMiddleToJSONTyped(value?: AccountInfoDataValueStatisticsGlobalmapMiddle | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'battles': value['battles'],
        'wins': value['wins'],
        'xp': value['xp'],
        'losses': value['losses'],
        'survived_battles': value['survived_battles'],
        'damage_received': value['damage_received'],
        'damage_dealt': value['damage_dealt'],
        'spotted': value['spotted'],
        'shots': value['shots'],
        'hits': value['hits'],
        'frags': value['frags'],
        'capture_points': value['capture_points'],
        'dropped_capture_points': value['dropped_capture_points'],
        'hits_percents': value['hits_percents'],
        'draws': value['draws'],
        'battle_avg_xp': value['battle_avg_xp'],
        'stun_number': value['stun_number'],
        'battles_on_stunning_vehicles': value['battles_on_stunning_vehicles'],
        'stun_assisted_damage': value['stun_assisted_damage'],
        'track_assisted_damage': value['track_assisted_damage'],
        'radio_assisted_damage': value['radio_assisted_damage'],
        'tanking_factor': value['tanking_factor'],
        'direct_hits_received': value['direct_hits_received'],
        'explosion_hits_received': value['explosion_hits_received'],
        'explosion_hits': value['explosion_hits'],
        'piercings_received': value['piercings_received'],
        'piercings': value['piercings'],
        'no_damage_direct_hits_received': value['no_damage_direct_hits_received'],
        'avg_damage_blocked': value['avg_damage_blocked'],
        'avg_damage_assisted_track': value['avg_damage_assisted_track'],
        'avg_damage_assisted_radio': value['avg_damage_assisted_radio'],
        'avg_damage_assisted': value['avg_damage_assisted'],
        'avg_damage_assisted_stun': value['avg_damage_assisted_stun'],
    };
}

export const AccountInfoDataValueStatisticsGlobalmapMiddlePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

