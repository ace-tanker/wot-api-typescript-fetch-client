/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface ClansMessageboardDataValueItem
 */
export interface ClansMessageboardDataValueItem {
    /**
     * Message text
     * @type {string}
     * @memberof ClansMessageboardDataValueItem
     */
    message: string;
    /**
     * Message creation date
     * @type {number}
     * @memberof ClansMessageboardDataValueItem
     */
    created_at: number;
    /**
     * Date when message was updated
     * @type {number}
     * @memberof ClansMessageboardDataValueItem
     */
    updated_at: number | null;
    /**
     * Message author ID
     * @type {number}
     * @memberof ClansMessageboardDataValueItem
     */
    author_id: number;
    /**
     * ID of a player who has changed the message
     * @type {number}
     * @memberof ClansMessageboardDataValueItem
     */
    editor_id: number;
    /**
     * Indicates if the message has been read
     * @type {boolean}
     * @memberof ClansMessageboardDataValueItem
     */
    is_read: boolean;
}

/**
 * Check if a given object implements the ClansMessageboardDataValueItem interface.
 */
export function instanceOfClansMessageboardDataValueItem(value: object): value is ClansMessageboardDataValueItem {
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    if (!('author_id' in value) || value['author_id'] === undefined) return false;
    if (!('editor_id' in value) || value['editor_id'] === undefined) return false;
    if (!('is_read' in value) || value['is_read'] === undefined) return false;
    return true;
}

export function ClansMessageboardDataValueItemFromJSON(json: any): ClansMessageboardDataValueItem {
    return ClansMessageboardDataValueItemFromJSONTyped(json, false);
}

export function ClansMessageboardDataValueItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClansMessageboardDataValueItem {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'],
        'created_at': json['created_at'],
        'updated_at': json['updated_at'],
        'author_id': json['author_id'],
        'editor_id': json['editor_id'],
        'is_read': json['is_read'],
    };
}

export function ClansMessageboardDataValueItemToJSON(json: any): ClansMessageboardDataValueItem {
    return ClansMessageboardDataValueItemToJSONTyped(json, false);
}

export function ClansMessageboardDataValueItemToJSONTyped(value?: ClansMessageboardDataValueItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'created_at': value['created_at'],
        'updated_at': value['updated_at'],
        'author_id': value['author_id'],
        'editor_id': value['editor_id'],
        'is_read': value['is_read'],
    };
}

export const ClansMessageboardDataValueItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

