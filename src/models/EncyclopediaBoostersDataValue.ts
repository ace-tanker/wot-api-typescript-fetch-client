/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaBoostersDataValueImages } from './EncyclopediaBoostersDataValueImages.js';
import {
    EncyclopediaBoostersDataValueImagesFromJSON,
    EncyclopediaBoostersDataValueImagesFromJSONTyped,
    EncyclopediaBoostersDataValueImagesToJSON,
    EncyclopediaBoostersDataValueImagesToJSONTyped,
} from './EncyclopediaBoostersDataValueImages.js';

/**
 * 
 * @export
 * @interface EncyclopediaBoostersDataValue
 */
export interface EncyclopediaBoostersDataValue {
    /**
     * Personal Reserve ID
     * @type {number}
     * @memberof EncyclopediaBoostersDataValue
     */
    booster_id: number;
    /**
     * Personal Reserve name
     * @type {string}
     * @memberof EncyclopediaBoostersDataValue
     */
    name: string;
    /**
     * Personal Reserve description
     * @type {string}
     * @memberof EncyclopediaBoostersDataValue
     */
    description: string;
    /**
     * 
     * @type {EncyclopediaBoostersDataValueImages}
     * @memberof EncyclopediaBoostersDataValue
     */
    images: EncyclopediaBoostersDataValueImages;
    /**
     * Personal Reserve duration in seconds
     * @type {number}
     * @memberof EncyclopediaBoostersDataValue
     */
    lifetime: number;
    /**
     * Resource affected by Personal Reserve. Valid values: credits, experience, crew_experience, free_experience.
     * @type {string}
     * @memberof EncyclopediaBoostersDataValue
     */
    resource: string;
    /**
     * Personal Reserve auto activation flag
     * @type {boolean}
     * @memberof EncyclopediaBoostersDataValue
     */
    is_auto: boolean;
    /**
     * Personal Reserve expiration time in UTC
     * @type {number}
     * @memberof EncyclopediaBoostersDataValue
     */
    expires_at: number | null;
    /**
     * Cost in credits
     * @type {number}
     * @memberof EncyclopediaBoostersDataValue
     */
    price_credit: number;
    /**
     * Price in gold
     * @type {number}
     * @memberof EncyclopediaBoostersDataValue
     */
    price_gold: number;
}

/**
 * Check if a given object implements the EncyclopediaBoostersDataValue interface.
 */
export function instanceOfEncyclopediaBoostersDataValue(value: object): value is EncyclopediaBoostersDataValue {
    if (!('booster_id' in value) || value['booster_id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    if (!('lifetime' in value) || value['lifetime'] === undefined) return false;
    if (!('resource' in value) || value['resource'] === undefined) return false;
    if (!('is_auto' in value) || value['is_auto'] === undefined) return false;
    if (!('expires_at' in value) || value['expires_at'] === undefined) return false;
    if (!('price_credit' in value) || value['price_credit'] === undefined) return false;
    if (!('price_gold' in value) || value['price_gold'] === undefined) return false;
    return true;
}

export function EncyclopediaBoostersDataValueFromJSON(json: any): EncyclopediaBoostersDataValue {
    return EncyclopediaBoostersDataValueFromJSONTyped(json, false);
}

export function EncyclopediaBoostersDataValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaBoostersDataValue {
    if (json == null) {
        return json;
    }
    return {
        
        'booster_id': json['booster_id'],
        'name': json['name'],
        'description': json['description'],
        'images': EncyclopediaBoostersDataValueImagesFromJSON(json['images']),
        'lifetime': json['lifetime'],
        'resource': json['resource'],
        'is_auto': json['is_auto'],
        'expires_at': json['expires_at'],
        'price_credit': json['price_credit'],
        'price_gold': json['price_gold'],
    };
}

export function EncyclopediaBoostersDataValueToJSON(json: any): EncyclopediaBoostersDataValue {
    return EncyclopediaBoostersDataValueToJSONTyped(json, false);
}

export function EncyclopediaBoostersDataValueToJSONTyped(value?: EncyclopediaBoostersDataValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'booster_id': value['booster_id'],
        'name': value['name'],
        'description': value['description'],
        'images': EncyclopediaBoostersDataValueImagesToJSON(value['images']),
        'lifetime': value['lifetime'],
        'resource': value['resource'],
        'is_auto': value['is_auto'],
        'expires_at': value['expires_at'],
        'price_credit': value['price_credit'],
        'price_gold': value['price_gold'],
    };
}

export const EncyclopediaBoostersDataValuePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

