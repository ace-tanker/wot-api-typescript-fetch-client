/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaModulesMeta } from './EncyclopediaModulesMeta.js';
import {
    EncyclopediaModulesMetaFromJSON,
    EncyclopediaModulesMetaFromJSONTyped,
    EncyclopediaModulesMetaToJSON,
    EncyclopediaModulesMetaToJSONTyped,
} from './EncyclopediaModulesMeta.js';
import type { EncyclopediaModulesDataValue } from './EncyclopediaModulesDataValue.js';
import {
    EncyclopediaModulesDataValueFromJSON,
    EncyclopediaModulesDataValueFromJSONTyped,
    EncyclopediaModulesDataValueToJSON,
    EncyclopediaModulesDataValueToJSONTyped,
} from './EncyclopediaModulesDataValue.js';

/**
 * 
 * @export
 * @interface EncyclopediaModulesOk
 */
export interface EncyclopediaModulesOk {
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaModulesOk
     */
    status: EncyclopediaModulesOkStatusEnum;
    /**
     * 
     * @type {EncyclopediaModulesMeta}
     * @memberof EncyclopediaModulesOk
     */
    meta: EncyclopediaModulesMeta;
    /**
     * 
     * @type {{ [key: string]: EncyclopediaModulesDataValue | undefined; }}
     * @memberof EncyclopediaModulesOk
     */
    data: { [key: string]: EncyclopediaModulesDataValue | undefined; };
}

/**
* @export
* @enum {string}
*/
export enum EncyclopediaModulesOkStatusEnum {
    Ok = 'ok'
}


/**
 * Check if a given object implements the EncyclopediaModulesOk interface.
 */
export function instanceOfEncyclopediaModulesOk(value: object): value is EncyclopediaModulesOk {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function EncyclopediaModulesOkFromJSON(json: any): EncyclopediaModulesOk {
    return EncyclopediaModulesOkFromJSONTyped(json, false);
}

export function EncyclopediaModulesOkFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaModulesOk {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'],
        'meta': EncyclopediaModulesMetaFromJSON(json['meta']),
        'data': (mapValues(json['data'], EncyclopediaModulesDataValueFromJSON)),
    };
}

export function EncyclopediaModulesOkToJSON(json: any): EncyclopediaModulesOk {
    return EncyclopediaModulesOkToJSONTyped(json, false);
}

export function EncyclopediaModulesOkToJSONTyped(value?: EncyclopediaModulesOk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'meta': EncyclopediaModulesMetaToJSON(value['meta']),
        'data': (mapValues(value['data'], EncyclopediaModulesDataValueToJSON)),
    };
}

export const EncyclopediaModulesOkPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

