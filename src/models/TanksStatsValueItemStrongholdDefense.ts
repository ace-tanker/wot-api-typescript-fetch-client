/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * General stats for player's battles in Stronghold defense
 * @export
 * @interface TanksStatsValueItemStrongholdDefense
 */
export interface TanksStatsValueItemStrongholdDefense {
    /**
     * Battles fought
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    battles: number;
    /**
     * Victories
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    wins: number;
    /**
     * Total experience
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    xp: number;
    /**
     * Defeats
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    losses: number;
    /**
     * Battles survived
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    survivedBattles: number;
    /**
     * Damage received
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    damageReceived: number;
    /**
     * Damage caused
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    damageDealt: number;
    /**
     * Enemies spotted
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    spotted: number;
    /**
     * Shots fired
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    shots: number;
    /**
     * Hits
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    hits: number;
    /**
     * Vehicles destroyed
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    frags: number;
    /**
     * Base capture points
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    capturePoints: number;
    /**
     * Base defense points
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    droppedCapturePoints: number;
    /**
     * Hit ratio
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    hitsPercents: number;
    /**
     * Draws
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    draws: number;
    /**
     * Average experience per battle
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    battleAvgXp: number;
    /**
     * Number of times an enemy was stunned by you
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    stunNumber: number;
    /**
     * Number of battles on vehicles that cause the stun effect
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    battlesOnStunningVehicles: number;
    /**
     * Damage to enemy vehicles stunned by you
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    stunAssistedDamage: number;
    /**
     * Damage dealt to the target with the actor keeping-on-track assistance
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    trackAssistedDamage: number;
    /**
     * Damage dealt to the target with the actor radio recon assistance
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    radioAssistedDamage: number;
    /**
     * Ratio of damage blocked by armor from AP, HEAT, and APCR shells to damage received from these types of shells.
     * Value is calculated starting from version 9.0.
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    tankingFactor: number;
    /**
     * Direct hits received
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    directHitsReceived: number;
    /**
     * Hits received as a result of splash damage
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    explosionHitsReceived: number;
    /**
     * Hits on enemy as a result of splash damage
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    explosionHits: number;
    /**
     * Penetrations received
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    piercingsReceived: number;
    /**
     * Penetrations
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    piercings: number;
    /**
     * Direct hits received that caused no damage
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    noDamageDirectHitsReceived: number;
    /**
     * Maximum destroyed in battle
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    maxFrags: number;
    /**
     * Maximum experience per battle
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    maxXp: number;
    /**
     * Maximum damage caused in a battle
     * @type {number}
     * @memberof TanksStatsValueItemStrongholdDefense
     */
    maxDamage: number;
}

/**
 * Check if a given object implements the TanksStatsValueItemStrongholdDefense interface.
 */
export function instanceOfTanksStatsValueItemStrongholdDefense(value: object): value is TanksStatsValueItemStrongholdDefense {
    if (!('battles' in value) || value['battles'] === undefined) return false;
    if (!('wins' in value) || value['wins'] === undefined) return false;
    if (!('xp' in value) || value['xp'] === undefined) return false;
    if (!('losses' in value) || value['losses'] === undefined) return false;
    if (!('survivedBattles' in value) || value['survivedBattles'] === undefined) return false;
    if (!('damageReceived' in value) || value['damageReceived'] === undefined) return false;
    if (!('damageDealt' in value) || value['damageDealt'] === undefined) return false;
    if (!('spotted' in value) || value['spotted'] === undefined) return false;
    if (!('shots' in value) || value['shots'] === undefined) return false;
    if (!('hits' in value) || value['hits'] === undefined) return false;
    if (!('frags' in value) || value['frags'] === undefined) return false;
    if (!('capturePoints' in value) || value['capturePoints'] === undefined) return false;
    if (!('droppedCapturePoints' in value) || value['droppedCapturePoints'] === undefined) return false;
    if (!('hitsPercents' in value) || value['hitsPercents'] === undefined) return false;
    if (!('draws' in value) || value['draws'] === undefined) return false;
    if (!('battleAvgXp' in value) || value['battleAvgXp'] === undefined) return false;
    if (!('stunNumber' in value) || value['stunNumber'] === undefined) return false;
    if (!('battlesOnStunningVehicles' in value) || value['battlesOnStunningVehicles'] === undefined) return false;
    if (!('stunAssistedDamage' in value) || value['stunAssistedDamage'] === undefined) return false;
    if (!('trackAssistedDamage' in value) || value['trackAssistedDamage'] === undefined) return false;
    if (!('radioAssistedDamage' in value) || value['radioAssistedDamage'] === undefined) return false;
    if (!('tankingFactor' in value) || value['tankingFactor'] === undefined) return false;
    if (!('directHitsReceived' in value) || value['directHitsReceived'] === undefined) return false;
    if (!('explosionHitsReceived' in value) || value['explosionHitsReceived'] === undefined) return false;
    if (!('explosionHits' in value) || value['explosionHits'] === undefined) return false;
    if (!('piercingsReceived' in value) || value['piercingsReceived'] === undefined) return false;
    if (!('piercings' in value) || value['piercings'] === undefined) return false;
    if (!('noDamageDirectHitsReceived' in value) || value['noDamageDirectHitsReceived'] === undefined) return false;
    if (!('maxFrags' in value) || value['maxFrags'] === undefined) return false;
    if (!('maxXp' in value) || value['maxXp'] === undefined) return false;
    if (!('maxDamage' in value) || value['maxDamage'] === undefined) return false;
    return true;
}

export function TanksStatsValueItemStrongholdDefenseFromJSON(json: any): TanksStatsValueItemStrongholdDefense {
    return TanksStatsValueItemStrongholdDefenseFromJSONTyped(json, false);
}

export function TanksStatsValueItemStrongholdDefenseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TanksStatsValueItemStrongholdDefense {
    if (json == null) {
        return json;
    }
    return {
        
        'battles': json['battles'],
        'wins': json['wins'],
        'xp': json['xp'],
        'losses': json['losses'],
        'survivedBattles': json['survived_battles'],
        'damageReceived': json['damage_received'],
        'damageDealt': json['damage_dealt'],
        'spotted': json['spotted'],
        'shots': json['shots'],
        'hits': json['hits'],
        'frags': json['frags'],
        'capturePoints': json['capture_points'],
        'droppedCapturePoints': json['dropped_capture_points'],
        'hitsPercents': json['hits_percents'],
        'draws': json['draws'],
        'battleAvgXp': json['battle_avg_xp'],
        'stunNumber': json['stun_number'],
        'battlesOnStunningVehicles': json['battles_on_stunning_vehicles'],
        'stunAssistedDamage': json['stun_assisted_damage'],
        'trackAssistedDamage': json['track_assisted_damage'],
        'radioAssistedDamage': json['radio_assisted_damage'],
        'tankingFactor': json['tanking_factor'],
        'directHitsReceived': json['direct_hits_received'],
        'explosionHitsReceived': json['explosion_hits_received'],
        'explosionHits': json['explosion_hits'],
        'piercingsReceived': json['piercings_received'],
        'piercings': json['piercings'],
        'noDamageDirectHitsReceived': json['no_damage_direct_hits_received'],
        'maxFrags': json['max_frags'],
        'maxXp': json['max_xp'],
        'maxDamage': json['max_damage'],
    };
}

export function TanksStatsValueItemStrongholdDefenseToJSON(json: any): TanksStatsValueItemStrongholdDefense {
    return TanksStatsValueItemStrongholdDefenseToJSONTyped(json, false);
}

export function TanksStatsValueItemStrongholdDefenseToJSONTyped(value?: TanksStatsValueItemStrongholdDefense | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'battles': value['battles'],
        'wins': value['wins'],
        'xp': value['xp'],
        'losses': value['losses'],
        'survived_battles': value['survivedBattles'],
        'damage_received': value['damageReceived'],
        'damage_dealt': value['damageDealt'],
        'spotted': value['spotted'],
        'shots': value['shots'],
        'hits': value['hits'],
        'frags': value['frags'],
        'capture_points': value['capturePoints'],
        'dropped_capture_points': value['droppedCapturePoints'],
        'hits_percents': value['hitsPercents'],
        'draws': value['draws'],
        'battle_avg_xp': value['battleAvgXp'],
        'stun_number': value['stunNumber'],
        'battles_on_stunning_vehicles': value['battlesOnStunningVehicles'],
        'stun_assisted_damage': value['stunAssistedDamage'],
        'track_assisted_damage': value['trackAssistedDamage'],
        'radio_assisted_damage': value['radioAssistedDamage'],
        'tanking_factor': value['tankingFactor'],
        'direct_hits_received': value['directHitsReceived'],
        'explosion_hits_received': value['explosionHitsReceived'],
        'explosion_hits': value['explosionHits'],
        'piercings_received': value['piercingsReceived'],
        'piercings': value['piercings'],
        'no_damage_direct_hits_received': value['noDamageDirectHitsReceived'],
        'max_frags': value['maxFrags'],
        'max_xp': value['maxXp'],
        'max_damage': value['maxDamage'],
    };
}

