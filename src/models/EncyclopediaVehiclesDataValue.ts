/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaVehiclesDataValueDefaultProfile } from './EncyclopediaVehiclesDataValueDefaultProfile.js';
import {
    EncyclopediaVehiclesDataValueDefaultProfileFromJSON,
    EncyclopediaVehiclesDataValueDefaultProfileFromJSONTyped,
    EncyclopediaVehiclesDataValueDefaultProfileToJSON,
    EncyclopediaVehiclesDataValueDefaultProfileToJSONTyped,
} from './EncyclopediaVehiclesDataValueDefaultProfile.js';
import type { EncyclopediaVehiclesDataValueImages } from './EncyclopediaVehiclesDataValueImages.js';
import {
    EncyclopediaVehiclesDataValueImagesFromJSON,
    EncyclopediaVehiclesDataValueImagesFromJSONTyped,
    EncyclopediaVehiclesDataValueImagesToJSON,
    EncyclopediaVehiclesDataValueImagesToJSONTyped,
} from './EncyclopediaVehiclesDataValueImages.js';
import type { EncyclopediaVehiclesDataValueMultinationValue } from './EncyclopediaVehiclesDataValueMultinationValue.js';
import {
    EncyclopediaVehiclesDataValueMultinationValueFromJSON,
    EncyclopediaVehiclesDataValueMultinationValueFromJSONTyped,
    EncyclopediaVehiclesDataValueMultinationValueToJSON,
    EncyclopediaVehiclesDataValueMultinationValueToJSONTyped,
} from './EncyclopediaVehiclesDataValueMultinationValue.js';
import type { EncyclopediaVehiclesDataValueCrewItem } from './EncyclopediaVehiclesDataValueCrewItem.js';
import {
    EncyclopediaVehiclesDataValueCrewItemFromJSON,
    EncyclopediaVehiclesDataValueCrewItemFromJSONTyped,
    EncyclopediaVehiclesDataValueCrewItemToJSON,
    EncyclopediaVehiclesDataValueCrewItemToJSONTyped,
} from './EncyclopediaVehiclesDataValueCrewItem.js';
import type { EncyclopediaVehiclesDataValueModulesTreeValue } from './EncyclopediaVehiclesDataValueModulesTreeValue.js';
import {
    EncyclopediaVehiclesDataValueModulesTreeValueFromJSON,
    EncyclopediaVehiclesDataValueModulesTreeValueFromJSONTyped,
    EncyclopediaVehiclesDataValueModulesTreeValueToJSON,
    EncyclopediaVehiclesDataValueModulesTreeValueToJSONTyped,
} from './EncyclopediaVehiclesDataValueModulesTreeValue.js';

/**
 * 
 * @export
 * @interface EncyclopediaVehiclesDataValue
 */
export interface EncyclopediaVehiclesDataValue {
    /**
     * Vehicle ID
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValue
     */
    tank_id: number;
    /**
     * Vehicle type
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValue
     */
    type: string;
    /**
     * Vehicle tag
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValue
     */
    tag: string;
    /**
     * Vehicle name
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValue
     */
    name: string;
    /**
     * Vehicle short name
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValue
     */
    short_name: string;
    /**
     * Vehicle description
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValue
     */
    description: string;
    /**
     * Nation
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValue
     */
    nation: string;
    /**
     * Tier
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValue
     */
    tier: number;
    /**
     * Indicates if the vehicle is Premium vehicle
     * @type {boolean}
     * @memberof EncyclopediaVehiclesDataValue
     */
    is_premium: boolean;
    /**
     * Indicates if the vehicle is a gift vehicle
     * @type {boolean}
     * @memberof EncyclopediaVehiclesDataValue
     */
    is_gift: boolean;
    /**
     * Indicates if the vehicle is a wheeled vehicle
     * @type {boolean}
     * @memberof EncyclopediaVehiclesDataValue
     */
    is_wheeled: boolean;
    /**
     * Indicates the IGR vehicle. Active only for Korea realm
     * @type {boolean}
     * @memberof EncyclopediaVehiclesDataValue
     */
    is_premium_igr: boolean;
    /**
     * 
     * @type {EncyclopediaVehiclesDataValueImages}
     * @memberof EncyclopediaVehiclesDataValue
     */
    images: EncyclopediaVehiclesDataValueImages;
    /**
     * Cost in credits
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValue
     */
    price_credit: number | null;
    /**
     * Cost in gold
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValue
     */
    price_gold: number | null;
    /**
     * List of research costs in form of pairs:
     * 
     * * parent vehicle ID
     * * cost of research in XP
     * @type {{ [key: string]: number | undefined; }}
     * @memberof EncyclopediaVehiclesDataValue
     */
    prices_xp: { [key: string]: number | undefined; } | null;
    /**
     * List of vehicles available for research in form of pairs:
     * 
     * * researched vehicle ID
     * * cost of research in XP
     * @type {{ [key: string]: number | undefined; }}
     * @memberof EncyclopediaVehiclesDataValue
     */
    next_tanks: { [key: string]: number | undefined; } | null;
    /**
     * 
     * @type {EncyclopediaVehiclesDataValueDefaultProfile}
     * @memberof EncyclopediaVehiclesDataValue
     */
    default_profile: EncyclopediaVehiclesDataValueDefaultProfile;
    /**
     * List of compatible gun IDs
     * @type {Array<number>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    guns: Array<number>;
    /**
     * List of compatible turret IDs
     * @type {Array<number>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    turrets: Array<number>;
    /**
     * List of compatible engine IDs
     * @type {Array<number>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    engines: Array<number>;
    /**
     * List of compatible suspension IDs
     * @type {Array<number>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    suspensions: Array<number>;
    /**
     * List of compatible radio IDs
     * @type {Array<number>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    radios: Array<number>;
    /**
     * List of IDs of compatible equipment and consumables
     * @type {Array<number>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    provisions: Array<number>;
    /**
     * 
     * @type {{ [key: string]: EncyclopediaVehiclesDataValueModulesTreeValue | undefined; }}
     * @memberof EncyclopediaVehiclesDataValue
     */
    modules_tree: { [key: string]: EncyclopediaVehiclesDataValueModulesTreeValue | undefined; };
    /**
     * Crew
     * @type {Array<EncyclopediaVehiclesDataValueCrewItem>}
     * @memberof EncyclopediaVehiclesDataValue
     */
    crew: Array<EncyclopediaVehiclesDataValueCrewItem>;
    /**
     * 
     * @type {{ [key: string]: EncyclopediaVehiclesDataValueMultinationValue | undefined; }}
     * @memberof EncyclopediaVehiclesDataValue
     */
    multination: { [key: string]: EncyclopediaVehiclesDataValueMultinationValue | undefined; } | null;
}

/**
 * Check if a given object implements the EncyclopediaVehiclesDataValue interface.
 */
export function instanceOfEncyclopediaVehiclesDataValue(value: object): value is EncyclopediaVehiclesDataValue {
    if (!('tank_id' in value) || value['tank_id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('tag' in value) || value['tag'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('short_name' in value) || value['short_name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('nation' in value) || value['nation'] === undefined) return false;
    if (!('tier' in value) || value['tier'] === undefined) return false;
    if (!('is_premium' in value) || value['is_premium'] === undefined) return false;
    if (!('is_gift' in value) || value['is_gift'] === undefined) return false;
    if (!('is_wheeled' in value) || value['is_wheeled'] === undefined) return false;
    if (!('is_premium_igr' in value) || value['is_premium_igr'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    if (!('price_credit' in value) || value['price_credit'] === undefined) return false;
    if (!('price_gold' in value) || value['price_gold'] === undefined) return false;
    if (!('prices_xp' in value) || value['prices_xp'] === undefined) return false;
    if (!('next_tanks' in value) || value['next_tanks'] === undefined) return false;
    if (!('default_profile' in value) || value['default_profile'] === undefined) return false;
    if (!('guns' in value) || value['guns'] === undefined) return false;
    if (!('turrets' in value) || value['turrets'] === undefined) return false;
    if (!('engines' in value) || value['engines'] === undefined) return false;
    if (!('suspensions' in value) || value['suspensions'] === undefined) return false;
    if (!('radios' in value) || value['radios'] === undefined) return false;
    if (!('provisions' in value) || value['provisions'] === undefined) return false;
    if (!('modules_tree' in value) || value['modules_tree'] === undefined) return false;
    if (!('crew' in value) || value['crew'] === undefined) return false;
    if (!('multination' in value) || value['multination'] === undefined) return false;
    return true;
}

export function EncyclopediaVehiclesDataValueFromJSON(json: any): EncyclopediaVehiclesDataValue {
    return EncyclopediaVehiclesDataValueFromJSONTyped(json, false);
}

export function EncyclopediaVehiclesDataValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaVehiclesDataValue {
    if (json == null) {
        return json;
    }
    return {
        
        'tank_id': json['tank_id'],
        'type': json['type'],
        'tag': json['tag'],
        'name': json['name'],
        'short_name': json['short_name'],
        'description': json['description'],
        'nation': json['nation'],
        'tier': json['tier'],
        'is_premium': json['is_premium'],
        'is_gift': json['is_gift'],
        'is_wheeled': json['is_wheeled'],
        'is_premium_igr': json['is_premium_igr'],
        'images': EncyclopediaVehiclesDataValueImagesFromJSON(json['images']),
        'price_credit': json['price_credit'],
        'price_gold': json['price_gold'],
        'prices_xp': json['prices_xp'],
        'next_tanks': json['next_tanks'],
        'default_profile': EncyclopediaVehiclesDataValueDefaultProfileFromJSON(json['default_profile']),
        'guns': json['guns'],
        'turrets': json['turrets'],
        'engines': json['engines'],
        'suspensions': json['suspensions'],
        'radios': json['radios'],
        'provisions': json['provisions'],
        'modules_tree': (mapValues(json['modules_tree'], EncyclopediaVehiclesDataValueModulesTreeValueFromJSON)),
        'crew': ((json['crew'] as Array<any>).map(EncyclopediaVehiclesDataValueCrewItemFromJSON)),
        'multination': (json['multination'] == null ? null : mapValues(json['multination'], EncyclopediaVehiclesDataValueMultinationValueFromJSON)),
    };
}

export function EncyclopediaVehiclesDataValueToJSON(json: any): EncyclopediaVehiclesDataValue {
    return EncyclopediaVehiclesDataValueToJSONTyped(json, false);
}

export function EncyclopediaVehiclesDataValueToJSONTyped(value?: EncyclopediaVehiclesDataValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tank_id': value['tank_id'],
        'type': value['type'],
        'tag': value['tag'],
        'name': value['name'],
        'short_name': value['short_name'],
        'description': value['description'],
        'nation': value['nation'],
        'tier': value['tier'],
        'is_premium': value['is_premium'],
        'is_gift': value['is_gift'],
        'is_wheeled': value['is_wheeled'],
        'is_premium_igr': value['is_premium_igr'],
        'images': EncyclopediaVehiclesDataValueImagesToJSON(value['images']),
        'price_credit': value['price_credit'],
        'price_gold': value['price_gold'],
        'prices_xp': value['prices_xp'],
        'next_tanks': value['next_tanks'],
        'default_profile': EncyclopediaVehiclesDataValueDefaultProfileToJSON(value['default_profile']),
        'guns': value['guns'],
        'turrets': value['turrets'],
        'engines': value['engines'],
        'suspensions': value['suspensions'],
        'radios': value['radios'],
        'provisions': value['provisions'],
        'modules_tree': (mapValues(value['modules_tree'], EncyclopediaVehiclesDataValueModulesTreeValueToJSON)),
        'crew': ((value['crew'] as Array<any>).map(EncyclopediaVehiclesDataValueCrewItemToJSON)),
        'multination': (value['multination'] == null ? null : mapValues(value['multination'], EncyclopediaVehiclesDataValueMultinationValueToJSON)),
    };
}

export const EncyclopediaVehiclesDataValuePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

