/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AccountInfoValuePrivate } from './AccountInfoValuePrivate.js';
import {
    AccountInfoValuePrivateFromJSON,
    AccountInfoValuePrivateFromJSONTyped,
    AccountInfoValuePrivateToJSON,
    AccountInfoValuePrivateToJSONTyped,
} from './AccountInfoValuePrivate.js';
import type { AccountInfoValueStatistics } from './AccountInfoValueStatistics.js';
import {
    AccountInfoValueStatisticsFromJSON,
    AccountInfoValueStatisticsFromJSONTyped,
    AccountInfoValueStatisticsToJSON,
    AccountInfoValueStatisticsToJSONTyped,
} from './AccountInfoValueStatistics.js';

/**
 * 
 * @export
 * @interface AccountInfoValue
 */
export interface AccountInfoValue {
    /**
     * 
     * @type {AccountInfoValueStatistics}
     * @memberof AccountInfoValue
     */
    statistics: AccountInfoValueStatistics;
    /**
     * Player account ID
     * @type {number}
     * @memberof AccountInfoValue
     */
    accountId: number;
    /**
     * Date when player's account was created
     * @type {number}
     * @memberof AccountInfoValue
     */
    createdAt: number;
    /**
     * Date when player details were updated
     * @type {number}
     * @memberof AccountInfoValue
     */
    updatedAt: number;
    /**
     * End time of last game session
     * @type {number}
     * @memberof AccountInfoValue
     */
    logoutAt: number;
    /**
     * Last battle time
     * @type {number}
     * @memberof AccountInfoValue
     */
    lastBattleTime: number;
    /**
     * Player name
     * @type {string}
     * @memberof AccountInfoValue
     */
    nickname: string;
    /**
     * Personal rating
     * @type {number}
     * @memberof AccountInfoValue
     */
    globalRating: number;
    /**
     * 
     * @type {AccountInfoValuePrivate}
     * @memberof AccountInfoValue
     */
    _private: AccountInfoValuePrivate | null;
    /**
     * Language selected in the game client
     * @type {string}
     * @memberof AccountInfoValue
     */
    clientLanguage: string;
    /**
     * 
     * @type {number}
     * @memberof AccountInfoValue
     */
    clanId: number | null;
}

/**
 * Check if a given object implements the AccountInfoValue interface.
 */
export function instanceOfAccountInfoValue(value: object): value is AccountInfoValue {
    if (!('statistics' in value) || value['statistics'] === undefined) return false;
    if (!('accountId' in value) || value['accountId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('logoutAt' in value) || value['logoutAt'] === undefined) return false;
    if (!('lastBattleTime' in value) || value['lastBattleTime'] === undefined) return false;
    if (!('nickname' in value) || value['nickname'] === undefined) return false;
    if (!('globalRating' in value) || value['globalRating'] === undefined) return false;
    if (!('_private' in value) || value['_private'] === undefined) return false;
    if (!('clientLanguage' in value) || value['clientLanguage'] === undefined) return false;
    if (!('clanId' in value) || value['clanId'] === undefined) return false;
    return true;
}

export function AccountInfoValueFromJSON(json: any): AccountInfoValue {
    return AccountInfoValueFromJSONTyped(json, false);
}

export function AccountInfoValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfoValue {
    if (json == null) {
        return json;
    }
    return {
        
        'statistics': AccountInfoValueStatisticsFromJSON(json['statistics']),
        'accountId': json['account_id'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
        'logoutAt': json['logout_at'],
        'lastBattleTime': json['last_battle_time'],
        'nickname': json['nickname'],
        'globalRating': json['global_rating'],
        '_private': AccountInfoValuePrivateFromJSON(json['private']),
        'clientLanguage': json['client_language'],
        'clanId': json['clan_id'],
    };
}

export function AccountInfoValueToJSON(json: any): AccountInfoValue {
    return AccountInfoValueToJSONTyped(json, false);
}

export function AccountInfoValueToJSONTyped(value?: AccountInfoValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'statistics': AccountInfoValueStatisticsToJSON(value['statistics']),
        'account_id': value['accountId'],
        'created_at': value['createdAt'],
        'updated_at': value['updatedAt'],
        'logout_at': value['logoutAt'],
        'last_battle_time': value['lastBattleTime'],
        'nickname': value['nickname'],
        'global_rating': value['globalRating'],
        'private': AccountInfoValuePrivateToJSON(value['_private']),
        'client_language': value['clientLanguage'],
        'clan_id': value['clanId'],
    };
}

