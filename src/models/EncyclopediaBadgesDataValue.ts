/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaBadgesDataValueImages } from './EncyclopediaBadgesDataValueImages.js';
import {
    EncyclopediaBadgesDataValueImagesFromJSON,
    EncyclopediaBadgesDataValueImagesFromJSONTyped,
    EncyclopediaBadgesDataValueImagesToJSON,
    EncyclopediaBadgesDataValueImagesToJSONTyped,
} from './EncyclopediaBadgesDataValueImages.js';

/**
 * 
 * @export
 * @interface EncyclopediaBadgesDataValue
 */
export interface EncyclopediaBadgesDataValue {
    /**
     * Badge ID
     * @type {number}
     * @memberof EncyclopediaBadgesDataValue
     */
    badge_id: number;
    /**
     * Badge name
     * @type {string}
     * @memberof EncyclopediaBadgesDataValue
     */
    name: string;
    /**
     * Badge description
     * @type {string}
     * @memberof EncyclopediaBadgesDataValue
     */
    description: string | null;
    /**
     * 
     * @type {EncyclopediaBadgesDataValueImages}
     * @memberof EncyclopediaBadgesDataValue
     */
    images: EncyclopediaBadgesDataValueImages;
}

/**
 * Check if a given object implements the EncyclopediaBadgesDataValue interface.
 */
export function instanceOfEncyclopediaBadgesDataValue(value: object): value is EncyclopediaBadgesDataValue {
    if (!('badge_id' in value) || value['badge_id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    return true;
}

export function EncyclopediaBadgesDataValueFromJSON(json: any): EncyclopediaBadgesDataValue {
    return EncyclopediaBadgesDataValueFromJSONTyped(json, false);
}

export function EncyclopediaBadgesDataValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaBadgesDataValue {
    if (json == null) {
        return json;
    }
    return {
        
        'badge_id': json['badge_id'],
        'name': json['name'],
        'description': json['description'],
        'images': EncyclopediaBadgesDataValueImagesFromJSON(json['images']),
    };
}

export function EncyclopediaBadgesDataValueToJSON(json: any): EncyclopediaBadgesDataValue {
    return EncyclopediaBadgesDataValueToJSONTyped(json, false);
}

export function EncyclopediaBadgesDataValueToJSONTyped(value?: EncyclopediaBadgesDataValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'badge_id': value['badge_id'],
        'name': value['name'],
        'description': value['description'],
        'images': EncyclopediaBadgesDataValueImagesToJSON(value['images']),
    };
}

export const EncyclopediaBadgesDataValuePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

