/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GlobalmapEventsDataItemFrontsItem
 */
export interface GlobalmapEventsDataItemFrontsItem {
    /**
     * Front ID
     * @type {string}
     * @memberof GlobalmapEventsDataItemFrontsItem
     */
    front_id: string;
    /**
     * Front name
     * @type {string}
     * @memberof GlobalmapEventsDataItemFrontsItem
     */
    front_name: string;
    /**
     * Link to Front
     * @type {string}
     * @memberof GlobalmapEventsDataItemFrontsItem
     */
    url: string | null;
}

/**
 * Check if a given object implements the GlobalmapEventsDataItemFrontsItem interface.
 */
export function instanceOfGlobalmapEventsDataItemFrontsItem(value: object): value is GlobalmapEventsDataItemFrontsItem {
    if (!('front_id' in value) || value['front_id'] === undefined) return false;
    if (!('front_name' in value) || value['front_name'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function GlobalmapEventsDataItemFrontsItemFromJSON(json: any): GlobalmapEventsDataItemFrontsItem {
    return GlobalmapEventsDataItemFrontsItemFromJSONTyped(json, false);
}

export function GlobalmapEventsDataItemFrontsItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventsDataItemFrontsItem {
    if (json == null) {
        return json;
    }
    return {
        
        'front_id': json['front_id'],
        'front_name': json['front_name'],
        'url': json['url'],
    };
}

export function GlobalmapEventsDataItemFrontsItemToJSON(json: any): GlobalmapEventsDataItemFrontsItem {
    return GlobalmapEventsDataItemFrontsItemToJSONTyped(json, false);
}

export function GlobalmapEventsDataItemFrontsItemToJSONTyped(value?: GlobalmapEventsDataItemFrontsItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'front_id': value['front_id'],
        'front_name': value['front_name'],
        'url': value['url'],
    };
}

export const GlobalmapEventsDataItemFrontsItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

