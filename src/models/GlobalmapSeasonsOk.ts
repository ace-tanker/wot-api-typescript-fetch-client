/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GlobalmapSeasonsMeta } from './GlobalmapSeasonsMeta.js';
import {
    GlobalmapSeasonsMetaFromJSON,
    GlobalmapSeasonsMetaFromJSONTyped,
    GlobalmapSeasonsMetaToJSON,
    GlobalmapSeasonsMetaToJSONTyped,
} from './GlobalmapSeasonsMeta.js';
import type { GlobalmapSeasonsDataItem } from './GlobalmapSeasonsDataItem.js';
import {
    GlobalmapSeasonsDataItemFromJSON,
    GlobalmapSeasonsDataItemFromJSONTyped,
    GlobalmapSeasonsDataItemToJSON,
    GlobalmapSeasonsDataItemToJSONTyped,
} from './GlobalmapSeasonsDataItem.js';

/**
 * 
 * @export
 * @interface GlobalmapSeasonsOk
 */
export interface GlobalmapSeasonsOk {
    /**
     * 
     * @type {string}
     * @memberof GlobalmapSeasonsOk
     */
    status: GlobalmapSeasonsOkStatusEnum;
    /**
     * 
     * @type {GlobalmapSeasonsMeta}
     * @memberof GlobalmapSeasonsOk
     */
    meta: GlobalmapSeasonsMeta;
    /**
     * 
     * @type {Array<GlobalmapSeasonsDataItem>}
     * @memberof GlobalmapSeasonsOk
     */
    data: Array<GlobalmapSeasonsDataItem>;
}

/**
* @export
* @enum {string}
*/
export enum GlobalmapSeasonsOkStatusEnum {
    Ok = 'ok'
}


/**
 * Check if a given object implements the GlobalmapSeasonsOk interface.
 */
export function instanceOfGlobalmapSeasonsOk(value: object): value is GlobalmapSeasonsOk {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function GlobalmapSeasonsOkFromJSON(json: any): GlobalmapSeasonsOk {
    return GlobalmapSeasonsOkFromJSONTyped(json, false);
}

export function GlobalmapSeasonsOkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapSeasonsOk {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'],
        'meta': GlobalmapSeasonsMetaFromJSON(json['meta']),
        'data': ((json['data'] as Array<any>).map(GlobalmapSeasonsDataItemFromJSON)),
    };
}

export function GlobalmapSeasonsOkToJSON(json: any): GlobalmapSeasonsOk {
    return GlobalmapSeasonsOkToJSONTyped(json, false);
}

export function GlobalmapSeasonsOkToJSONTyped(value?: GlobalmapSeasonsOk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'meta': GlobalmapSeasonsMetaToJSON(value['meta']),
        'data': ((value['data'] as Array<any>).map(GlobalmapSeasonsDataItemToJSON)),
    };
}

export const GlobalmapSeasonsOkPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

