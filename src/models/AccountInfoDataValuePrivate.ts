/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AccountInfoDataValuePrivateRestrictions } from './AccountInfoDataValuePrivateRestrictions.js';
import {
    AccountInfoDataValuePrivateRestrictionsFromJSON,
    AccountInfoDataValuePrivateRestrictionsFromJSONTyped,
    AccountInfoDataValuePrivateRestrictionsToJSON,
    AccountInfoDataValuePrivateRestrictionsToJSONTyped,
} from './AccountInfoDataValuePrivateRestrictions.js';
import type { AccountInfoDataValuePrivateRentedValue } from './AccountInfoDataValuePrivateRentedValue.js';
import {
    AccountInfoDataValuePrivateRentedValueFromJSON,
    AccountInfoDataValuePrivateRentedValueFromJSONTyped,
    AccountInfoDataValuePrivateRentedValueToJSON,
    AccountInfoDataValuePrivateRentedValueToJSONTyped,
} from './AccountInfoDataValuePrivateRentedValue.js';
import type { AccountInfoDataValuePrivateGroupedContacts } from './AccountInfoDataValuePrivateGroupedContacts.js';
import {
    AccountInfoDataValuePrivateGroupedContactsFromJSON,
    AccountInfoDataValuePrivateGroupedContactsFromJSONTyped,
    AccountInfoDataValuePrivateGroupedContactsToJSON,
    AccountInfoDataValuePrivateGroupedContactsToJSONTyped,
} from './AccountInfoDataValuePrivateGroupedContacts.js';
import type { AccountInfoDataValuePrivateBoostersValue } from './AccountInfoDataValuePrivateBoostersValue.js';
import {
    AccountInfoDataValuePrivateBoostersValueFromJSON,
    AccountInfoDataValuePrivateBoostersValueFromJSONTyped,
    AccountInfoDataValuePrivateBoostersValueToJSON,
    AccountInfoDataValuePrivateBoostersValueToJSONTyped,
} from './AccountInfoDataValuePrivateBoostersValue.js';

/**
 * Player's private data
 * @export
 * @interface AccountInfoDataValuePrivate
 */
export interface AccountInfoDataValuePrivate {
    /**
     * Gold
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    gold: number;
    /**
     * Overall battle life time in seconds
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    battle_life_time: number;
    /**
     * Free Experience
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    free_xp: number;
    /**
     * Credits
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    credits: number;
    /**
     * Premium Account expiration time
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    premium_expires_at: number;
    /**
     * Indicates if the account is Premium Account
     * @type {boolean}
     * @memberof AccountInfoDataValuePrivate
     */
    is_premium: boolean;
    /**
     * 
     * @type {AccountInfoDataValuePrivateRestrictions}
     * @memberof AccountInfoDataValuePrivate
     */
    restrictions: AccountInfoDataValuePrivateRestrictions;
    /**
     * Indicates if mobile phone number was added to the account
     * @type {boolean}
     * @memberof AccountInfoDataValuePrivate
     */
    is_bound_to_phone: boolean;
    /**
     * Account ban details
     * @type {string}
     * @memberof AccountInfoDataValuePrivate
     */
    ban_info: string | null;
    /**
     * End time of account ban
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    ban_time: number | null;
    /**
     * Bonds
     * @type {number}
     * @memberof AccountInfoDataValuePrivate
     */
    bonds: number;
    /**
     * Personal Missions Progress. The key is a task id, the value is a status.
     * 
     * Possible statuses:
     * 
     *  * NONE - a mission is unavailable
     *  * UNLOCKED - a mission is available
     *  * NEED_GET_MAIN_REWARD - the main reward has not been received
     *  * MAIN_REWARD_GOTTEN - the main reward has been received
     *  * NEED_GET_ADD_REWARD - additional reward has not been received
     *  * NEED_GET_ALL_REWARDS - no rewards have been received
     *  * ALL_REWARDS_GOTTEN - all rewards have been received
     * .
     * @type {{ [key: string]: string | undefined; }}
     * @memberof AccountInfoDataValuePrivate
     */
    personal_missions?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {{ [key: string]: AccountInfoDataValuePrivateRentedValue | undefined; }}
     * @memberof AccountInfoDataValuePrivate
     */
    rented?: { [key: string]: AccountInfoDataValuePrivateRentedValue | undefined; };
    /**
     * 
     * @type {AccountInfoDataValuePrivateGroupedContacts}
     * @memberof AccountInfoDataValuePrivate
     */
    grouped_contacts?: AccountInfoDataValuePrivateGroupedContacts;
    /**
     * 
     * @type {{ [key: string]: AccountInfoDataValuePrivateBoostersValue | undefined; }}
     * @memberof AccountInfoDataValuePrivate
     */
    boosters?: { [key: string]: AccountInfoDataValuePrivateBoostersValue | undefined; };
    /**
     * Vehicles in the Garage.
     * @type {Array<number>}
     * @memberof AccountInfoDataValuePrivate
     */
    garage?: Array<number>;
}

/**
 * Check if a given object implements the AccountInfoDataValuePrivate interface.
 */
export function instanceOfAccountInfoDataValuePrivate(value: object): value is AccountInfoDataValuePrivate {
    if (!('gold' in value) || value['gold'] === undefined) return false;
    if (!('battle_life_time' in value) || value['battle_life_time'] === undefined) return false;
    if (!('free_xp' in value) || value['free_xp'] === undefined) return false;
    if (!('credits' in value) || value['credits'] === undefined) return false;
    if (!('premium_expires_at' in value) || value['premium_expires_at'] === undefined) return false;
    if (!('is_premium' in value) || value['is_premium'] === undefined) return false;
    if (!('restrictions' in value) || value['restrictions'] === undefined) return false;
    if (!('is_bound_to_phone' in value) || value['is_bound_to_phone'] === undefined) return false;
    if (!('ban_info' in value) || value['ban_info'] === undefined) return false;
    if (!('ban_time' in value) || value['ban_time'] === undefined) return false;
    if (!('bonds' in value) || value['bonds'] === undefined) return false;
    return true;
}

export function AccountInfoDataValuePrivateFromJSON(json: any): AccountInfoDataValuePrivate {
    return AccountInfoDataValuePrivateFromJSONTyped(json, false);
}

export function AccountInfoDataValuePrivateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfoDataValuePrivate {
    if (json == null) {
        return json;
    }
    return {
        
        'gold': json['gold'],
        'battle_life_time': json['battle_life_time'],
        'free_xp': json['free_xp'],
        'credits': json['credits'],
        'premium_expires_at': json['premium_expires_at'],
        'is_premium': json['is_premium'],
        'restrictions': AccountInfoDataValuePrivateRestrictionsFromJSON(json['restrictions']),
        'is_bound_to_phone': json['is_bound_to_phone'],
        'ban_info': json['ban_info'],
        'ban_time': json['ban_time'],
        'bonds': json['bonds'],
        'personal_missions': json['personal_missions'] == null ? undefined : json['personal_missions'],
        'rented': json['rented'] == null ? undefined : (mapValues(json['rented'], AccountInfoDataValuePrivateRentedValueFromJSON)),
        'grouped_contacts': json['grouped_contacts'] == null ? undefined : AccountInfoDataValuePrivateGroupedContactsFromJSON(json['grouped_contacts']),
        'boosters': json['boosters'] == null ? undefined : (mapValues(json['boosters'], AccountInfoDataValuePrivateBoostersValueFromJSON)),
        'garage': json['garage'] == null ? undefined : json['garage'],
    };
}

export function AccountInfoDataValuePrivateToJSON(json: any): AccountInfoDataValuePrivate {
    return AccountInfoDataValuePrivateToJSONTyped(json, false);
}

export function AccountInfoDataValuePrivateToJSONTyped(value?: AccountInfoDataValuePrivate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'gold': value['gold'],
        'battle_life_time': value['battle_life_time'],
        'free_xp': value['free_xp'],
        'credits': value['credits'],
        'premium_expires_at': value['premium_expires_at'],
        'is_premium': value['is_premium'],
        'restrictions': AccountInfoDataValuePrivateRestrictionsToJSON(value['restrictions']),
        'is_bound_to_phone': value['is_bound_to_phone'],
        'ban_info': value['ban_info'],
        'ban_time': value['ban_time'],
        'bonds': value['bonds'],
        'personal_missions': value['personal_missions'],
        'rented': value['rented'] == null ? undefined : (mapValues(value['rented'], AccountInfoDataValuePrivateRentedValueToJSON)),
        'grouped_contacts': AccountInfoDataValuePrivateGroupedContactsToJSON(value['grouped_contacts']),
        'boosters': value['boosters'] == null ? undefined : (mapValues(value['boosters'], AccountInfoDataValuePrivateBoostersValueToJSON)),
        'garage': value['garage'],
    };
}

export const AccountInfoDataValuePrivatePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

