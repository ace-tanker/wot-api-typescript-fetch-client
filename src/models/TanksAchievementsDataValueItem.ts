/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface TanksAchievementsDataValueItem
 */
export interface TanksAchievementsDataValueItem {
    /**
     * Player account ID
     * @type {number}
     * @memberof TanksAchievementsDataValueItem
     */
    account_id: number;
    /**
     * Vehicle ID
     * @type {number}
     * @memberof TanksAchievementsDataValueItem
     */
    tank_id: number;
    /**
     * Achievements earned
     * @type {{ [key: string]: number | undefined; }}
     * @memberof TanksAchievementsDataValueItem
     */
    achievements: { [key: string]: number | undefined; };
    /**
     * Current values of Achievement Series
     * @type {{ [key: string]: number | undefined; }}
     * @memberof TanksAchievementsDataValueItem
     */
    series: { [key: string]: number | undefined; };
    /**
     * Maximum values of achievement series
     * @type {{ [key: string]: number | undefined; }}
     * @memberof TanksAchievementsDataValueItem
     */
    max_series: { [key: string]: number | undefined; };
}

/**
 * Check if a given object implements the TanksAchievementsDataValueItem interface.
 */
export function instanceOfTanksAchievementsDataValueItem(value: object): value is TanksAchievementsDataValueItem {
    if (!('account_id' in value) || value['account_id'] === undefined) return false;
    if (!('tank_id' in value) || value['tank_id'] === undefined) return false;
    if (!('achievements' in value) || value['achievements'] === undefined) return false;
    if (!('series' in value) || value['series'] === undefined) return false;
    if (!('max_series' in value) || value['max_series'] === undefined) return false;
    return true;
}

export function TanksAchievementsDataValueItemFromJSON(json: any): TanksAchievementsDataValueItem {
    return TanksAchievementsDataValueItemFromJSONTyped(json, false);
}

export function TanksAchievementsDataValueItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): TanksAchievementsDataValueItem {
    if (json == null) {
        return json;
    }
    return {
        
        'account_id': json['account_id'],
        'tank_id': json['tank_id'],
        'achievements': json['achievements'],
        'series': json['series'],
        'max_series': json['max_series'],
    };
}

export function TanksAchievementsDataValueItemToJSON(json: any): TanksAchievementsDataValueItem {
    return TanksAchievementsDataValueItemToJSONTyped(json, false);
}

export function TanksAchievementsDataValueItemToJSONTyped(value?: TanksAchievementsDataValueItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'account_id': value['account_id'],
        'tank_id': value['tank_id'],
        'achievements': value['achievements'],
        'series': value['series'],
        'max_series': value['max_series'],
    };
}

export const TanksAchievementsDataValueItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

