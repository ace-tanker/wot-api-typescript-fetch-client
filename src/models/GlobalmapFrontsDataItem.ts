/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GlobalmapFrontsDataItemAvailableExtensionsItem } from './GlobalmapFrontsDataItemAvailableExtensionsItem.js';
import {
    GlobalmapFrontsDataItemAvailableExtensionsItemFromJSON,
    GlobalmapFrontsDataItemAvailableExtensionsItemFromJSONTyped,
    GlobalmapFrontsDataItemAvailableExtensionsItemToJSON,
    GlobalmapFrontsDataItemAvailableExtensionsItemToJSONTyped,
} from './GlobalmapFrontsDataItemAvailableExtensionsItem.js';

/**
 * 
 * @export
 * @interface GlobalmapFrontsDataItem
 */
export interface GlobalmapFrontsDataItem {
    /**
     * Front ID
     * @type {string}
     * @memberof GlobalmapFrontsDataItem
     */
    front_id: string;
    /**
     * Front name
     * @type {string}
     * @memberof GlobalmapFrontsDataItem
     */
    front_name: string;
    /**
     * Indicates if a map is active
     * @type {boolean}
     * @memberof GlobalmapFrontsDataItem
     */
    is_active: boolean;
    /**
     * Indicates the map type: regular map or events map
     * @type {boolean}
     * @memberof GlobalmapFrontsDataItem
     */
    is_event: boolean;
    /**
     * Indicates if vehicles blocking is active
     * @type {boolean}
     * @memberof GlobalmapFrontsDataItem
     */
    vehicle_freeze: boolean;
    /**
     * Indicates presence of Fog of War
     * @type {boolean}
     * @memberof GlobalmapFrontsDataItem
     */
    fog_of_war: boolean;
    /**
     * Maximum battle duration in minutes
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    battle_time_limit: number;
    /**
     * Minimum number of vehicles in division
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    min_tanks_per_division: number;
    /**
     * Maximum number of vehicles in division
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    max_tanks_per_division: number;
    /**
     * Division cost
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    division_cost: number;
    /**
     * Average clans rating
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    avg_clans_rating: number;
    /**
     * Average winning bid
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    avg_won_bet: number;
    /**
     * Average minimum bid
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    avg_min_bet: number;
    /**
     * Minimum vehicle Tier
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    min_vehicle_level: number;
    /**
     * Maximum vehicle Tier
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    max_vehicle_level: number;
    /**
     * Available modules
     * @type {Array<GlobalmapFrontsDataItemAvailableExtensionsItem>}
     * @memberof GlobalmapFrontsDataItem
     */
    available_extensions: Array<GlobalmapFrontsDataItemAvailableExtensionsItem>;
    /**
     * Amount of Provinces
     * @type {number}
     * @memberof GlobalmapFrontsDataItem
     */
    provinces_count: number;
}

/**
 * Check if a given object implements the GlobalmapFrontsDataItem interface.
 */
export function instanceOfGlobalmapFrontsDataItem(value: object): value is GlobalmapFrontsDataItem {
    if (!('front_id' in value) || value['front_id'] === undefined) return false;
    if (!('front_name' in value) || value['front_name'] === undefined) return false;
    if (!('is_active' in value) || value['is_active'] === undefined) return false;
    if (!('is_event' in value) || value['is_event'] === undefined) return false;
    if (!('vehicle_freeze' in value) || value['vehicle_freeze'] === undefined) return false;
    if (!('fog_of_war' in value) || value['fog_of_war'] === undefined) return false;
    if (!('battle_time_limit' in value) || value['battle_time_limit'] === undefined) return false;
    if (!('min_tanks_per_division' in value) || value['min_tanks_per_division'] === undefined) return false;
    if (!('max_tanks_per_division' in value) || value['max_tanks_per_division'] === undefined) return false;
    if (!('division_cost' in value) || value['division_cost'] === undefined) return false;
    if (!('avg_clans_rating' in value) || value['avg_clans_rating'] === undefined) return false;
    if (!('avg_won_bet' in value) || value['avg_won_bet'] === undefined) return false;
    if (!('avg_min_bet' in value) || value['avg_min_bet'] === undefined) return false;
    if (!('min_vehicle_level' in value) || value['min_vehicle_level'] === undefined) return false;
    if (!('max_vehicle_level' in value) || value['max_vehicle_level'] === undefined) return false;
    if (!('available_extensions' in value) || value['available_extensions'] === undefined) return false;
    if (!('provinces_count' in value) || value['provinces_count'] === undefined) return false;
    return true;
}

export function GlobalmapFrontsDataItemFromJSON(json: any): GlobalmapFrontsDataItem {
    return GlobalmapFrontsDataItemFromJSONTyped(json, false);
}

export function GlobalmapFrontsDataItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapFrontsDataItem {
    if (json == null) {
        return json;
    }
    return {
        
        'front_id': json['front_id'],
        'front_name': json['front_name'],
        'is_active': json['is_active'],
        'is_event': json['is_event'],
        'vehicle_freeze': json['vehicle_freeze'],
        'fog_of_war': json['fog_of_war'],
        'battle_time_limit': json['battle_time_limit'],
        'min_tanks_per_division': json['min_tanks_per_division'],
        'max_tanks_per_division': json['max_tanks_per_division'],
        'division_cost': json['division_cost'],
        'avg_clans_rating': json['avg_clans_rating'],
        'avg_won_bet': json['avg_won_bet'],
        'avg_min_bet': json['avg_min_bet'],
        'min_vehicle_level': json['min_vehicle_level'],
        'max_vehicle_level': json['max_vehicle_level'],
        'available_extensions': ((json['available_extensions'] as Array<any>).map(GlobalmapFrontsDataItemAvailableExtensionsItemFromJSON)),
        'provinces_count': json['provinces_count'],
    };
}

export function GlobalmapFrontsDataItemToJSON(json: any): GlobalmapFrontsDataItem {
    return GlobalmapFrontsDataItemToJSONTyped(json, false);
}

export function GlobalmapFrontsDataItemToJSONTyped(value?: GlobalmapFrontsDataItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'front_id': value['front_id'],
        'front_name': value['front_name'],
        'is_active': value['is_active'],
        'is_event': value['is_event'],
        'vehicle_freeze': value['vehicle_freeze'],
        'fog_of_war': value['fog_of_war'],
        'battle_time_limit': value['battle_time_limit'],
        'min_tanks_per_division': value['min_tanks_per_division'],
        'max_tanks_per_division': value['max_tanks_per_division'],
        'division_cost': value['division_cost'],
        'avg_clans_rating': value['avg_clans_rating'],
        'avg_won_bet': value['avg_won_bet'],
        'avg_min_bet': value['avg_min_bet'],
        'min_vehicle_level': value['min_vehicle_level'],
        'max_vehicle_level': value['max_vehicle_level'],
        'available_extensions': ((value['available_extensions'] as Array<any>).map(GlobalmapFrontsDataItemAvailableExtensionsItemToJSON)),
        'provinces_count': value['provinces_count'],
    };
}

export const GlobalmapFrontsDataItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

