/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Contact groups.
 * @export
 * @interface AccountInfoValuePrivateGroupedContacts
 */
export interface AccountInfoValuePrivateGroupedContacts {
    /**
     * Not grouped
     * @type {Array<number>}
     * @memberof AccountInfoValuePrivateGroupedContacts
     */
    ungrouped: Array<number>;
    /**
     * Ignored
     * @type {Array<number>}
     * @memberof AccountInfoValuePrivateGroupedContacts
     */
    ignored: Array<number>;
    /**
     * The contact was added to the blacklist. Note that the blocked contact still belongs to contact groups or to the ungrouped list of contacts.
     * @type {Array<number>}
     * @memberof AccountInfoValuePrivateGroupedContacts
     */
    blocked: Array<number>;
    /**
     * Muted
     * @type {Array<number>}
     * @memberof AccountInfoValuePrivateGroupedContacts
     */
    muted: Array<number>;
    /**
     * Groups
     * @type {{ [key: string]: Array<number>; }}
     * @memberof AccountInfoValuePrivateGroupedContacts
     */
    groups: { [key: string]: Array<number>; };
}

/**
 * Check if a given object implements the AccountInfoValuePrivateGroupedContacts interface.
 */
export function instanceOfAccountInfoValuePrivateGroupedContacts(value: object): value is AccountInfoValuePrivateGroupedContacts {
    if (!('ungrouped' in value) || value['ungrouped'] === undefined) return false;
    if (!('ignored' in value) || value['ignored'] === undefined) return false;
    if (!('blocked' in value) || value['blocked'] === undefined) return false;
    if (!('muted' in value) || value['muted'] === undefined) return false;
    if (!('groups' in value) || value['groups'] === undefined) return false;
    return true;
}

export function AccountInfoValuePrivateGroupedContactsFromJSON(json: any): AccountInfoValuePrivateGroupedContacts {
    return AccountInfoValuePrivateGroupedContactsFromJSONTyped(json, false);
}

export function AccountInfoValuePrivateGroupedContactsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfoValuePrivateGroupedContacts {
    if (json == null) {
        return json;
    }
    return {
        
        'ungrouped': json['ungrouped'],
        'ignored': json['ignored'],
        'blocked': json['blocked'],
        'muted': json['muted'],
        'groups': json['groups'],
    };
}

export function AccountInfoValuePrivateGroupedContactsToJSON(json: any): AccountInfoValuePrivateGroupedContacts {
    return AccountInfoValuePrivateGroupedContactsToJSONTyped(json, false);
}

export function AccountInfoValuePrivateGroupedContactsToJSONTyped(value?: AccountInfoValuePrivateGroupedContacts | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ungrouped': value['ungrouped'],
        'ignored': value['ignored'],
        'blocked': value['blocked'],
        'muted': value['muted'],
        'groups': value['groups'],
    };
}

