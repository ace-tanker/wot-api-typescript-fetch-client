/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Radio characteristics
 * @export
 * @interface EncyclopediaVehiclesDataValueDefaultProfileRadio
 */
export interface EncyclopediaVehiclesDataValueDefaultProfileRadio {
    /**
     * Tier
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValueDefaultProfileRadio
     */
    tier: number;
    /**
     * Module name
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValueDefaultProfileRadio
     */
    name: string;
    /**
     * Weight (kg)
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValueDefaultProfileRadio
     */
    weight: number;
    /**
     * Module tag
     * @type {string}
     * @memberof EncyclopediaVehiclesDataValueDefaultProfileRadio
     */
    tag: string;
    /**
     * Signal range
     * @type {number}
     * @memberof EncyclopediaVehiclesDataValueDefaultProfileRadio
     */
    signal_range: number;
}

/**
 * Check if a given object implements the EncyclopediaVehiclesDataValueDefaultProfileRadio interface.
 */
export function instanceOfEncyclopediaVehiclesDataValueDefaultProfileRadio(value: object): value is EncyclopediaVehiclesDataValueDefaultProfileRadio {
    if (!('tier' in value) || value['tier'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('weight' in value) || value['weight'] === undefined) return false;
    if (!('tag' in value) || value['tag'] === undefined) return false;
    if (!('signal_range' in value) || value['signal_range'] === undefined) return false;
    return true;
}

export function EncyclopediaVehiclesDataValueDefaultProfileRadioFromJSON(json: any): EncyclopediaVehiclesDataValueDefaultProfileRadio {
    return EncyclopediaVehiclesDataValueDefaultProfileRadioFromJSONTyped(json, false);
}

export function EncyclopediaVehiclesDataValueDefaultProfileRadioFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaVehiclesDataValueDefaultProfileRadio {
    if (json == null) {
        return json;
    }
    return {
        
        'tier': json['tier'],
        'name': json['name'],
        'weight': json['weight'],
        'tag': json['tag'],
        'signal_range': json['signal_range'],
    };
}

export function EncyclopediaVehiclesDataValueDefaultProfileRadioToJSON(json: any): EncyclopediaVehiclesDataValueDefaultProfileRadio {
    return EncyclopediaVehiclesDataValueDefaultProfileRadioToJSONTyped(json, false);
}

export function EncyclopediaVehiclesDataValueDefaultProfileRadioToJSONTyped(value?: EncyclopediaVehiclesDataValueDefaultProfileRadio | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tier': value['tier'],
        'name': value['name'],
        'weight': value['weight'],
        'tag': value['tag'],
        'signal_range': value['signal_range'],
    };
}

export const EncyclopediaVehiclesDataValueDefaultProfileRadioPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

