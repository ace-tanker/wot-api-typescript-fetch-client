/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaAchievementsValueOptionsItem } from './EncyclopediaAchievementsValueOptionsItem.js';
import {
    EncyclopediaAchievementsValueOptionsItemFromJSON,
    EncyclopediaAchievementsValueOptionsItemFromJSONTyped,
    EncyclopediaAchievementsValueOptionsItemToJSON,
    EncyclopediaAchievementsValueOptionsItemToJSONTyped,
} from './EncyclopediaAchievementsValueOptionsItem.js';

/**
 * 
 * @export
 * @interface EncyclopediaAchievementsValue
 */
export interface EncyclopediaAchievementsValue {
    /**
     * Achievement name
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    nameI18n: string | null;
    /**
     * Type
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    type: string;
    /**
     * Section
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    section: string;
    /**
     * Section order. Sections with a lesser value of the Section order field are displayed above sections with a greater value.
     * @type {number}
     * @memberof EncyclopediaAchievementsValue
     */
    sectionOrder: number;
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    image: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    imageBig: string | null;
    /**
     * Achievement description
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    condition: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncyclopediaAchievementsValue
     */
    heroInfo: string | null;
    /**
     * Achievement order in this section. Achievements with a lesser value of the Order field are displayed above achievements with a greater value.
     * @type {number}
     * @memberof EncyclopediaAchievementsValue
     */
    order: number;
    /**
     * Service Record
     * @type {Array<EncyclopediaAchievementsValueOptionsItem>}
     * @memberof EncyclopediaAchievementsValue
     */
    options: Array<EncyclopediaAchievementsValueOptionsItem> | null;
    /**
     * Indicates, if achievement is outdated and cannot be received anymore
     * @type {boolean}
     * @memberof EncyclopediaAchievementsValue
     */
    outdated: boolean;
}

/**
 * Check if a given object implements the EncyclopediaAchievementsValue interface.
 */
export function instanceOfEncyclopediaAchievementsValue(value: object): value is EncyclopediaAchievementsValue {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nameI18n' in value) || value['nameI18n'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('section' in value) || value['section'] === undefined) return false;
    if (!('sectionOrder' in value) || value['sectionOrder'] === undefined) return false;
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('imageBig' in value) || value['imageBig'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('condition' in value) || value['condition'] === undefined) return false;
    if (!('heroInfo' in value) || value['heroInfo'] === undefined) return false;
    if (!('order' in value) || value['order'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    if (!('outdated' in value) || value['outdated'] === undefined) return false;
    return true;
}

export function EncyclopediaAchievementsValueFromJSON(json: any): EncyclopediaAchievementsValue {
    return EncyclopediaAchievementsValueFromJSONTyped(json, false);
}

export function EncyclopediaAchievementsValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaAchievementsValue {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'nameI18n': json['name_i18n'],
        'type': json['type'],
        'section': json['section'],
        'sectionOrder': json['section_order'],
        'image': json['image'],
        'imageBig': json['image_big'],
        'description': json['description'],
        'condition': json['condition'],
        'heroInfo': json['hero_info'],
        'order': json['order'],
        'options': (json['options'] == null ? null : (json['options'] as Array<any>).map(EncyclopediaAchievementsValueOptionsItemFromJSON)),
        'outdated': json['outdated'],
    };
}

export function EncyclopediaAchievementsValueToJSON(json: any): EncyclopediaAchievementsValue {
    return EncyclopediaAchievementsValueToJSONTyped(json, false);
}

export function EncyclopediaAchievementsValueToJSONTyped(value?: EncyclopediaAchievementsValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'name_i18n': value['nameI18n'],
        'type': value['type'],
        'section': value['section'],
        'section_order': value['sectionOrder'],
        'image': value['image'],
        'image_big': value['imageBig'],
        'description': value['description'],
        'condition': value['condition'],
        'hero_info': value['heroInfo'],
        'order': value['order'],
        'options': (value['options'] == null ? null : (value['options'] as Array<any>).map(EncyclopediaAchievementsValueOptionsItemToJSON)),
        'outdated': value['outdated'],
    };
}

