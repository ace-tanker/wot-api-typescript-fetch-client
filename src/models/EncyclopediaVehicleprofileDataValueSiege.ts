/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Vehicle characteristics in Siege mode
 * @export
 * @interface EncyclopediaVehicleprofileDataValueSiege
 */
export interface EncyclopediaVehicleprofileDataValueSiege {
    /**
     * Aiming time (s)
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    aim_time: number;
    /**
     * Standard suspension traverse speed
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    suspension_traverse_speed: number;
    /**
     * Depression angle (deg)
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    move_down_arc: number;
    /**
     * Elevation angle (deg)
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    move_up_arc: number;
    /**
     * Reload time (s)
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    reload_time: number;
    /**
     * Dispersion at 100 m (m)
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    dispersion: number;
    /**
     * Top reverse speed (km/h)
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    speed_backward: number;
    /**
     * Time needed to switch on the Siege mode
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    switch_off_time: number;
    /**
     * Time required to switch to Siege mode
     * @type {number}
     * @memberof EncyclopediaVehicleprofileDataValueSiege
     */
    switch_on_time: number;
}

/**
 * Check if a given object implements the EncyclopediaVehicleprofileDataValueSiege interface.
 */
export function instanceOfEncyclopediaVehicleprofileDataValueSiege(value: object): value is EncyclopediaVehicleprofileDataValueSiege {
    if (!('aim_time' in value) || value['aim_time'] === undefined) return false;
    if (!('suspension_traverse_speed' in value) || value['suspension_traverse_speed'] === undefined) return false;
    if (!('move_down_arc' in value) || value['move_down_arc'] === undefined) return false;
    if (!('move_up_arc' in value) || value['move_up_arc'] === undefined) return false;
    if (!('reload_time' in value) || value['reload_time'] === undefined) return false;
    if (!('dispersion' in value) || value['dispersion'] === undefined) return false;
    if (!('speed_backward' in value) || value['speed_backward'] === undefined) return false;
    if (!('switch_off_time' in value) || value['switch_off_time'] === undefined) return false;
    if (!('switch_on_time' in value) || value['switch_on_time'] === undefined) return false;
    return true;
}

export function EncyclopediaVehicleprofileDataValueSiegeFromJSON(json: any): EncyclopediaVehicleprofileDataValueSiege {
    return EncyclopediaVehicleprofileDataValueSiegeFromJSONTyped(json, false);
}

export function EncyclopediaVehicleprofileDataValueSiegeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaVehicleprofileDataValueSiege {
    if (json == null) {
        return json;
    }
    return {
        
        'aim_time': json['aim_time'],
        'suspension_traverse_speed': json['suspension_traverse_speed'],
        'move_down_arc': json['move_down_arc'],
        'move_up_arc': json['move_up_arc'],
        'reload_time': json['reload_time'],
        'dispersion': json['dispersion'],
        'speed_backward': json['speed_backward'],
        'switch_off_time': json['switch_off_time'],
        'switch_on_time': json['switch_on_time'],
    };
}

export function EncyclopediaVehicleprofileDataValueSiegeToJSON(json: any): EncyclopediaVehicleprofileDataValueSiege {
    return EncyclopediaVehicleprofileDataValueSiegeToJSONTyped(json, false);
}

export function EncyclopediaVehicleprofileDataValueSiegeToJSONTyped(value?: EncyclopediaVehicleprofileDataValueSiege | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aim_time': value['aim_time'],
        'suspension_traverse_speed': value['suspension_traverse_speed'],
        'move_down_arc': value['move_down_arc'],
        'move_up_arc': value['move_up_arc'],
        'reload_time': value['reload_time'],
        'dispersion': value['dispersion'],
        'speed_backward': value['speed_backward'],
        'switch_off_time': value['switch_off_time'],
        'switch_on_time': value['switch_on_time'],
    };
}

export const EncyclopediaVehicleprofileDataValueSiegePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

