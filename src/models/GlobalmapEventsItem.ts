/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GlobalmapEventsItemFrontsItem } from './GlobalmapEventsItemFrontsItem.js';
import {
    GlobalmapEventsItemFrontsItemFromJSON,
    GlobalmapEventsItemFrontsItemFromJSONTyped,
    GlobalmapEventsItemFrontsItemToJSON,
    GlobalmapEventsItemFrontsItemToJSONTyped,
} from './GlobalmapEventsItemFrontsItem.js';

/**
 * 
 * @export
 * @interface GlobalmapEventsItem
 */
export interface GlobalmapEventsItem {
    /**
     * Event ID
     * @type {string}
     * @memberof GlobalmapEventsItem
     */
    eventId: string;
    /**
     * Event name
     * @type {string}
     * @memberof GlobalmapEventsItem
     */
    eventName: string;
    /**
     * Start time
     * @type {string}
     * @memberof GlobalmapEventsItem
     */
    start: string;
    /**
     * Finishing time
     * @type {string}
     * @memberof GlobalmapEventsItem
     */
    end: string;
    /**
     * Status
     * @type {string}
     * @memberof GlobalmapEventsItem
     */
    status: string;
    /**
     * Fronts. Only event fronts are presented in response.
     * @type {Array<GlobalmapEventsItemFrontsItem>}
     * @memberof GlobalmapEventsItem
     */
    fronts: Array<GlobalmapEventsItemFrontsItem>;
}

/**
 * Check if a given object implements the GlobalmapEventsItem interface.
 */
export function instanceOfGlobalmapEventsItem(value: object): value is GlobalmapEventsItem {
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('eventName' in value) || value['eventName'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('fronts' in value) || value['fronts'] === undefined) return false;
    return true;
}

export function GlobalmapEventsItemFromJSON(json: any): GlobalmapEventsItem {
    return GlobalmapEventsItemFromJSONTyped(json, false);
}

export function GlobalmapEventsItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventsItem {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['event_id'],
        'eventName': json['event_name'],
        'start': json['start'],
        'end': json['end'],
        'status': json['status'],
        'fronts': ((json['fronts'] as Array<any>).map(GlobalmapEventsItemFrontsItemFromJSON)),
    };
}

export function GlobalmapEventsItemToJSON(json: any): GlobalmapEventsItem {
    return GlobalmapEventsItemToJSONTyped(json, false);
}

export function GlobalmapEventsItemToJSONTyped(value?: GlobalmapEventsItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'event_id': value['eventId'],
        'event_name': value['eventName'],
        'start': value['start'],
        'end': value['end'],
        'status': value['status'],
        'fronts': ((value['fronts'] as Array<any>).map(GlobalmapEventsItemFrontsItemToJSON)),
    };
}

