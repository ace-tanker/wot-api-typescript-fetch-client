/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GlobalmapEventclaninfoDataValueEventsValueItem
 */
export interface GlobalmapEventclaninfoDataValueEventsValueItem {
    /**
     * Front ID
     * @type {string}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    front_id: string;
    /**
     * Event ID
     * @type {string}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    event_id: string;
    /**
     * Total Fame Points
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    fame_points: number;
    /**
     * Change of Fame Points since last turn calculation
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    fame_points_since_turn: number;
    /**
     * Link to Front
     * @type {string}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    url: string | null;
    /**
     * Current rating
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    rank: number;
    /**
     * Rating changes during previous turn
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    rank_delta: number;
    /**
     * Battles fought
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    battles: number;
    /**
     * Victories
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    wins: number;
    /**
     * Battle Fame Points
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    battle_fame_points: number;
    /**
     * Fame Points for completing a clan task
     * @type {number}
     * @memberof GlobalmapEventclaninfoDataValueEventsValueItem
     */
    task_fame_points: number;
}

/**
 * Check if a given object implements the GlobalmapEventclaninfoDataValueEventsValueItem interface.
 */
export function instanceOfGlobalmapEventclaninfoDataValueEventsValueItem(value: object): value is GlobalmapEventclaninfoDataValueEventsValueItem {
    if (!('front_id' in value) || value['front_id'] === undefined) return false;
    if (!('event_id' in value) || value['event_id'] === undefined) return false;
    if (!('fame_points' in value) || value['fame_points'] === undefined) return false;
    if (!('fame_points_since_turn' in value) || value['fame_points_since_turn'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('rank_delta' in value) || value['rank_delta'] === undefined) return false;
    if (!('battles' in value) || value['battles'] === undefined) return false;
    if (!('wins' in value) || value['wins'] === undefined) return false;
    if (!('battle_fame_points' in value) || value['battle_fame_points'] === undefined) return false;
    if (!('task_fame_points' in value) || value['task_fame_points'] === undefined) return false;
    return true;
}

export function GlobalmapEventclaninfoDataValueEventsValueItemFromJSON(json: any): GlobalmapEventclaninfoDataValueEventsValueItem {
    return GlobalmapEventclaninfoDataValueEventsValueItemFromJSONTyped(json, false);
}

export function GlobalmapEventclaninfoDataValueEventsValueItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventclaninfoDataValueEventsValueItem {
    if (json == null) {
        return json;
    }
    return {
        
        'front_id': json['front_id'],
        'event_id': json['event_id'],
        'fame_points': json['fame_points'],
        'fame_points_since_turn': json['fame_points_since_turn'],
        'url': json['url'],
        'rank': json['rank'],
        'rank_delta': json['rank_delta'],
        'battles': json['battles'],
        'wins': json['wins'],
        'battle_fame_points': json['battle_fame_points'],
        'task_fame_points': json['task_fame_points'],
    };
}

export function GlobalmapEventclaninfoDataValueEventsValueItemToJSON(json: any): GlobalmapEventclaninfoDataValueEventsValueItem {
    return GlobalmapEventclaninfoDataValueEventsValueItemToJSONTyped(json, false);
}

export function GlobalmapEventclaninfoDataValueEventsValueItemToJSONTyped(value?: GlobalmapEventclaninfoDataValueEventsValueItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'front_id': value['front_id'],
        'event_id': value['event_id'],
        'fame_points': value['fame_points'],
        'fame_points_since_turn': value['fame_points_since_turn'],
        'url': value['url'],
        'rank': value['rank'],
        'rank_delta': value['rank_delta'],
        'battles': value['battles'],
        'wins': value['wins'],
        'battle_fame_points': value['battle_fame_points'],
        'task_fame_points': value['task_fame_points'],
    };
}

export const GlobalmapEventclaninfoDataValueEventsValueItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

