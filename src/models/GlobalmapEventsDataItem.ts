/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GlobalmapEventsDataItemFrontsItem } from './GlobalmapEventsDataItemFrontsItem.js';
import {
    GlobalmapEventsDataItemFrontsItemFromJSON,
    GlobalmapEventsDataItemFrontsItemFromJSONTyped,
    GlobalmapEventsDataItemFrontsItemToJSON,
    GlobalmapEventsDataItemFrontsItemToJSONTyped,
} from './GlobalmapEventsDataItemFrontsItem.js';

/**
 * 
 * @export
 * @interface GlobalmapEventsDataItem
 */
export interface GlobalmapEventsDataItem {
    /**
     * Event ID
     * @type {string}
     * @memberof GlobalmapEventsDataItem
     */
    event_id: string;
    /**
     * Event name
     * @type {string}
     * @memberof GlobalmapEventsDataItem
     */
    event_name: string;
    /**
     * Start time
     * @type {string}
     * @memberof GlobalmapEventsDataItem
     */
    start: string;
    /**
     * Finishing time
     * @type {string}
     * @memberof GlobalmapEventsDataItem
     */
    end: string;
    /**
     * Status
     * @type {string}
     * @memberof GlobalmapEventsDataItem
     */
    status: string;
    /**
     * Fronts. Only event fronts are presented in response.
     * @type {Array<GlobalmapEventsDataItemFrontsItem>}
     * @memberof GlobalmapEventsDataItem
     */
    fronts: Array<GlobalmapEventsDataItemFrontsItem>;
}

/**
 * Check if a given object implements the GlobalmapEventsDataItem interface.
 */
export function instanceOfGlobalmapEventsDataItem(value: object): value is GlobalmapEventsDataItem {
    if (!('event_id' in value) || value['event_id'] === undefined) return false;
    if (!('event_name' in value) || value['event_name'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('fronts' in value) || value['fronts'] === undefined) return false;
    return true;
}

export function GlobalmapEventsDataItemFromJSON(json: any): GlobalmapEventsDataItem {
    return GlobalmapEventsDataItemFromJSONTyped(json, false);
}

export function GlobalmapEventsDataItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventsDataItem {
    if (json == null) {
        return json;
    }
    return {
        
        'event_id': json['event_id'],
        'event_name': json['event_name'],
        'start': json['start'],
        'end': json['end'],
        'status': json['status'],
        'fronts': ((json['fronts'] as Array<any>).map(GlobalmapEventsDataItemFrontsItemFromJSON)),
    };
}

export function GlobalmapEventsDataItemToJSON(json: any): GlobalmapEventsDataItem {
    return GlobalmapEventsDataItemToJSONTyped(json, false);
}

export function GlobalmapEventsDataItemToJSONTyped(value?: GlobalmapEventsDataItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'event_id': value['event_id'],
        'event_name': value['event_name'],
        'start': value['start'],
        'end': value['end'],
        'status': value['status'],
        'fronts': ((value['fronts'] as Array<any>).map(GlobalmapEventsDataItemFrontsItemToJSON)),
    };
}

export const GlobalmapEventsDataItemPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

