/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GlobalmapEventratingItem
 */
export interface GlobalmapEventratingItem {
    /**
     * Clan ID
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    clanId: number;
    /**
     * Clan name
     * @type {string}
     * @memberof GlobalmapEventratingItem
     */
    name: string;
    /**
     * Clan tag
     * @type {string}
     * @memberof GlobalmapEventratingItem
     */
    tag: string;
    /**
     * Clan color
     * @type {string}
     * @memberof GlobalmapEventratingItem
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalmapEventratingItem
     */
    awardLevel: string | null;
    /**
     * Current rating
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    rank: number;
    /**
     * Rating changes during previous turn
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    rankDelta: number;
    /**
     * 
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    updatedAt: number | null;
    /**
     * 
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    battleFamePoints: number | null;
    /**
     * Total Fame Points
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    totalFamePoints: number;
    /**
     * 
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    taskFamePoints: number | null;
    /**
     * 
     * @type {number}
     * @memberof GlobalmapEventratingItem
     */
    famePointsToImproveAward: number | null;
}

/**
 * Check if a given object implements the GlobalmapEventratingItem interface.
 */
export function instanceOfGlobalmapEventratingItem(value: object): value is GlobalmapEventratingItem {
    if (!('clanId' in value) || value['clanId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('tag' in value) || value['tag'] === undefined) return false;
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('awardLevel' in value) || value['awardLevel'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('rankDelta' in value) || value['rankDelta'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('battleFamePoints' in value) || value['battleFamePoints'] === undefined) return false;
    if (!('totalFamePoints' in value) || value['totalFamePoints'] === undefined) return false;
    if (!('taskFamePoints' in value) || value['taskFamePoints'] === undefined) return false;
    if (!('famePointsToImproveAward' in value) || value['famePointsToImproveAward'] === undefined) return false;
    return true;
}

export function GlobalmapEventratingItemFromJSON(json: any): GlobalmapEventratingItem {
    return GlobalmapEventratingItemFromJSONTyped(json, false);
}

export function GlobalmapEventratingItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventratingItem {
    if (json == null) {
        return json;
    }
    return {
        
        'clanId': json['clan_id'],
        'name': json['name'],
        'tag': json['tag'],
        'color': json['color'],
        'awardLevel': json['award_level'],
        'rank': json['rank'],
        'rankDelta': json['rank_delta'],
        'updatedAt': json['updated_at'],
        'battleFamePoints': json['battle_fame_points'],
        'totalFamePoints': json['total_fame_points'],
        'taskFamePoints': json['task_fame_points'],
        'famePointsToImproveAward': json['fame_points_to_improve_award'],
    };
}

export function GlobalmapEventratingItemToJSON(json: any): GlobalmapEventratingItem {
    return GlobalmapEventratingItemToJSONTyped(json, false);
}

export function GlobalmapEventratingItemToJSONTyped(value?: GlobalmapEventratingItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clan_id': value['clanId'],
        'name': value['name'],
        'tag': value['tag'],
        'color': value['color'],
        'award_level': value['awardLevel'],
        'rank': value['rank'],
        'rank_delta': value['rankDelta'],
        'updated_at': value['updatedAt'],
        'battle_fame_points': value['battleFamePoints'],
        'total_fame_points': value['totalFamePoints'],
        'task_fame_points': value['taskFamePoints'],
        'fame_points_to_improve_award': value['famePointsToImproveAward'],
    };
}

