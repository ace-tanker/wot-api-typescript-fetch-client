/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GlobalmapEventclaninfoValueEventsValueItem
 */
export interface GlobalmapEventclaninfoValueEventsValueItem {
    /**
     * Front ID
     * @type {string}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    frontId: string;
    /**
     * Event ID
     * @type {string}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    eventId: string;
    /**
     * Total Fame Points
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    famePoints: number;
    /**
     * Change of Fame Points since last turn calculation
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    famePointsSinceTurn: number;
    /**
     * 
     * @type {string}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    url: string | null;
    /**
     * Current rating
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    rank: number;
    /**
     * Rating changes during previous turn
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    rankDelta: number;
    /**
     * Battles fought
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    battles: number;
    /**
     * Victories
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    wins: number;
    /**
     * Battle Fame Points
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    battleFamePoints: number;
    /**
     * Fame Points for completing a clan task
     * @type {number}
     * @memberof GlobalmapEventclaninfoValueEventsValueItem
     */
    taskFamePoints: number;
}

/**
 * Check if a given object implements the GlobalmapEventclaninfoValueEventsValueItem interface.
 */
export function instanceOfGlobalmapEventclaninfoValueEventsValueItem(value: object): value is GlobalmapEventclaninfoValueEventsValueItem {
    if (!('frontId' in value) || value['frontId'] === undefined) return false;
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('famePoints' in value) || value['famePoints'] === undefined) return false;
    if (!('famePointsSinceTurn' in value) || value['famePointsSinceTurn'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('rankDelta' in value) || value['rankDelta'] === undefined) return false;
    if (!('battles' in value) || value['battles'] === undefined) return false;
    if (!('wins' in value) || value['wins'] === undefined) return false;
    if (!('battleFamePoints' in value) || value['battleFamePoints'] === undefined) return false;
    if (!('taskFamePoints' in value) || value['taskFamePoints'] === undefined) return false;
    return true;
}

export function GlobalmapEventclaninfoValueEventsValueItemFromJSON(json: any): GlobalmapEventclaninfoValueEventsValueItem {
    return GlobalmapEventclaninfoValueEventsValueItemFromJSONTyped(json, false);
}

export function GlobalmapEventclaninfoValueEventsValueItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalmapEventclaninfoValueEventsValueItem {
    if (json == null) {
        return json;
    }
    return {
        
        'frontId': json['front_id'],
        'eventId': json['event_id'],
        'famePoints': json['fame_points'],
        'famePointsSinceTurn': json['fame_points_since_turn'],
        'url': json['url'],
        'rank': json['rank'],
        'rankDelta': json['rank_delta'],
        'battles': json['battles'],
        'wins': json['wins'],
        'battleFamePoints': json['battle_fame_points'],
        'taskFamePoints': json['task_fame_points'],
    };
}

export function GlobalmapEventclaninfoValueEventsValueItemToJSON(json: any): GlobalmapEventclaninfoValueEventsValueItem {
    return GlobalmapEventclaninfoValueEventsValueItemToJSONTyped(json, false);
}

export function GlobalmapEventclaninfoValueEventsValueItemToJSONTyped(value?: GlobalmapEventclaninfoValueEventsValueItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'front_id': value['frontId'],
        'event_id': value['eventId'],
        'fame_points': value['famePoints'],
        'fame_points_since_turn': value['famePointsSinceTurn'],
        'url': value['url'],
        'rank': value['rank'],
        'rank_delta': value['rankDelta'],
        'battles': value['battles'],
        'wins': value['wins'],
        'battle_fame_points': value['battleFamePoints'],
        'task_fame_points': value['taskFamePoints'],
    };
}

