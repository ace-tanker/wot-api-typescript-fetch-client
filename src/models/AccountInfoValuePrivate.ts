/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AccountInfoValuePrivateRestrictions } from './AccountInfoValuePrivateRestrictions.js';
import {
    AccountInfoValuePrivateRestrictionsFromJSON,
    AccountInfoValuePrivateRestrictionsFromJSONTyped,
    AccountInfoValuePrivateRestrictionsToJSON,
    AccountInfoValuePrivateRestrictionsToJSONTyped,
} from './AccountInfoValuePrivateRestrictions.js';
import type { AccountInfoValuePrivateGroupedContacts } from './AccountInfoValuePrivateGroupedContacts.js';
import {
    AccountInfoValuePrivateGroupedContactsFromJSON,
    AccountInfoValuePrivateGroupedContactsFromJSONTyped,
    AccountInfoValuePrivateGroupedContactsToJSON,
    AccountInfoValuePrivateGroupedContactsToJSONTyped,
} from './AccountInfoValuePrivateGroupedContacts.js';
import type { AccountInfoValuePrivateBoostersValue } from './AccountInfoValuePrivateBoostersValue.js';
import {
    AccountInfoValuePrivateBoostersValueFromJSON,
    AccountInfoValuePrivateBoostersValueFromJSONTyped,
    AccountInfoValuePrivateBoostersValueToJSON,
    AccountInfoValuePrivateBoostersValueToJSONTyped,
} from './AccountInfoValuePrivateBoostersValue.js';
import type { AccountInfoValuePrivateRentedValue } from './AccountInfoValuePrivateRentedValue.js';
import {
    AccountInfoValuePrivateRentedValueFromJSON,
    AccountInfoValuePrivateRentedValueFromJSONTyped,
    AccountInfoValuePrivateRentedValueToJSON,
    AccountInfoValuePrivateRentedValueToJSONTyped,
} from './AccountInfoValuePrivateRentedValue.js';

/**
 * Player's private data
 * @export
 * @interface AccountInfoValuePrivate
 */
export interface AccountInfoValuePrivate {
    /**
     * Personal Missions Progress. The key is a task id, the value is a status.
     * 
     * Possible statuses:
     * 
     *  * NONE - a mission is unavailable
     *  * UNLOCKED - a mission is available
     *  * NEED_GET_MAIN_REWARD - the main reward has not been received
     *  * MAIN_REWARD_GOTTEN - the main reward has been received
     *  * NEED_GET_ADD_REWARD - additional reward has not been received
     *  * NEED_GET_ALL_REWARDS - no rewards have been received
     *  * ALL_REWARDS_GOTTEN - all rewards have been received
     * .
     * @type {{ [key: string]: string; }}
     * @memberof AccountInfoValuePrivate
     */
    personalMissions?: { [key: string]: string; };
    /**
     * Gold
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    gold: number;
    /**
     * Overall battle life time in seconds
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    battleLifeTime: number;
    /**
     * Free Experience
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    freeXp: number;
    /**
     * Credits
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    credits: number;
    /**
     * Premium Account expiration time
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    premiumExpiresAt: number;
    /**
     * Indicates if the account is Premium Account
     * @type {boolean}
     * @memberof AccountInfoValuePrivate
     */
    isPremium: boolean;
    /**
     * 
     * @type {{ [key: string]: AccountInfoValuePrivateRentedValue; }}
     * @memberof AccountInfoValuePrivate
     */
    rented?: { [key: string]: AccountInfoValuePrivateRentedValue; };
    /**
     * 
     * @type {AccountInfoValuePrivateGroupedContacts}
     * @memberof AccountInfoValuePrivate
     */
    groupedContacts?: AccountInfoValuePrivateGroupedContacts;
    /**
     * 
     * @type {AccountInfoValuePrivateRestrictions}
     * @memberof AccountInfoValuePrivate
     */
    restrictions: AccountInfoValuePrivateRestrictions;
    /**
     * Indicates if mobile phone number was added to the account
     * @type {boolean}
     * @memberof AccountInfoValuePrivate
     */
    isBoundToPhone: boolean;
    /**
     * 
     * @type {{ [key: string]: AccountInfoValuePrivateBoostersValue; }}
     * @memberof AccountInfoValuePrivate
     */
    boosters?: { [key: string]: AccountInfoValuePrivateBoostersValue; };
    /**
     * Vehicles in the Garage.
     * @type {Array<number>}
     * @memberof AccountInfoValuePrivate
     */
    garage?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof AccountInfoValuePrivate
     */
    banInfo: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    banTime: number | null;
    /**
     * Bonds
     * @type {number}
     * @memberof AccountInfoValuePrivate
     */
    bonds: number;
}

/**
 * Check if a given object implements the AccountInfoValuePrivate interface.
 */
export function instanceOfAccountInfoValuePrivate(value: object): value is AccountInfoValuePrivate {
    if (!('gold' in value) || value['gold'] === undefined) return false;
    if (!('battleLifeTime' in value) || value['battleLifeTime'] === undefined) return false;
    if (!('freeXp' in value) || value['freeXp'] === undefined) return false;
    if (!('credits' in value) || value['credits'] === undefined) return false;
    if (!('premiumExpiresAt' in value) || value['premiumExpiresAt'] === undefined) return false;
    if (!('isPremium' in value) || value['isPremium'] === undefined) return false;
    if (!('restrictions' in value) || value['restrictions'] === undefined) return false;
    if (!('isBoundToPhone' in value) || value['isBoundToPhone'] === undefined) return false;
    if (!('banInfo' in value) || value['banInfo'] === undefined) return false;
    if (!('banTime' in value) || value['banTime'] === undefined) return false;
    if (!('bonds' in value) || value['bonds'] === undefined) return false;
    return true;
}

export function AccountInfoValuePrivateFromJSON(json: any): AccountInfoValuePrivate {
    return AccountInfoValuePrivateFromJSONTyped(json, false);
}

export function AccountInfoValuePrivateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfoValuePrivate {
    if (json == null) {
        return json;
    }
    return {
        
        'personalMissions': json['personal_missions'] == null ? undefined : json['personal_missions'],
        'gold': json['gold'],
        'battleLifeTime': json['battle_life_time'],
        'freeXp': json['free_xp'],
        'credits': json['credits'],
        'premiumExpiresAt': json['premium_expires_at'],
        'isPremium': json['is_premium'],
        'rented': json['rented'] == null ? undefined : (mapValues(json['rented'], AccountInfoValuePrivateRentedValueFromJSON)),
        'groupedContacts': json['grouped_contacts'] == null ? undefined : AccountInfoValuePrivateGroupedContactsFromJSON(json['grouped_contacts']),
        'restrictions': AccountInfoValuePrivateRestrictionsFromJSON(json['restrictions']),
        'isBoundToPhone': json['is_bound_to_phone'],
        'boosters': json['boosters'] == null ? undefined : (mapValues(json['boosters'], AccountInfoValuePrivateBoostersValueFromJSON)),
        'garage': json['garage'] == null ? undefined : json['garage'],
        'banInfo': json['ban_info'],
        'banTime': json['ban_time'],
        'bonds': json['bonds'],
    };
}

export function AccountInfoValuePrivateToJSON(json: any): AccountInfoValuePrivate {
    return AccountInfoValuePrivateToJSONTyped(json, false);
}

export function AccountInfoValuePrivateToJSONTyped(value?: AccountInfoValuePrivate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'personal_missions': value['personalMissions'],
        'gold': value['gold'],
        'battle_life_time': value['battleLifeTime'],
        'free_xp': value['freeXp'],
        'credits': value['credits'],
        'premium_expires_at': value['premiumExpiresAt'],
        'is_premium': value['isPremium'],
        'rented': value['rented'] == null ? undefined : (mapValues(value['rented'], AccountInfoValuePrivateRentedValueToJSON)),
        'grouped_contacts': AccountInfoValuePrivateGroupedContactsToJSON(value['groupedContacts']),
        'restrictions': AccountInfoValuePrivateRestrictionsToJSON(value['restrictions']),
        'is_bound_to_phone': value['isBoundToPhone'],
        'boosters': value['boosters'] == null ? undefined : (mapValues(value['boosters'], AccountInfoValuePrivateBoostersValueToJSON)),
        'garage': value['garage'],
        'ban_info': value['banInfo'],
        'ban_time': value['banTime'],
        'bonds': value['bonds'],
    };
}

