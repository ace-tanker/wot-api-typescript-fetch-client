/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { EncyclopediaAchievementsDataValueOptionsItem } from './EncyclopediaAchievementsDataValueOptionsItem.js';
import {
    EncyclopediaAchievementsDataValueOptionsItemFromJSON,
    EncyclopediaAchievementsDataValueOptionsItemFromJSONTyped,
    EncyclopediaAchievementsDataValueOptionsItemToJSON,
    EncyclopediaAchievementsDataValueOptionsItemToJSONTyped,
} from './EncyclopediaAchievementsDataValueOptionsItem.js';

/**
 * 
 * @export
 * @interface EncyclopediaAchievementsDataValue
 */
export interface EncyclopediaAchievementsDataValue {
    /**
     * Achievement name
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    name: string;
    /**
     * Localized **name** field
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    name_i18n: string | null;
    /**
     * Type
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    type: string;
    /**
     * Section
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    section: string;
    /**
     * Section order. Sections with a lesser value of the Section order field are displayed above sections with a greater value.
     * @type {number}
     * @memberof EncyclopediaAchievementsDataValue
     */
    section_order: number;
    /**
     * URL to image
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    image: string | null;
    /**
     * 180x180px image
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    image_big: string | null;
    /**
     * Achievement description
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    description: string;
    /**
     * Condition
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    condition: string | null;
    /**
     * Historical reference
     * @type {string}
     * @memberof EncyclopediaAchievementsDataValue
     */
    hero_info: string | null;
    /**
     * Achievement order in this section. Achievements with a lesser value of the Order field are displayed above achievements with a greater value.
     * @type {number}
     * @memberof EncyclopediaAchievementsDataValue
     */
    order: number;
    /**
     * Service Record
     * @type {Array<EncyclopediaAchievementsDataValueOptionsItem>}
     * @memberof EncyclopediaAchievementsDataValue
     */
    options: Array<EncyclopediaAchievementsDataValueOptionsItem> | null;
    /**
     * Indicates, if achievement is outdated and cannot be received anymore
     * @type {boolean}
     * @memberof EncyclopediaAchievementsDataValue
     */
    outdated: boolean;
}

/**
 * Check if a given object implements the EncyclopediaAchievementsDataValue interface.
 */
export function instanceOfEncyclopediaAchievementsDataValue(value: object): value is EncyclopediaAchievementsDataValue {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('name_i18n' in value) || value['name_i18n'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('section' in value) || value['section'] === undefined) return false;
    if (!('section_order' in value) || value['section_order'] === undefined) return false;
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('image_big' in value) || value['image_big'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('condition' in value) || value['condition'] === undefined) return false;
    if (!('hero_info' in value) || value['hero_info'] === undefined) return false;
    if (!('order' in value) || value['order'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    if (!('outdated' in value) || value['outdated'] === undefined) return false;
    return true;
}

export function EncyclopediaAchievementsDataValueFromJSON(json: any): EncyclopediaAchievementsDataValue {
    return EncyclopediaAchievementsDataValueFromJSONTyped(json, false);
}

export function EncyclopediaAchievementsDataValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncyclopediaAchievementsDataValue {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'name_i18n': json['name_i18n'],
        'type': json['type'],
        'section': json['section'],
        'section_order': json['section_order'],
        'image': json['image'],
        'image_big': json['image_big'],
        'description': json['description'],
        'condition': json['condition'],
        'hero_info': json['hero_info'],
        'order': json['order'],
        'options': (json['options'] == null ? null : (json['options'] as Array<any>).map(EncyclopediaAchievementsDataValueOptionsItemFromJSON)),
        'outdated': json['outdated'],
    };
}

export function EncyclopediaAchievementsDataValueToJSON(json: any): EncyclopediaAchievementsDataValue {
    return EncyclopediaAchievementsDataValueToJSONTyped(json, false);
}

export function EncyclopediaAchievementsDataValueToJSONTyped(value?: EncyclopediaAchievementsDataValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'name_i18n': value['name_i18n'],
        'type': value['type'],
        'section': value['section'],
        'section_order': value['section_order'],
        'image': value['image'],
        'image_big': value['image_big'],
        'description': value['description'],
        'condition': value['condition'],
        'hero_info': value['hero_info'],
        'order': value['order'],
        'options': (value['options'] == null ? null : (value['options'] as Array<any>).map(EncyclopediaAchievementsDataValueOptionsItemToJSON)),
        'outdated': value['outdated'],
    };
}

export const EncyclopediaAchievementsDataValuePropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
}

