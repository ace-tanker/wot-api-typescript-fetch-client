/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetClansAccountinfo200Response,
  GetClansGlossary200Response,
  GetClansInfo200Response,
  GetClansList200Response,
  GetClansMemberhistory200Response,
  GetClansMessageboard200Response,
} from '../models/index.js';
import {
    GetClansAccountinfo200ResponseFromJSON,
    GetClansAccountinfo200ResponseToJSON,
    GetClansGlossary200ResponseFromJSON,
    GetClansGlossary200ResponseToJSON,
    GetClansInfo200ResponseFromJSON,
    GetClansInfo200ResponseToJSON,
    GetClansList200ResponseFromJSON,
    GetClansList200ResponseToJSON,
    GetClansMemberhistory200ResponseFromJSON,
    GetClansMemberhistory200ResponseToJSON,
    GetClansMessageboard200ResponseFromJSON,
    GetClansMessageboard200ResponseToJSON,
} from '../models/index.js';

export interface GetClansAccountinfoRequest {
    accountId: Array<number>;
    fields?: Array<string>;
    language?: GetClansAccountinfoLanguageEnum;
}

export interface GetClansGlossaryRequest {
    fields?: Array<string>;
    language?: GetClansGlossaryLanguageEnum;
}

export interface GetClansInfoRequest {
    clanId: Array<number>;
    accessToken?: string;
    extra?: any;
    fields?: Array<string>;
    language?: GetClansInfoLanguageEnum;
    membersKey?: GetClansInfoMembersKeyEnum;
}

export interface GetClansListRequest {
    fields?: Array<string>;
    language?: GetClansListLanguageEnum;
    limit?: number;
    pageNo?: number;
    search?: string;
}

export interface GetClansMemberhistoryRequest {
    accountId: number;
    fields?: Array<string>;
    language?: GetClansMemberhistoryLanguageEnum;
}

export interface GetClansMessageboardRequest {
    accessToken: string;
    fields?: Array<string>;
}

/**
 * 
 */
export class ClansApi extends runtime.BaseAPI {

    /**
     * Method returns detailed clan member information and brief clan details.
     * Clan member details
     */
    async getClansAccountinfoRaw(requestParameters: GetClansAccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClansAccountinfo200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getClansAccountinfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clans/accountinfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClansAccountinfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns detailed clan member information and brief clan details.
     * Clan member details
     */
    async getClansAccountinfo(requestParameters: GetClansAccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClansAccountinfo200Response> {
        const response = await this.getClansAccountinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information on clan entities.
     * Clan glossary
     */
    async getClansGlossaryRaw(requestParameters: GetClansGlossaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClansGlossary200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clans/glossary/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClansGlossary200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information on clan entities.
     * Clan glossary
     */
    async getClansGlossary(requestParameters: GetClansGlossaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClansGlossary200Response> {
        const response = await this.getClansGlossaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns detailed clan information.
     * Clan details
     */
    async getClansInfoRaw(requestParameters: GetClansInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClansInfo200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getClansInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['extra'] != null) {
            queryParameters['extra'] = requestParameters['extra'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['membersKey'] != null) {
            queryParameters['members_key'] = requestParameters['membersKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clans/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClansInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns detailed clan information.
     * Clan details
     */
    async getClansInfo(requestParameters: GetClansInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClansInfo200Response> {
        const response = await this.getClansInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method searches through clans and sorts them in a specified order.
     * Clans
     */
    async getClansListRaw(requestParameters: GetClansListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClansList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clans/list/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClansList200ResponseFromJSON(jsonValue));
    }

    /**
     * Method searches through clans and sorts them in a specified order.
     * Clans
     */
    async getClansList(requestParameters: GetClansListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClansList200Response> {
        const response = await this.getClansListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about player\'s clan history. Data on 10 last clan memberships are presented in the response.<p/>This method will be removed. Use method <a href=\"/reference/all/wot/clans/memberhistory/\">Player\'s clan history (World of Tanks)</a>
     * Player\'s clan history
     */
    async getClansMemberhistoryRaw(requestParameters: GetClansMemberhistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClansMemberhistory200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getClansMemberhistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clans/memberhistory/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClansMemberhistory200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about player\'s clan history. Data on 10 last clan memberships are presented in the response.<p/>This method will be removed. Use method <a href=\"/reference/all/wot/clans/memberhistory/\">Player\'s clan history (World of Tanks)</a>
     * Player\'s clan history
     */
    async getClansMemberhistory(requestParameters: GetClansMemberhistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClansMemberhistory200Response> {
        const response = await this.getClansMemberhistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns messages of clan message board.<p/>This method will be removed. Use method <a href=\"/reference/all/wot/clans/messageboard/\">Message board (World of Tanks)</a>
     * Message board
     */
    async getClansMessageboardRaw(requestParameters: GetClansMessageboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClansMessageboard200Response>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling getClansMessageboard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clans/messageboard/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClansMessageboard200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns messages of clan message board.<p/>This method will be removed. Use method <a href=\"/reference/all/wot/clans/messageboard/\">Message board (World of Tanks)</a>
     * Message board
     */
    async getClansMessageboard(requestParameters: GetClansMessageboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClansMessageboard200Response> {
        const response = await this.getClansMessageboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetClansAccountinfoLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetClansAccountinfoLanguageEnum = typeof GetClansAccountinfoLanguageEnum[keyof typeof GetClansAccountinfoLanguageEnum];
/**
 * @export
 */
export const GetClansGlossaryLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetClansGlossaryLanguageEnum = typeof GetClansGlossaryLanguageEnum[keyof typeof GetClansGlossaryLanguageEnum];
/**
 * @export
 */
export const GetClansInfoLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetClansInfoLanguageEnum = typeof GetClansInfoLanguageEnum[keyof typeof GetClansInfoLanguageEnum];
/**
 * @export
 */
export const GetClansInfoMembersKeyEnum = {
    Id: 'id'
} as const;
export type GetClansInfoMembersKeyEnum = typeof GetClansInfoMembersKeyEnum[keyof typeof GetClansInfoMembersKeyEnum];
/**
 * @export
 */
export const GetClansListLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetClansListLanguageEnum = typeof GetClansListLanguageEnum[keyof typeof GetClansListLanguageEnum];
/**
 * @export
 */
export const GetClansMemberhistoryLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetClansMemberhistoryLanguageEnum = typeof GetClansMemberhistoryLanguageEnum[keyof typeof GetClansMemberhistoryLanguageEnum];
