/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetGlobalmapClanbattles200Response,
  GetGlobalmapClaninfo200Response,
  GetGlobalmapClanprovinces200Response,
  GetGlobalmapEventaccountinfo200Response,
  GetGlobalmapEventaccountratingneighbors200Response,
  GetGlobalmapEventaccountratings200Response,
  GetGlobalmapEventclaninfo200Response,
  GetGlobalmapEventclantasks200Response,
  GetGlobalmapEventrating200Response,
  GetGlobalmapEventratingneighbors200Response,
  GetGlobalmapEvents200Response,
  GetGlobalmapFronts200Response,
  GetGlobalmapInfo200Response,
  GetGlobalmapProvinces200Response,
  GetGlobalmapSeasonaccountinfo200Response,
  GetGlobalmapSeasonrating200Response,
  GetGlobalmapSeasonratingneighbors200Response,
  GetGlobalmapSeasons200Response,
} from '../models/index.js';
import {
    GetGlobalmapClanbattles200ResponseFromJSON,
    GetGlobalmapClanbattles200ResponseToJSON,
    GetGlobalmapClaninfo200ResponseFromJSON,
    GetGlobalmapClaninfo200ResponseToJSON,
    GetGlobalmapClanprovinces200ResponseFromJSON,
    GetGlobalmapClanprovinces200ResponseToJSON,
    GetGlobalmapEventaccountinfo200ResponseFromJSON,
    GetGlobalmapEventaccountinfo200ResponseToJSON,
    GetGlobalmapEventaccountratingneighbors200ResponseFromJSON,
    GetGlobalmapEventaccountratingneighbors200ResponseToJSON,
    GetGlobalmapEventaccountratings200ResponseFromJSON,
    GetGlobalmapEventaccountratings200ResponseToJSON,
    GetGlobalmapEventclaninfo200ResponseFromJSON,
    GetGlobalmapEventclaninfo200ResponseToJSON,
    GetGlobalmapEventclantasks200ResponseFromJSON,
    GetGlobalmapEventclantasks200ResponseToJSON,
    GetGlobalmapEventrating200ResponseFromJSON,
    GetGlobalmapEventrating200ResponseToJSON,
    GetGlobalmapEventratingneighbors200ResponseFromJSON,
    GetGlobalmapEventratingneighbors200ResponseToJSON,
    GetGlobalmapEvents200ResponseFromJSON,
    GetGlobalmapEvents200ResponseToJSON,
    GetGlobalmapFronts200ResponseFromJSON,
    GetGlobalmapFronts200ResponseToJSON,
    GetGlobalmapInfo200ResponseFromJSON,
    GetGlobalmapInfo200ResponseToJSON,
    GetGlobalmapProvinces200ResponseFromJSON,
    GetGlobalmapProvinces200ResponseToJSON,
    GetGlobalmapSeasonaccountinfo200ResponseFromJSON,
    GetGlobalmapSeasonaccountinfo200ResponseToJSON,
    GetGlobalmapSeasonrating200ResponseFromJSON,
    GetGlobalmapSeasonrating200ResponseToJSON,
    GetGlobalmapSeasonratingneighbors200ResponseFromJSON,
    GetGlobalmapSeasonratingneighbors200ResponseToJSON,
    GetGlobalmapSeasons200ResponseFromJSON,
    GetGlobalmapSeasons200ResponseToJSON,
} from '../models/index.js';

export interface GetGlobalmapClanbattlesRequest {
    clanId: number;
    fields?: Array<string>;
    language?: GetGlobalmapClanbattlesLanguageEnum;
    limit?: number;
    pageNo?: number;
}

export interface GetGlobalmapClaninfoRequest {
    clanId: Array<number>;
    accessToken?: string;
    fields?: Array<string>;
}

export interface GetGlobalmapClanprovincesRequest {
    clanId: Array<number>;
    accessToken?: string;
    fields?: Array<string>;
    language?: GetGlobalmapClanprovincesLanguageEnum;
}

export interface GetGlobalmapEventaccountinfoRequest {
    accountId: number;
    eventId: string;
    frontId: Array<string>;
    clanId?: number;
    fields?: Array<string>;
}

export interface GetGlobalmapEventaccountratingneighborsRequest {
    accountId: number;
    eventId: string;
    frontId: string;
    fields?: Array<string>;
    limit?: number;
    neighboursCount?: number;
    pageNo?: number;
}

export interface GetGlobalmapEventaccountratingsRequest {
    eventId: string;
    frontId: string;
    fields?: Array<string>;
    inRating?: GetGlobalmapEventaccountratingsInRatingEnum;
    limit?: number;
    pageNo?: number;
}

export interface GetGlobalmapEventclaninfoRequest {
    clanId: number;
    eventId: string;
    frontId: Array<string>;
    fields?: Array<string>;
}

export interface GetGlobalmapEventclantasksRequest {
    clanId: number;
    eventId: string;
    fields?: Array<string>;
    language?: GetGlobalmapEventclantasksLanguageEnum;
    limit?: number;
    pageNo?: number;
}

export interface GetGlobalmapEventratingRequest {
    eventId: string;
    frontId: string;
    fields?: Array<string>;
    limit?: number;
    pageNo?: number;
}

export interface GetGlobalmapEventratingneighborsRequest {
    clanId: number;
    eventId: string;
    frontId: string;
    fields?: Array<string>;
    limit?: number;
}

export interface GetGlobalmapEventsRequest {
    eventId?: string;
    fields?: Array<string>;
    language?: GetGlobalmapEventsLanguageEnum;
    limit?: number;
    pageNo?: number;
    status?: GetGlobalmapEventsStatusEnum;
}

export interface GetGlobalmapFrontsRequest {
    fields?: Array<string>;
    frontId?: Array<string>;
    language?: GetGlobalmapFrontsLanguageEnum;
    limit?: number;
    pageNo?: number;
}

export interface GetGlobalmapInfoRequest {
    fields?: Array<string>;
}

export interface GetGlobalmapProvincesRequest {
    frontId: string;
    arenaId?: string;
    dailyRevenueGte?: number;
    dailyRevenueLte?: number;
    fields?: Array<string>;
    landingType?: GetGlobalmapProvincesLandingTypeEnum;
    language?: GetGlobalmapProvincesLanguageEnum;
    limit?: number;
    orderBy?: GetGlobalmapProvincesOrderByEnum;
    pageNo?: number;
    primeHour?: number;
    provinceId?: Array<string>;
}

export interface GetGlobalmapSeasonaccountinfoRequest {
    accountId: number;
    seasonId: string;
    vehicleLevel: Array<GetGlobalmapSeasonaccountinfoVehicleLevelEnum>;
    fields?: Array<string>;
}

export interface GetGlobalmapSeasonratingRequest {
    seasonId: string;
    vehicleLevel: GetGlobalmapSeasonratingVehicleLevelEnum;
    fields?: Array<string>;
    limit?: number;
    pageNo?: number;
}

export interface GetGlobalmapSeasonratingneighborsRequest {
    clanId: number;
    seasonId: string;
    vehicleLevel: GetGlobalmapSeasonratingneighborsVehicleLevelEnum;
    fields?: Array<string>;
    limit?: number;
}

export interface GetGlobalmapSeasonsRequest {
    fields?: Array<string>;
    language?: GetGlobalmapSeasonsLanguageEnum;
    limit?: number;
    pageNo?: number;
    seasonId?: string;
    status?: GetGlobalmapSeasonsStatusEnum;
}

/**
 * 
 */
export class GlobalMapApi extends runtime.BaseAPI {

    /**
     * Method returns list of clan\'s battles on the Global Map.
     * Clan\'s battles
     */
    async getGlobalmapClanbattlesRaw(requestParameters: GetGlobalmapClanbattlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapClanbattles200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapClanbattles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/clanbattles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapClanbattles200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of clan\'s battles on the Global Map.
     * Clan\'s battles
     */
    async getGlobalmapClanbattles(requestParameters: GetGlobalmapClanbattlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapClanbattles200Response> {
        const response = await this.getGlobalmapClanbattlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns clan data on the Global Map.
     * Clan details
     */
    async getGlobalmapClaninfoRaw(requestParameters: GetGlobalmapClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapClaninfo200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapClaninfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/claninfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapClaninfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan data on the Global Map.
     * Clan details
     */
    async getGlobalmapClaninfo(requestParameters: GetGlobalmapClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapClaninfo200Response> {
        const response = await this.getGlobalmapClaninfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns lists of clans provinces.
     * Clan\'s provinces
     */
    async getGlobalmapClanprovincesRaw(requestParameters: GetGlobalmapClanprovincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapClanprovinces200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapClanprovinces().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/clanprovinces/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapClanprovinces200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns lists of clans provinces.
     * Clan\'s provinces
     */
    async getGlobalmapClanprovinces(requestParameters: GetGlobalmapClanprovincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapClanprovinces200Response> {
        const response = await this.getGlobalmapClanprovincesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns player\'s statistics for a specific event
     * Account event information
     */
    async getGlobalmapEventaccountinfoRaw(requestParameters: GetGlobalmapEventaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventaccountinfo200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getGlobalmapEventaccountinfo().'
            );
        }

        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventaccountinfo().'
            );
        }

        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapEventaccountinfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventaccountinfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventaccountinfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns player\'s statistics for a specific event
     * Account event information
     */
    async getGlobalmapEventaccountinfo(requestParameters: GetGlobalmapEventaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventaccountinfo200Response> {
        const response = await this.getGlobalmapEventaccountinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns adjacent position in account event rating.
     * Adjacent positions in event account rating
     */
    async getGlobalmapEventaccountratingneighborsRaw(requestParameters: GetGlobalmapEventaccountratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventaccountratingneighbors200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getGlobalmapEventaccountratingneighbors().'
            );
        }

        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventaccountratingneighbors().'
            );
        }

        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapEventaccountratingneighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['neighboursCount'] != null) {
            queryParameters['neighbours_count'] = requestParameters['neighboursCount'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventaccountratingneighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventaccountratingneighbors200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns adjacent position in account event rating.
     * Adjacent positions in event account rating
     */
    async getGlobalmapEventaccountratingneighbors(requestParameters: GetGlobalmapEventaccountratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventaccountratingneighbors200Response> {
        const response = await this.getGlobalmapEventaccountratingneighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns account event rating.
     * Event account rating
     */
    async getGlobalmapEventaccountratingsRaw(requestParameters: GetGlobalmapEventaccountratingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventaccountratings200Response>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventaccountratings().'
            );
        }

        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapEventaccountratings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['inRating'] != null) {
            queryParameters['in_rating'] = requestParameters['inRating'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventaccountratings/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventaccountratings200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns account event rating.
     * Event account rating
     */
    async getGlobalmapEventaccountratings(requestParameters: GetGlobalmapEventaccountratingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventaccountratings200Response> {
        const response = await this.getGlobalmapEventaccountratingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns clan\'s statistics for a specific event.
     * Clan event information
     */
    async getGlobalmapEventclaninfoRaw(requestParameters: GetGlobalmapEventclaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventclaninfo200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapEventclaninfo().'
            );
        }

        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventclaninfo().'
            );
        }

        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapEventclaninfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventclaninfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventclaninfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan\'s statistics for a specific event.
     * Clan event information
     */
    async getGlobalmapEventclaninfo(requestParameters: GetGlobalmapEventclaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventclaninfo200Response> {
        const response = await this.getGlobalmapEventclaninfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns clan\'s missions for a specific event.
     * Clan event missions
     */
    async getGlobalmapEventclantasksRaw(requestParameters: GetGlobalmapEventclantasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventclantasks200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapEventclantasks().'
            );
        }

        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventclantasks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventclantasks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventclantasks200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan\'s missions for a specific event.
     * Clan event missions
     */
    async getGlobalmapEventclantasks(requestParameters: GetGlobalmapEventclantasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventclantasks200Response> {
        const response = await this.getGlobalmapEventclantasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns event clan rating
     * Event clan ratings
     */
    async getGlobalmapEventratingRaw(requestParameters: GetGlobalmapEventratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventrating200Response>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventrating().'
            );
        }

        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapEventrating().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventrating/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventrating200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns event clan rating
     * Event clan ratings
     */
    async getGlobalmapEventrating(requestParameters: GetGlobalmapEventratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventrating200Response> {
        const response = await this.getGlobalmapEventratingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of adjacent positions in event clan rating
     * Adjacent position in event clan rating
     */
    async getGlobalmapEventratingneighborsRaw(requestParameters: GetGlobalmapEventratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEventratingneighbors200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapEventratingneighbors().'
            );
        }

        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getGlobalmapEventratingneighbors().'
            );
        }

        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapEventratingneighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventratingneighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEventratingneighbors200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of adjacent positions in event clan rating
     * Adjacent position in event clan rating
     */
    async getGlobalmapEventratingneighbors(requestParameters: GetGlobalmapEventratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEventratingneighbors200Response> {
        const response = await this.getGlobalmapEventratingneighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns events information.
     * Events
     */
    async getGlobalmapEventsRaw(requestParameters: GetGlobalmapEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapEvents200Response>> {
        const queryParameters: any = {};

        if (requestParameters['eventId'] != null) {
            queryParameters['event_id'] = requestParameters['eventId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/events/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapEvents200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns events information.
     * Events
     */
    async getGlobalmapEvents(requestParameters: GetGlobalmapEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapEvents200Response> {
        const response = await this.getGlobalmapEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about the Global Map Fronts.
     * Fronts
     */
    async getGlobalmapFrontsRaw(requestParameters: GetGlobalmapFrontsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapFronts200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/fronts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapFronts200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about the Global Map Fronts.
     * Fronts
     */
    async getGlobalmapFronts(requestParameters: GetGlobalmapFrontsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapFronts200Response> {
        const response = await this.getGlobalmapFrontsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns general information about the Global Map.
     * Map status
     */
    async getGlobalmapInfoRaw(requestParameters: GetGlobalmapInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapInfo200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns general information about the Global Map.
     * Map status
     */
    async getGlobalmapInfo(requestParameters: GetGlobalmapInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapInfo200Response> {
        const response = await this.getGlobalmapInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about the Global Map provinces.
     * Provinces
     */
    async getGlobalmapProvincesRaw(requestParameters: GetGlobalmapProvincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapProvinces200Response>> {
        if (requestParameters['frontId'] == null) {
            throw new runtime.RequiredError(
                'frontId',
                'Required parameter "frontId" was null or undefined when calling getGlobalmapProvinces().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['frontId'] != null) {
            queryParameters['front_id'] = requestParameters['frontId'];
        }

        if (requestParameters['arenaId'] != null) {
            queryParameters['arena_id'] = requestParameters['arenaId'];
        }

        if (requestParameters['dailyRevenueGte'] != null) {
            queryParameters['daily_revenue_gte'] = requestParameters['dailyRevenueGte'];
        }

        if (requestParameters['dailyRevenueLte'] != null) {
            queryParameters['daily_revenue_lte'] = requestParameters['dailyRevenueLte'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['landingType'] != null) {
            queryParameters['landing_type'] = requestParameters['landingType'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['primeHour'] != null) {
            queryParameters['prime_hour'] = requestParameters['primeHour'];
        }

        if (requestParameters['provinceId'] != null) {
            queryParameters['province_id'] = requestParameters['provinceId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/provinces/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapProvinces200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about the Global Map provinces.
     * Provinces
     */
    async getGlobalmapProvinces(requestParameters: GetGlobalmapProvincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapProvinces200Response> {
        const response = await this.getGlobalmapProvincesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns player\'s statistics for a specific season.
     * Account\'s season data
     */
    async getGlobalmapSeasonaccountinfoRaw(requestParameters: GetGlobalmapSeasonaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapSeasonaccountinfo200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getGlobalmapSeasonaccountinfo().'
            );
        }

        if (requestParameters['seasonId'] == null) {
            throw new runtime.RequiredError(
                'seasonId',
                'Required parameter "seasonId" was null or undefined when calling getGlobalmapSeasonaccountinfo().'
            );
        }

        if (requestParameters['vehicleLevel'] == null) {
            throw new runtime.RequiredError(
                'vehicleLevel',
                'Required parameter "vehicleLevel" was null or undefined when calling getGlobalmapSeasonaccountinfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['seasonId'] != null) {
            queryParameters['season_id'] = requestParameters['seasonId'];
        }

        if (requestParameters['vehicleLevel'] != null) {
            queryParameters['vehicle_level'] = requestParameters['vehicleLevel']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasonaccountinfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapSeasonaccountinfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns player\'s statistics for a specific season.
     * Account\'s season data
     */
    async getGlobalmapSeasonaccountinfo(requestParameters: GetGlobalmapSeasonaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapSeasonaccountinfo200Response> {
        const response = await this.getGlobalmapSeasonaccountinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns season clan rating.
     * Season rating
     */
    async getGlobalmapSeasonratingRaw(requestParameters: GetGlobalmapSeasonratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapSeasonrating200Response>> {
        if (requestParameters['seasonId'] == null) {
            throw new runtime.RequiredError(
                'seasonId',
                'Required parameter "seasonId" was null or undefined when calling getGlobalmapSeasonrating().'
            );
        }

        if (requestParameters['vehicleLevel'] == null) {
            throw new runtime.RequiredError(
                'vehicleLevel',
                'Required parameter "vehicleLevel" was null or undefined when calling getGlobalmapSeasonrating().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['seasonId'] != null) {
            queryParameters['season_id'] = requestParameters['seasonId'];
        }

        if (requestParameters['vehicleLevel'] != null) {
            queryParameters['vehicle_level'] = requestParameters['vehicleLevel'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasonrating/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapSeasonrating200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns season clan rating.
     * Season rating
     */
    async getGlobalmapSeasonrating(requestParameters: GetGlobalmapSeasonratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapSeasonrating200Response> {
        const response = await this.getGlobalmapSeasonratingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of adjacent positions in season clan rating.
     * Adjacent positions in season clan rating
     */
    async getGlobalmapSeasonratingneighborsRaw(requestParameters: GetGlobalmapSeasonratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapSeasonratingneighbors200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getGlobalmapSeasonratingneighbors().'
            );
        }

        if (requestParameters['seasonId'] == null) {
            throw new runtime.RequiredError(
                'seasonId',
                'Required parameter "seasonId" was null or undefined when calling getGlobalmapSeasonratingneighbors().'
            );
        }

        if (requestParameters['vehicleLevel'] == null) {
            throw new runtime.RequiredError(
                'vehicleLevel',
                'Required parameter "vehicleLevel" was null or undefined when calling getGlobalmapSeasonratingneighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['seasonId'] != null) {
            queryParameters['season_id'] = requestParameters['seasonId'];
        }

        if (requestParameters['vehicleLevel'] != null) {
            queryParameters['vehicle_level'] = requestParameters['vehicleLevel'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasonratingneighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapSeasonratingneighbors200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of adjacent positions in season clan rating.
     * Adjacent positions in season clan rating
     */
    async getGlobalmapSeasonratingneighbors(requestParameters: GetGlobalmapSeasonratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapSeasonratingneighbors200Response> {
        const response = await this.getGlobalmapSeasonratingneighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about seasons.
     * Seasons
     */
    async getGlobalmapSeasonsRaw(requestParameters: GetGlobalmapSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGlobalmapSeasons200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['seasonId'] != null) {
            queryParameters['season_id'] = requestParameters['seasonId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasons/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGlobalmapSeasons200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about seasons.
     * Seasons
     */
    async getGlobalmapSeasons(requestParameters: GetGlobalmapSeasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGlobalmapSeasons200Response> {
        const response = await this.getGlobalmapSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetGlobalmapClanbattlesLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapClanbattlesLanguageEnum = typeof GetGlobalmapClanbattlesLanguageEnum[keyof typeof GetGlobalmapClanbattlesLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapClanprovincesLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapClanprovincesLanguageEnum = typeof GetGlobalmapClanprovincesLanguageEnum[keyof typeof GetGlobalmapClanprovincesLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapEventaccountratingsInRatingEnum = {
    NUMBER_1: 1,
    NUMBER_0: 0
} as const;
export type GetGlobalmapEventaccountratingsInRatingEnum = typeof GetGlobalmapEventaccountratingsInRatingEnum[keyof typeof GetGlobalmapEventaccountratingsInRatingEnum];
/**
 * @export
 */
export const GetGlobalmapEventclantasksLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapEventclantasksLanguageEnum = typeof GetGlobalmapEventclantasksLanguageEnum[keyof typeof GetGlobalmapEventclantasksLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapEventsLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapEventsLanguageEnum = typeof GetGlobalmapEventsLanguageEnum[keyof typeof GetGlobalmapEventsLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapEventsStatusEnum = {
    Planned: 'PLANNED',
    Active: 'ACTIVE',
    Finished: 'FINISHED'
} as const;
export type GetGlobalmapEventsStatusEnum = typeof GetGlobalmapEventsStatusEnum[keyof typeof GetGlobalmapEventsStatusEnum];
/**
 * @export
 */
export const GetGlobalmapFrontsLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapFrontsLanguageEnum = typeof GetGlobalmapFrontsLanguageEnum[keyof typeof GetGlobalmapFrontsLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapProvincesLandingTypeEnum = {
    Null: 'null',
    Auction: 'auction',
    Tournament: 'tournament'
} as const;
export type GetGlobalmapProvincesLandingTypeEnum = typeof GetGlobalmapProvincesLandingTypeEnum[keyof typeof GetGlobalmapProvincesLandingTypeEnum];
/**
 * @export
 */
export const GetGlobalmapProvincesLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapProvincesLanguageEnum = typeof GetGlobalmapProvincesLanguageEnum[keyof typeof GetGlobalmapProvincesLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapProvincesOrderByEnum = {
    ProvinceId: 'province_id',
    ProvinceId2: '-province_id',
    DailyRevenue: 'daily_revenue',
    DailyRevenue2: '-daily_revenue',
    PrimeHour: 'prime_hour',
    PrimeHour2: '-prime_hour'
} as const;
export type GetGlobalmapProvincesOrderByEnum = typeof GetGlobalmapProvincesOrderByEnum[keyof typeof GetGlobalmapProvincesOrderByEnum];
/**
 * @export
 */
export const GetGlobalmapSeasonaccountinfoVehicleLevelEnum = {
    _6: '6',
    _8: '8',
    _10: '10'
} as const;
export type GetGlobalmapSeasonaccountinfoVehicleLevelEnum = typeof GetGlobalmapSeasonaccountinfoVehicleLevelEnum[keyof typeof GetGlobalmapSeasonaccountinfoVehicleLevelEnum];
/**
 * @export
 */
export const GetGlobalmapSeasonratingVehicleLevelEnum = {
    _6: '6',
    _8: '8',
    _10: '10'
} as const;
export type GetGlobalmapSeasonratingVehicleLevelEnum = typeof GetGlobalmapSeasonratingVehicleLevelEnum[keyof typeof GetGlobalmapSeasonratingVehicleLevelEnum];
/**
 * @export
 */
export const GetGlobalmapSeasonratingneighborsVehicleLevelEnum = {
    _6: '6',
    _8: '8',
    _10: '10'
} as const;
export type GetGlobalmapSeasonratingneighborsVehicleLevelEnum = typeof GetGlobalmapSeasonratingneighborsVehicleLevelEnum[keyof typeof GetGlobalmapSeasonratingneighborsVehicleLevelEnum];
/**
 * @export
 */
export const GetGlobalmapSeasonsLanguageEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    Pl: 'pl',
    Tr: 'tr',
    Th: 'th'
} as const;
export type GetGlobalmapSeasonsLanguageEnum = typeof GetGlobalmapSeasonsLanguageEnum[keyof typeof GetGlobalmapSeasonsLanguageEnum];
/**
 * @export
 */
export const GetGlobalmapSeasonsStatusEnum = {
    Planned: 'PLANNED',
    Active: 'ACTIVE',
    Finished: 'FINISHED'
} as const;
export type GetGlobalmapSeasonsStatusEnum = typeof GetGlobalmapSeasonsStatusEnum[keyof typeof GetGlobalmapSeasonsStatusEnum];
