/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GlobalmapClanbattlesResponse,
  GlobalmapClaninfoResponse,
  GlobalmapClanprovincesResponse,
  GlobalmapEventaccountinfoResponse,
  GlobalmapEventaccountratingneighborsResponse,
  GlobalmapEventaccountratingsResponse,
  GlobalmapEventclaninfoResponse,
  GlobalmapEventclantasksResponse,
  GlobalmapEventratingResponse,
  GlobalmapEventratingneighborsResponse,
  GlobalmapEventsResponse,
  GlobalmapFrontsResponse,
  GlobalmapInfoResponse,
  GlobalmapProvincesResponse,
  GlobalmapSeasonaccountinfoResponse,
  GlobalmapSeasonratingResponse,
  GlobalmapSeasonratingneighborsResponse,
  GlobalmapSeasonsResponse,
} from '../models/index.js';
import {
    GlobalmapClanbattlesResponseFromJSON,
    GlobalmapClanbattlesResponseToJSON,
    GlobalmapClaninfoResponseFromJSON,
    GlobalmapClaninfoResponseToJSON,
    GlobalmapClanprovincesResponseFromJSON,
    GlobalmapClanprovincesResponseToJSON,
    GlobalmapEventaccountinfoResponseFromJSON,
    GlobalmapEventaccountinfoResponseToJSON,
    GlobalmapEventaccountratingneighborsResponseFromJSON,
    GlobalmapEventaccountratingneighborsResponseToJSON,
    GlobalmapEventaccountratingsResponseFromJSON,
    GlobalmapEventaccountratingsResponseToJSON,
    GlobalmapEventclaninfoResponseFromJSON,
    GlobalmapEventclaninfoResponseToJSON,
    GlobalmapEventclantasksResponseFromJSON,
    GlobalmapEventclantasksResponseToJSON,
    GlobalmapEventratingResponseFromJSON,
    GlobalmapEventratingResponseToJSON,
    GlobalmapEventratingneighborsResponseFromJSON,
    GlobalmapEventratingneighborsResponseToJSON,
    GlobalmapEventsResponseFromJSON,
    GlobalmapEventsResponseToJSON,
    GlobalmapFrontsResponseFromJSON,
    GlobalmapFrontsResponseToJSON,
    GlobalmapInfoResponseFromJSON,
    GlobalmapInfoResponseToJSON,
    GlobalmapProvincesResponseFromJSON,
    GlobalmapProvincesResponseToJSON,
    GlobalmapSeasonaccountinfoResponseFromJSON,
    GlobalmapSeasonaccountinfoResponseToJSON,
    GlobalmapSeasonratingResponseFromJSON,
    GlobalmapSeasonratingResponseToJSON,
    GlobalmapSeasonratingneighborsResponseFromJSON,
    GlobalmapSeasonratingneighborsResponseToJSON,
    GlobalmapSeasonsResponseFromJSON,
    GlobalmapSeasonsResponseToJSON,
} from '../models/index.js';

export interface GetGlobalmapClanbattlesRequest {
    clan_id: number;
    fields?: Array<string>;
    language?: GetGlobalmapClanbattlesLanguageEnum;
    limit?: number;
    page_no?: number;
}

export interface GetGlobalmapClaninfoRequest {
    clan_id: Array<number>;
    access_token?: string;
    fields?: Array<string>;
}

export interface GetGlobalmapClanprovincesRequest {
    clan_id: Array<number>;
    access_token?: string;
    fields?: Array<string>;
    language?: GetGlobalmapClanprovincesLanguageEnum;
}

export interface GetGlobalmapEventaccountinfoRequest {
    account_id: number;
    event_id: string;
    front_id: Array<string>;
    clan_id?: number;
    fields?: Array<string>;
}

export interface GetGlobalmapEventaccountratingneighborsRequest {
    account_id: number;
    event_id: string;
    front_id: string;
    fields?: Array<string>;
    limit?: number;
    neighbours_count?: number;
    page_no?: number;
}

export interface GetGlobalmapEventaccountratingsRequest {
    event_id: string;
    front_id: string;
    fields?: Array<string>;
    in_rating?: GetGlobalmapEventaccountratingsInRatingEnum;
    limit?: number;
    page_no?: number;
}

export interface GetGlobalmapEventclaninfoRequest {
    clan_id: number;
    event_id: string;
    front_id: Array<string>;
    fields?: Array<string>;
}

export interface GetGlobalmapEventclantasksRequest {
    clan_id: number;
    event_id: string;
    fields?: Array<string>;
    language?: GetGlobalmapEventclantasksLanguageEnum;
    limit?: number;
    page_no?: number;
}

export interface GetGlobalmapEventratingRequest {
    event_id: string;
    front_id: string;
    fields?: Array<string>;
    limit?: number;
    page_no?: number;
}

export interface GetGlobalmapEventratingneighborsRequest {
    clan_id: number;
    event_id: string;
    front_id: string;
    fields?: Array<string>;
    limit?: number;
}

export interface GetGlobalmapEventsRequest {
    event_id?: string;
    fields?: Array<string>;
    language?: GetGlobalmapEventsLanguageEnum;
    limit?: number;
    page_no?: number;
    status?: GetGlobalmapEventsStatusEnum;
}

export interface GetGlobalmapFrontsRequest {
    fields?: Array<string>;
    front_id?: Array<string>;
    language?: GetGlobalmapFrontsLanguageEnum;
    limit?: number;
    page_no?: number;
}

export interface GetGlobalmapInfoRequest {
    fields?: Array<string>;
}

export interface GetGlobalmapProvincesRequest {
    front_id: string;
    arena_id?: string;
    daily_revenue_gte?: number;
    daily_revenue_lte?: number;
    fields?: Array<string>;
    landing_type?: GetGlobalmapProvincesLandingTypeEnum;
    language?: GetGlobalmapProvincesLanguageEnum;
    limit?: number;
    order_by?: GetGlobalmapProvincesOrderByEnum;
    page_no?: number;
    prime_hour?: number;
    province_id?: Array<string>;
}

export interface GetGlobalmapSeasonaccountinfoRequest {
    account_id: number;
    season_id: string;
    vehicle_level: Array<GetGlobalmapSeasonaccountinfoVehicleLevelEnum>;
    fields?: Array<string>;
}

export interface GetGlobalmapSeasonratingRequest {
    season_id: string;
    vehicle_level: GetGlobalmapSeasonratingVehicleLevelEnum;
    fields?: Array<string>;
    limit?: number;
    page_no?: number;
}

export interface GetGlobalmapSeasonratingneighborsRequest {
    clan_id: number;
    season_id: string;
    vehicle_level: GetGlobalmapSeasonratingneighborsVehicleLevelEnum;
    fields?: Array<string>;
    limit?: number;
}

export interface GetGlobalmapSeasonsRequest {
    fields?: Array<string>;
    language?: GetGlobalmapSeasonsLanguageEnum;
    limit?: number;
    page_no?: number;
    season_id?: string;
    status?: GetGlobalmapSeasonsStatusEnum;
}

/**
 * GlobalMapApi - interface
 * 
 * @export
 * @interface GlobalMapApiInterface
 */
export interface GlobalMapApiInterface {
    /**
     * Method returns list of clan\'s battles on the Global Map.
     * @summary Clan\'s battles
     * @param {number} clan_id Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {number} [limit] Number of returned entries.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapClanbattlesRaw(requestParameters: GetGlobalmapClanbattlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapClanbattlesResponse>>;

    /**
     * Method returns list of clan\'s battles on the Global Map.
     * Clan\'s battles
     */
    getGlobalmapClanbattles(requestParameters: GetGlobalmapClanbattlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapClanbattlesResponse>;

    /**
     * Method returns clan data on the Global Map.
     * @summary Clan details
     * @param {Array<number>} clan_id Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {string} [access_token] [Access token](https://developers.wargaming.net/documentation/guide/principles/#access_token) for the private data of a user\&#39;s account; can be received via the authorization method; valid within a stated time period
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapClaninfoRaw(requestParameters: GetGlobalmapClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapClaninfoResponse>>;

    /**
     * Method returns clan data on the Global Map.
     * Clan details
     */
    getGlobalmapClaninfo(requestParameters: GetGlobalmapClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapClaninfoResponse>;

    /**
     * Method returns lists of clans provinces.
     * @summary Clan\'s provinces
     * @param {Array<number>} clan_id List of clan IDs. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {string} [access_token] [Access token](https://developers.wargaming.net/documentation/guide/principles/#access_token) for the private data of a user\&#39;s account; can be received via the authorization method; valid within a stated time period
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapClanprovincesRaw(requestParameters: GetGlobalmapClanprovincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapClanprovincesResponse>>;

    /**
     * Method returns lists of clans provinces.
     * Clan\'s provinces
     */
    getGlobalmapClanprovinces(requestParameters: GetGlobalmapClanprovincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapClanprovincesResponse>;

    /**
     * Method returns player\'s statistics for a specific event
     * @summary Account event information
     * @param {number} account_id Account ID.
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {Array<string>} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {number} [clan_id] Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventaccountinfoRaw(requestParameters: GetGlobalmapEventaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventaccountinfoResponse>>;

    /**
     * Method returns player\'s statistics for a specific event
     * Account event information
     */
    getGlobalmapEventaccountinfo(requestParameters: GetGlobalmapEventaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventaccountinfoResponse>;

    /**
     * Method returns adjacent position in account event rating.
     * @summary Adjacent positions in event account rating
     * @param {number} account_id Account ID.
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {string} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {number} [limit] Clans limit.
     * @param {number} [neighbours_count] How many neighbors to show next to the account.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventaccountratingneighborsRaw(requestParameters: GetGlobalmapEventaccountratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventaccountratingneighborsResponse>>;

    /**
     * Method returns adjacent position in account event rating.
     * Adjacent positions in event account rating
     */
    getGlobalmapEventaccountratingneighbors(requestParameters: GetGlobalmapEventaccountratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventaccountratingneighborsResponse>;

    /**
     * Method returns account event rating.
     * @summary Event account rating
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {string} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {1 | 0} [in_rating] Get data only for accounts with rating.
     * @param {number} [limit] Accounts limit.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventaccountratingsRaw(requestParameters: GetGlobalmapEventaccountratingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventaccountratingsResponse>>;

    /**
     * Method returns account event rating.
     * Event account rating
     */
    getGlobalmapEventaccountratings(requestParameters: GetGlobalmapEventaccountratingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventaccountratingsResponse>;

    /**
     * Method returns clan\'s statistics for a specific event.
     * @summary Clan event information
     * @param {number} clan_id Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {Array<string>} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventclaninfoRaw(requestParameters: GetGlobalmapEventclaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventclaninfoResponse>>;

    /**
     * Method returns clan\'s statistics for a specific event.
     * Clan event information
     */
    getGlobalmapEventclaninfo(requestParameters: GetGlobalmapEventclaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventclaninfoResponse>;

    /**
     * Method returns clan\'s missions for a specific event.
     * @summary Clan event missions
     * @param {number} clan_id Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {number} [limit] Page size.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventclantasksRaw(requestParameters: GetGlobalmapEventclantasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventclantasksResponse>>;

    /**
     * Method returns clan\'s missions for a specific event.
     * Clan event missions
     */
    getGlobalmapEventclantasks(requestParameters: GetGlobalmapEventclantasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventclantasksResponse>;

    /**
     * Method returns event clan rating
     * @summary Event clan ratings
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {string} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {number} [limit] Clans limit.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventratingRaw(requestParameters: GetGlobalmapEventratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventratingResponse>>;

    /**
     * Method returns event clan rating
     * Event clan ratings
     */
    getGlobalmapEventrating(requestParameters: GetGlobalmapEventratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventratingResponse>;

    /**
     * Method returns list of adjacent positions in event clan rating
     * @summary Adjacent position in event clan rating
     * @param {number} clan_id Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {string} event_id Event ID. To get an event ID, use the [Events](https://developers.wargaming.net/reference/all/wot/globalmap/events) method.
     * @param {string} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {number} [limit] Neighbors limit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventratingneighborsRaw(requestParameters: GetGlobalmapEventratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventratingneighborsResponse>>;

    /**
     * Method returns list of adjacent positions in event clan rating
     * Adjacent position in event clan rating
     */
    getGlobalmapEventratingneighbors(requestParameters: GetGlobalmapEventratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventratingneighborsResponse>;

    /**
     * Method returns events information.
     * @summary Events
     * @param {string} [event_id] Event ID
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {number} [limit] Page limit.
     * @param {number} [page_no] Page number.
     * @param {'PLANNED' | 'ACTIVE' | 'FINISHED'} [status] Response with events filtered by status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapEventsRaw(requestParameters: GetGlobalmapEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventsResponse>>;

    /**
     * Method returns events information.
     * Events
     */
    getGlobalmapEvents(requestParameters: GetGlobalmapEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventsResponse>;

    /**
     * Method returns information about the Global Map Fronts.
     * @summary Fronts
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {Array<string>} [front_id] List of Front IDs, to specify what fronts need to be returned.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {number} [limit] Number of returned entries.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapFrontsRaw(requestParameters: GetGlobalmapFrontsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapFrontsResponse>>;

    /**
     * Method returns information about the Global Map Fronts.
     * Fronts
     */
    getGlobalmapFronts(requestParameters: GetGlobalmapFrontsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapFrontsResponse>;

    /**
     * Method returns general information about the Global Map.
     * @summary Map status
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapInfoRaw(requestParameters: GetGlobalmapInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapInfoResponse>>;

    /**
     * Method returns general information about the Global Map.
     * Map status
     */
    getGlobalmapInfo(requestParameters: GetGlobalmapInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapInfoResponse>;

    /**
     * Method returns information about the Global Map provinces.
     * @summary Provinces
     * @param {string} front_id Front ID. To get a front ID, use the [Fronts](https://developers.wargaming.net/reference/all/wot/globalmap/fronts) method.
     * @param {string} [arena_id] Map ID
     * @param {number} [daily_revenue_gte] Search for provinces with daily income equal to or more than the value
     * @param {number} [daily_revenue_lte] Search for provinces with daily income equal to or less than the value
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'null' | 'auction' | 'tournament'} [landing_type] Search for provinces by landing type.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {number} [limit] Number of returned entries.
     * @param {'province_id' | '-province_id' | 'daily_revenue' | '-daily_revenue' | 'prime_hour' | '-prime_hour'} [order_by] Sorting.
     * @param {number} [page_no] Page number.
     * @param {number} [prime_hour] Search for provinces with the value of Prime Time start hour. Values available: from 0 to 23.
     * @param {Array<string>} [province_id] Filter by the list of province IDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapProvincesRaw(requestParameters: GetGlobalmapProvincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapProvincesResponse>>;

    /**
     * Method returns information about the Global Map provinces.
     * Provinces
     */
    getGlobalmapProvinces(requestParameters: GetGlobalmapProvincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapProvincesResponse>;

    /**
     * Method returns player\'s statistics for a specific season.
     * @summary Account\'s season data
     * @param {number} account_id Account ID.
     * @param {string} season_id Season ID. To get a season ID, use the [Seasons](https://developers.wargaming.net/reference/all/wot/globalmap/seasons) method.
     * @param {Array<'6' | '8' | '10'>} vehicle_level List of vehicle Tiers.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapSeasonaccountinfoRaw(requestParameters: GetGlobalmapSeasonaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonaccountinfoResponse>>;

    /**
     * Method returns player\'s statistics for a specific season.
     * Account\'s season data
     */
    getGlobalmapSeasonaccountinfo(requestParameters: GetGlobalmapSeasonaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonaccountinfoResponse>;

    /**
     * Method returns season clan rating.
     * @summary Season rating
     * @param {string} season_id Season ID. To get a season ID, use the [Seasons](https://developers.wargaming.net/reference/all/wot/globalmap/seasons) method.
     * @param {'6' | '8' | '10'} vehicle_level Vehicle Tier.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {number} [limit] Clans limit.
     * @param {number} [page_no] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapSeasonratingRaw(requestParameters: GetGlobalmapSeasonratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonratingResponse>>;

    /**
     * Method returns season clan rating.
     * Season rating
     */
    getGlobalmapSeasonrating(requestParameters: GetGlobalmapSeasonratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonratingResponse>;

    /**
     * Method returns list of adjacent positions in season clan rating.
     * @summary Adjacent positions in season clan rating
     * @param {number} clan_id Clan ID. To get a clan ID, use the [Clans](https://developers.wargaming.net/reference/all/wgn/clans/list) method.
     * @param {string} season_id Season ID. To get a season ID, use the [Seasons](https://developers.wargaming.net/reference/all/wot/globalmap/seasons) method.
     * @param {'6' | '8' | '10'} vehicle_level Vehicle Tier.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {number} [limit] Neighbors limit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapSeasonratingneighborsRaw(requestParameters: GetGlobalmapSeasonratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonratingneighborsResponse>>;

    /**
     * Method returns list of adjacent positions in season clan rating.
     * Adjacent positions in season clan rating
     */
    getGlobalmapSeasonratingneighbors(requestParameters: GetGlobalmapSeasonratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonratingneighborsResponse>;

    /**
     * Method returns information about seasons.
     * @summary Seasons
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'de' | 'fr' | 'es' | 'pl' | 'tr' | 'th'} [language] Language.
     * @param {number} [limit] Page limit.
     * @param {number} [page_no] Page number.
     * @param {string} [season_id] Season ID
     * @param {'PLANNED' | 'ACTIVE' | 'FINISHED'} [status] Response with seasons filtered by status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalMapApiInterface
     */
    getGlobalmapSeasonsRaw(requestParameters: GetGlobalmapSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonsResponse>>;

    /**
     * Method returns information about seasons.
     * Seasons
     */
    getGlobalmapSeasons(requestParameters: GetGlobalmapSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonsResponse>;

}

/**
 * 
 */
export class GlobalMapApi extends runtime.BaseAPI implements GlobalMapApiInterface {

    /**
     * Method returns list of clan\'s battles on the Global Map.
     * Clan\'s battles
     */
    async getGlobalmapClanbattlesRaw(requestParameters: GetGlobalmapClanbattlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapClanbattlesResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapClanbattles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/clanbattles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapClanbattlesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of clan\'s battles on the Global Map.
     * Clan\'s battles
     */
    async getGlobalmapClanbattles(requestParameters: GetGlobalmapClanbattlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapClanbattlesResponse> {
        const response = await this.getGlobalmapClanbattlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns clan data on the Global Map.
     * Clan details
     */
    async getGlobalmapClaninfoRaw(requestParameters: GetGlobalmapClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapClaninfoResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapClaninfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['access_token'] != null) {
            queryParameters['access_token'] = requestParameters['access_token'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/claninfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapClaninfoResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan data on the Global Map.
     * Clan details
     */
    async getGlobalmapClaninfo(requestParameters: GetGlobalmapClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapClaninfoResponse> {
        const response = await this.getGlobalmapClaninfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns lists of clans provinces.
     * Clan\'s provinces
     */
    async getGlobalmapClanprovincesRaw(requestParameters: GetGlobalmapClanprovincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapClanprovincesResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapClanprovinces().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['access_token'] != null) {
            queryParameters['access_token'] = requestParameters['access_token'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/clanprovinces/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapClanprovincesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns lists of clans provinces.
     * Clan\'s provinces
     */
    async getGlobalmapClanprovinces(requestParameters: GetGlobalmapClanprovincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapClanprovincesResponse> {
        const response = await this.getGlobalmapClanprovincesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns player\'s statistics for a specific event
     * Account event information
     */
    async getGlobalmapEventaccountinfoRaw(requestParameters: GetGlobalmapEventaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventaccountinfoResponse>> {
        if (requestParameters['account_id'] == null) {
            throw new runtime.RequiredError(
                'account_id',
                'Required parameter "account_id" was null or undefined when calling getGlobalmapEventaccountinfo().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventaccountinfo().'
            );
        }

        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapEventaccountinfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['account_id'] != null) {
            queryParameters['account_id'] = requestParameters['account_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventaccountinfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventaccountinfoResponseFromJSON(jsonValue));
    }

    /**
     * Method returns player\'s statistics for a specific event
     * Account event information
     */
    async getGlobalmapEventaccountinfo(requestParameters: GetGlobalmapEventaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventaccountinfoResponse> {
        const response = await this.getGlobalmapEventaccountinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns adjacent position in account event rating.
     * Adjacent positions in event account rating
     */
    async getGlobalmapEventaccountratingneighborsRaw(requestParameters: GetGlobalmapEventaccountratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventaccountratingneighborsResponse>> {
        if (requestParameters['account_id'] == null) {
            throw new runtime.RequiredError(
                'account_id',
                'Required parameter "account_id" was null or undefined when calling getGlobalmapEventaccountratingneighbors().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventaccountratingneighbors().'
            );
        }

        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapEventaccountratingneighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['account_id'] != null) {
            queryParameters['account_id'] = requestParameters['account_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['neighbours_count'] != null) {
            queryParameters['neighbours_count'] = requestParameters['neighbours_count'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventaccountratingneighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventaccountratingneighborsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns adjacent position in account event rating.
     * Adjacent positions in event account rating
     */
    async getGlobalmapEventaccountratingneighbors(requestParameters: GetGlobalmapEventaccountratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventaccountratingneighborsResponse> {
        const response = await this.getGlobalmapEventaccountratingneighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns account event rating.
     * Event account rating
     */
    async getGlobalmapEventaccountratingsRaw(requestParameters: GetGlobalmapEventaccountratingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventaccountratingsResponse>> {
        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventaccountratings().'
            );
        }

        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapEventaccountratings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['in_rating'] != null) {
            queryParameters['in_rating'] = requestParameters['in_rating'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventaccountratings/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventaccountratingsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns account event rating.
     * Event account rating
     */
    async getGlobalmapEventaccountratings(requestParameters: GetGlobalmapEventaccountratingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventaccountratingsResponse> {
        const response = await this.getGlobalmapEventaccountratingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns clan\'s statistics for a specific event.
     * Clan event information
     */
    async getGlobalmapEventclaninfoRaw(requestParameters: GetGlobalmapEventclaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventclaninfoResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapEventclaninfo().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventclaninfo().'
            );
        }

        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapEventclaninfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventclaninfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventclaninfoResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan\'s statistics for a specific event.
     * Clan event information
     */
    async getGlobalmapEventclaninfo(requestParameters: GetGlobalmapEventclaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventclaninfoResponse> {
        const response = await this.getGlobalmapEventclaninfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns clan\'s missions for a specific event.
     * Clan event missions
     */
    async getGlobalmapEventclantasksRaw(requestParameters: GetGlobalmapEventclantasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventclantasksResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapEventclantasks().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventclantasks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventclantasks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventclantasksResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan\'s missions for a specific event.
     * Clan event missions
     */
    async getGlobalmapEventclantasks(requestParameters: GetGlobalmapEventclantasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventclantasksResponse> {
        const response = await this.getGlobalmapEventclantasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns event clan rating
     * Event clan ratings
     */
    async getGlobalmapEventratingRaw(requestParameters: GetGlobalmapEventratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventratingResponse>> {
        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventrating().'
            );
        }

        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapEventrating().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventrating/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventratingResponseFromJSON(jsonValue));
    }

    /**
     * Method returns event clan rating
     * Event clan ratings
     */
    async getGlobalmapEventrating(requestParameters: GetGlobalmapEventratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventratingResponse> {
        const response = await this.getGlobalmapEventratingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of adjacent positions in event clan rating
     * Adjacent position in event clan rating
     */
    async getGlobalmapEventratingneighborsRaw(requestParameters: GetGlobalmapEventratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventratingneighborsResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapEventratingneighbors().'
            );
        }

        if (requestParameters['event_id'] == null) {
            throw new runtime.RequiredError(
                'event_id',
                'Required parameter "event_id" was null or undefined when calling getGlobalmapEventratingneighbors().'
            );
        }

        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapEventratingneighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id'];
        }

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/eventratingneighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventratingneighborsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of adjacent positions in event clan rating
     * Adjacent position in event clan rating
     */
    async getGlobalmapEventratingneighbors(requestParameters: GetGlobalmapEventratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventratingneighborsResponse> {
        const response = await this.getGlobalmapEventratingneighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns events information.
     * Events
     */
    async getGlobalmapEventsRaw(requestParameters: GetGlobalmapEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapEventsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['event_id'] != null) {
            queryParameters['event_id'] = requestParameters['event_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/events/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapEventsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns events information.
     * Events
     */
    async getGlobalmapEvents(requestParameters: GetGlobalmapEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapEventsResponse> {
        const response = await this.getGlobalmapEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about the Global Map Fronts.
     * Fronts
     */
    async getGlobalmapFrontsRaw(requestParameters: GetGlobalmapFrontsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapFrontsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/fronts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapFrontsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about the Global Map Fronts.
     * Fronts
     */
    async getGlobalmapFronts(requestParameters: GetGlobalmapFrontsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapFrontsResponse> {
        const response = await this.getGlobalmapFrontsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns general information about the Global Map.
     * Map status
     */
    async getGlobalmapInfoRaw(requestParameters: GetGlobalmapInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapInfoResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapInfoResponseFromJSON(jsonValue));
    }

    /**
     * Method returns general information about the Global Map.
     * Map status
     */
    async getGlobalmapInfo(requestParameters: GetGlobalmapInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapInfoResponse> {
        const response = await this.getGlobalmapInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about the Global Map provinces.
     * Provinces
     */
    async getGlobalmapProvincesRaw(requestParameters: GetGlobalmapProvincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapProvincesResponse>> {
        if (requestParameters['front_id'] == null) {
            throw new runtime.RequiredError(
                'front_id',
                'Required parameter "front_id" was null or undefined when calling getGlobalmapProvinces().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['front_id'] != null) {
            queryParameters['front_id'] = requestParameters['front_id'];
        }

        if (requestParameters['arena_id'] != null) {
            queryParameters['arena_id'] = requestParameters['arena_id'];
        }

        if (requestParameters['daily_revenue_gte'] != null) {
            queryParameters['daily_revenue_gte'] = requestParameters['daily_revenue_gte'];
        }

        if (requestParameters['daily_revenue_lte'] != null) {
            queryParameters['daily_revenue_lte'] = requestParameters['daily_revenue_lte'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['landing_type'] != null) {
            queryParameters['landing_type'] = requestParameters['landing_type'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['order_by'] != null) {
            queryParameters['order_by'] = requestParameters['order_by'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        if (requestParameters['prime_hour'] != null) {
            queryParameters['prime_hour'] = requestParameters['prime_hour'];
        }

        if (requestParameters['province_id'] != null) {
            queryParameters['province_id'] = requestParameters['province_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/provinces/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapProvincesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about the Global Map provinces.
     * Provinces
     */
    async getGlobalmapProvinces(requestParameters: GetGlobalmapProvincesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapProvincesResponse> {
        const response = await this.getGlobalmapProvincesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns player\'s statistics for a specific season.
     * Account\'s season data
     */
    async getGlobalmapSeasonaccountinfoRaw(requestParameters: GetGlobalmapSeasonaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonaccountinfoResponse>> {
        if (requestParameters['account_id'] == null) {
            throw new runtime.RequiredError(
                'account_id',
                'Required parameter "account_id" was null or undefined when calling getGlobalmapSeasonaccountinfo().'
            );
        }

        if (requestParameters['season_id'] == null) {
            throw new runtime.RequiredError(
                'season_id',
                'Required parameter "season_id" was null or undefined when calling getGlobalmapSeasonaccountinfo().'
            );
        }

        if (requestParameters['vehicle_level'] == null) {
            throw new runtime.RequiredError(
                'vehicle_level',
                'Required parameter "vehicle_level" was null or undefined when calling getGlobalmapSeasonaccountinfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['account_id'] != null) {
            queryParameters['account_id'] = requestParameters['account_id'];
        }

        if (requestParameters['season_id'] != null) {
            queryParameters['season_id'] = requestParameters['season_id'];
        }

        if (requestParameters['vehicle_level'] != null) {
            queryParameters['vehicle_level'] = requestParameters['vehicle_level']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasonaccountinfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapSeasonaccountinfoResponseFromJSON(jsonValue));
    }

    /**
     * Method returns player\'s statistics for a specific season.
     * Account\'s season data
     */
    async getGlobalmapSeasonaccountinfo(requestParameters: GetGlobalmapSeasonaccountinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonaccountinfoResponse> {
        const response = await this.getGlobalmapSeasonaccountinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns season clan rating.
     * Season rating
     */
    async getGlobalmapSeasonratingRaw(requestParameters: GetGlobalmapSeasonratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonratingResponse>> {
        if (requestParameters['season_id'] == null) {
            throw new runtime.RequiredError(
                'season_id',
                'Required parameter "season_id" was null or undefined when calling getGlobalmapSeasonrating().'
            );
        }

        if (requestParameters['vehicle_level'] == null) {
            throw new runtime.RequiredError(
                'vehicle_level',
                'Required parameter "vehicle_level" was null or undefined when calling getGlobalmapSeasonrating().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['season_id'] != null) {
            queryParameters['season_id'] = requestParameters['season_id'];
        }

        if (requestParameters['vehicle_level'] != null) {
            queryParameters['vehicle_level'] = requestParameters['vehicle_level'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasonrating/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapSeasonratingResponseFromJSON(jsonValue));
    }

    /**
     * Method returns season clan rating.
     * Season rating
     */
    async getGlobalmapSeasonrating(requestParameters: GetGlobalmapSeasonratingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonratingResponse> {
        const response = await this.getGlobalmapSeasonratingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of adjacent positions in season clan rating.
     * Adjacent positions in season clan rating
     */
    async getGlobalmapSeasonratingneighborsRaw(requestParameters: GetGlobalmapSeasonratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonratingneighborsResponse>> {
        if (requestParameters['clan_id'] == null) {
            throw new runtime.RequiredError(
                'clan_id',
                'Required parameter "clan_id" was null or undefined when calling getGlobalmapSeasonratingneighbors().'
            );
        }

        if (requestParameters['season_id'] == null) {
            throw new runtime.RequiredError(
                'season_id',
                'Required parameter "season_id" was null or undefined when calling getGlobalmapSeasonratingneighbors().'
            );
        }

        if (requestParameters['vehicle_level'] == null) {
            throw new runtime.RequiredError(
                'vehicle_level',
                'Required parameter "vehicle_level" was null or undefined when calling getGlobalmapSeasonratingneighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clan_id'] != null) {
            queryParameters['clan_id'] = requestParameters['clan_id'];
        }

        if (requestParameters['season_id'] != null) {
            queryParameters['season_id'] = requestParameters['season_id'];
        }

        if (requestParameters['vehicle_level'] != null) {
            queryParameters['vehicle_level'] = requestParameters['vehicle_level'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasonratingneighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapSeasonratingneighborsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of adjacent positions in season clan rating.
     * Adjacent positions in season clan rating
     */
    async getGlobalmapSeasonratingneighbors(requestParameters: GetGlobalmapSeasonratingneighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonratingneighborsResponse> {
        const response = await this.getGlobalmapSeasonratingneighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about seasons.
     * Seasons
     */
    async getGlobalmapSeasonsRaw(requestParameters: GetGlobalmapSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalmapSeasonsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        if (requestParameters['season_id'] != null) {
            queryParameters['season_id'] = requestParameters['season_id'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/globalmap/seasons/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalmapSeasonsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about seasons.
     * Seasons
     */
    async getGlobalmapSeasons(requestParameters: GetGlobalmapSeasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalmapSeasonsResponse> {
        const response = await this.getGlobalmapSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapClanbattlesLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapClanprovincesLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapEventaccountratingsInRatingEnum {
    NUMBER_1 = 1,
    NUMBER_0 = 0
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapEventclantasksLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapEventsLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapEventsStatusEnum {
    Planned = 'PLANNED',
    Active = 'ACTIVE',
    Finished = 'FINISHED'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapFrontsLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapProvincesLandingTypeEnum {
    Null = 'null',
    Auction = 'auction',
    Tournament = 'tournament'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapProvincesLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapProvincesOrderByEnum {
    ProvinceId = 'province_id',
    MinusProvinceId = '-province_id',
    DailyRevenue = 'daily_revenue',
    MinusDailyRevenue = '-daily_revenue',
    PrimeHour = 'prime_hour',
    MinusPrimeHour = '-prime_hour'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapSeasonaccountinfoVehicleLevelEnum {
    _6 = '6',
    _8 = '8',
    _10 = '10'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapSeasonratingVehicleLevelEnum {
    _6 = '6',
    _8 = '8',
    _10 = '10'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapSeasonratingneighborsVehicleLevelEnum {
    _6 = '6',
    _8 = '8',
    _10 = '10'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapSeasonsLanguageEnum {
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    Pl = 'pl',
    Tr = 'tr',
    Th = 'th'
}
/**
  * @export
  * @enum {string}
  */
export enum GetGlobalmapSeasonsStatusEnum {
    Planned = 'PLANNED',
    Active = 'ACTIVE',
    Finished = 'FINISHED'
}
