/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetClanratingsClans200Response,
  GetClanratingsClansDateParameter,
  GetClanratingsDates200Response,
  GetClanratingsNeighbors200Response,
  GetClanratingsTop200Response,
  GetClanratingsTypes200Response,
} from '../models/index.js';
import {
    GetClanratingsClans200ResponseFromJSON,
    GetClanratingsClans200ResponseToJSON,
    GetClanratingsClansDateParameterFromJSON,
    GetClanratingsClansDateParameterToJSON,
    GetClanratingsDates200ResponseFromJSON,
    GetClanratingsDates200ResponseToJSON,
    GetClanratingsNeighbors200ResponseFromJSON,
    GetClanratingsNeighbors200ResponseToJSON,
    GetClanratingsTop200ResponseFromJSON,
    GetClanratingsTop200ResponseToJSON,
    GetClanratingsTypes200ResponseFromJSON,
    GetClanratingsTypes200ResponseToJSON,
} from '../models/index.js';

export interface GetClanratingsClansRequest {
    clanId: Array<number>;
    date?: GetClanratingsClansDateParameter;
    fields?: Array<string>;
}

export interface GetClanratingsDatesRequest {
    limit?: number;
}

export interface GetClanratingsNeighborsRequest {
    clanId: number;
    rankField: string;
    date?: GetClanratingsClansDateParameter;
    fields?: Array<string>;
    limit?: number;
}

export interface GetClanratingsTopRequest {
    rankField: string;
    date?: GetClanratingsClansDateParameter;
    fields?: Array<string>;
    limit?: number;
    pageNo?: number;
}

/**
 * 
 */
export class ClanRatingsApi extends runtime.BaseAPI {

    /**
     * Method returns clan ratings by specified IDs.
     * Clan ratings
     */
    async getClanratingsClansRaw(requestParameters: GetClanratingsClansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClanratingsClans200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getClanratingsClans().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clanratings/clans/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClanratingsClans200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns clan ratings by specified IDs.
     * Clan ratings
     */
    async getClanratingsClans(requestParameters: GetClanratingsClansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClanratingsClans200Response> {
        const response = await this.getClanratingsClansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns dates with available rating data.
     * Dates with available ratings
     */
    async getClanratingsDatesRaw(requestParameters: GetClanratingsDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClanratingsDates200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clanratings/dates/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClanratingsDates200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns dates with available rating data.
     * Dates with available ratings
     */
    async getClanratingsDates(requestParameters: GetClanratingsDatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClanratingsDates200Response> {
        const response = await this.getClanratingsDatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of adjacent positions in specified clan rating.
     * Adjacent positions in clan rating
     */
    async getClanratingsNeighborsRaw(requestParameters: GetClanratingsNeighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClanratingsNeighbors200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getClanratingsNeighbors().'
            );
        }

        if (requestParameters['rankField'] == null) {
            throw new runtime.RequiredError(
                'rankField',
                'Required parameter "rankField" was null or undefined when calling getClanratingsNeighbors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId'];
        }

        if (requestParameters['rankField'] != null) {
            queryParameters['rank_field'] = requestParameters['rankField'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clanratings/neighbors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClanratingsNeighbors200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of adjacent positions in specified clan rating.
     * Adjacent positions in clan rating
     */
    async getClanratingsNeighbors(requestParameters: GetClanratingsNeighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClanratingsNeighbors200Response> {
        const response = await this.getClanratingsNeighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns the list of top clans by specified parameters.
     * Top Clans
     */
    async getClanratingsTopRaw(requestParameters: GetClanratingsTopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClanratingsTop200Response>> {
        if (requestParameters['rankField'] == null) {
            throw new runtime.RequiredError(
                'rankField',
                'Required parameter "rankField" was null or undefined when calling getClanratingsTop().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['rankField'] != null) {
            queryParameters['rank_field'] = requestParameters['rankField'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clanratings/top/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClanratingsTop200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns the list of top clans by specified parameters.
     * Top Clans
     */
    async getClanratingsTop(requestParameters: GetClanratingsTopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClanratingsTop200Response> {
        const response = await this.getClanratingsTopRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns details on ratings types and categories.
     * Types of ratings
     */
    async getClanratingsTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClanratingsTypes200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/clanratings/types/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClanratingsTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns details on ratings types and categories.
     * Types of ratings
     */
    async getClanratingsTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClanratingsTypes200Response> {
        const response = await this.getClanratingsTypesRaw(initOverrides);
        return await response.value();
    }

}
