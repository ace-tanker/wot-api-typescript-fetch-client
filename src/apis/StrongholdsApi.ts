/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Activateclanreserve200Response,
  GetStrongholdClaninfo200Response,
  GetStrongholdClanreserves200Response,
} from '../models/index.js';
import {
    Activateclanreserve200ResponseFromJSON,
    Activateclanreserve200ResponseToJSON,
    GetStrongholdClaninfo200ResponseFromJSON,
    GetStrongholdClaninfo200ResponseToJSON,
    GetStrongholdClanreserves200ResponseFromJSON,
    GetStrongholdClanreserves200ResponseToJSON,
} from '../models/index.js';

export interface ActivateclanreserveRequest {
    accessToken: string;
    reserveLevel: number;
    reserveType: string;
    fields?: any | null;
    language?: ActivateclanreserveLanguageEnum;
}

export interface GetStrongholdClaninfoRequest {
    clanId: Array<number>;
    fields?: Array<string>;
    language?: GetStrongholdClaninfoLanguageEnum;
}

export interface GetStrongholdClanreservesRequest {
    accessToken: string;
    fields?: Array<string>;
    language?: GetStrongholdClanreservesLanguageEnum;
}

/**
 * 
 */
export class StrongholdsApi extends runtime.BaseAPI {

    /**
     * This method activates an available clan Reserve. A clan Reserve can be activated only by a clan member with the required permission.
     * Activate available clan Reserve
     */
    async activateclanreserveRaw(requestParameters: ActivateclanreserveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activateclanreserve200Response>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling activateclanreserve().'
            );
        }

        if (requestParameters['reserveLevel'] == null) {
            throw new runtime.RequiredError(
                'reserveLevel',
                'Required parameter "reserveLevel" was null or undefined when calling activateclanreserve().'
            );
        }

        if (requestParameters['reserveType'] == null) {
            throw new runtime.RequiredError(
                'reserveType',
                'Required parameter "reserveType" was null or undefined when calling activateclanreserve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['accessToken'] != null) {
            formParams.append('access_token', requestParameters['accessToken'] as any);
        }

        if (requestParameters['reserveLevel'] != null) {
            formParams.append('reserve_level', requestParameters['reserveLevel'] as any);
        }

        if (requestParameters['reserveType'] != null) {
            formParams.append('reserve_type', requestParameters['reserveType'] as any);
        }

        if (requestParameters['fields'] != null) {
            formParams.append('fields', new Blob([JSON.stringify(Activateclanreserve200ResponseToJSON(requestParameters['fields']))], { type: "application/json", }));
                    }

        if (requestParameters['language'] != null) {
            formParams.append('language', requestParameters['language'] as any);
        }


        let urlPath = `/stronghold/activateclanreserve/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Activateclanreserve200ResponseFromJSON(jsonValue));
    }

    /**
     * This method activates an available clan Reserve. A clan Reserve can be activated only by a clan member with the required permission.
     * Activate available clan Reserve
     */
    async activateclanreserve(requestParameters: ActivateclanreserveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activateclanreserve200Response> {
        const response = await this.activateclanreserveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns general information and the battle statistics of clans in the Stronghold mode. Please note that information about the number of battles fought as well as the number of defeats and victories is updated once every 24 hours.
     * Information about the clan\'s Stronghold
     */
    async getStrongholdClaninfoRaw(requestParameters: GetStrongholdClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStrongholdClaninfo200Response>> {
        if (requestParameters['clanId'] == null) {
            throw new runtime.RequiredError(
                'clanId',
                'Required parameter "clanId" was null or undefined when calling getStrongholdClaninfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clanId'] != null) {
            queryParameters['clan_id'] = requestParameters['clanId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/stronghold/claninfo/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStrongholdClaninfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns general information and the battle statistics of clans in the Stronghold mode. Please note that information about the number of battles fought as well as the number of defeats and victories is updated once every 24 hours.
     * Information about the clan\'s Stronghold
     */
    async getStrongholdClaninfo(requestParameters: GetStrongholdClaninfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStrongholdClaninfo200Response> {
        const response = await this.getStrongholdClaninfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about available Reserves and their current status.
     * Clan Reserves
     */
    async getStrongholdClanreservesRaw(requestParameters: GetStrongholdClanreservesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStrongholdClanreserves200Response>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling getStrongholdClanreserves().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/stronghold/clanreserves/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStrongholdClanreserves200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about available Reserves and their current status.
     * Clan Reserves
     */
    async getStrongholdClanreserves(requestParameters: GetStrongholdClanreservesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStrongholdClanreserves200Response> {
        const response = await this.getStrongholdClanreservesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ActivateclanreserveLanguageEnum = {
    En: 'en',
    De: 'de',
    Pl: 'pl',
    Fr: 'fr',
    Es: 'es',
    Cs: 'cs',
    Tr: 'tr'
} as const;
export type ActivateclanreserveLanguageEnum = typeof ActivateclanreserveLanguageEnum[keyof typeof ActivateclanreserveLanguageEnum];
/**
 * @export
 */
export const GetStrongholdClaninfoLanguageEnum = {
    En: 'en',
    De: 'de',
    Pl: 'pl',
    Fr: 'fr',
    Es: 'es',
    Cs: 'cs',
    Tr: 'tr',
    EsAr: 'es-ar',
    PtBr: 'pt-br',
    Ja: 'ja',
    Vi: 'vi',
    Th: 'th',
    Ko: 'ko'
} as const;
export type GetStrongholdClaninfoLanguageEnum = typeof GetStrongholdClaninfoLanguageEnum[keyof typeof GetStrongholdClaninfoLanguageEnum];
/**
 * @export
 */
export const GetStrongholdClanreservesLanguageEnum = {
    En: 'en',
    De: 'de',
    Pl: 'pl',
    Fr: 'fr',
    Es: 'es',
    Cs: 'cs',
    Tr: 'tr',
    EsAr: 'es-ar',
    PtBr: 'pt-br',
    Ja: 'ja',
    Vi: 'vi',
    Th: 'th',
    Ko: 'ko'
} as const;
export type GetStrongholdClanreservesLanguageEnum = typeof GetStrongholdClanreservesLanguageEnum[keyof typeof GetStrongholdClanreservesLanguageEnum];
