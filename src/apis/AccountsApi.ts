/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetAccountAchievements200Response,
  GetAccountInfo200Response,
  GetAccountList200Response,
  GetAccountTanks200Response,
} from '../models/index.js';
import {
    GetAccountAchievements200ResponseFromJSON,
    GetAccountAchievements200ResponseToJSON,
    GetAccountInfo200ResponseFromJSON,
    GetAccountInfo200ResponseToJSON,
    GetAccountList200ResponseFromJSON,
    GetAccountList200ResponseToJSON,
    GetAccountTanks200ResponseFromJSON,
    GetAccountTanks200ResponseToJSON,
} from '../models/index.js';

export interface GetAccountAchievementsRequest {
    accountId: Array<number>;
    fields?: Array<string>;
}

export interface GetAccountInfoRequest {
    accountId: Array<number>;
    accessToken?: string;
    extra?: any;
    fields?: Array<string>;
}

export interface GetAccountListRequest {
    search: string;
    fields?: Array<string>;
    limit?: number;
    type?: GetAccountListTypeEnum;
}

export interface GetAccountTanksRequest {
    accountId: Array<number>;
    accessToken?: string;
    fields?: Array<string>;
    tankId?: Array<number>;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Method returns players\' achievement details.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Player\'s achievements
     */
    async getAccountAchievementsRaw(requestParameters: GetAccountAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountAchievements200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getAccountAchievements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/account/achievements/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountAchievements200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns players\' achievement details.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Player\'s achievements
     */
    async getAccountAchievements(requestParameters: GetAccountAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountAchievements200Response> {
        const response = await this.getAccountAchievementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns player details.
     * Player personal data
     */
    async getAccountInfoRaw(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountInfo200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getAccountInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['extra'] != null) {
            queryParameters['extra'] = requestParameters['extra'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/account/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns player details.
     * Player personal data
     */
    async getAccountInfo(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountInfo200Response> {
        const response = await this.getAccountInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns partial list of players. The list is filtered by initial characters of user name and sorted alphabetically.
     * Players
     */
    async getAccountListRaw(requestParameters: GetAccountListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountList200Response>> {
        if (requestParameters['search'] == null) {
            throw new runtime.RequiredError(
                'search',
                'Required parameter "search" was null or undefined when calling getAccountList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/account/list/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountList200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns partial list of players. The list is filtered by initial characters of user name and sorted alphabetically.
     * Players
     */
    async getAccountList(requestParameters: GetAccountListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountList200Response> {
        const response = await this.getAccountListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns details on player\'s vehicles.
     * Player\'s vehicles
     */
    async getAccountTanksRaw(requestParameters: GetAccountTanksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountTanks200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getAccountTanks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/account/tanks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountTanks200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns details on player\'s vehicles.
     * Player\'s vehicles
     */
    async getAccountTanks(requestParameters: GetAccountTanksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountTanks200Response> {
        const response = await this.getAccountTanksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAccountListTypeEnum = {
    Startswith: 'startswith',
    Exact: 'exact'
} as const;
export type GetAccountListTypeEnum = typeof GetAccountListTypeEnum[keyof typeof GetAccountListTypeEnum];
