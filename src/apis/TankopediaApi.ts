/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetEncyclopediaAchievements200Response,
  GetEncyclopediaArenas200Response,
  GetEncyclopediaBadges200Response,
  GetEncyclopediaBoosters200Response,
  GetEncyclopediaCrewroles200Response,
  GetEncyclopediaCrewskills200Response,
  GetEncyclopediaInfo200Response,
  GetEncyclopediaModules200Response,
  GetEncyclopediaPersonalmissions200Response,
  GetEncyclopediaProvisions200Response,
  GetEncyclopediaVehicleprofile200Response,
  GetEncyclopediaVehicleprofiles200Response,
  GetEncyclopediaVehicles200Response,
} from '../models/index.js';
import {
    GetEncyclopediaAchievements200ResponseFromJSON,
    GetEncyclopediaAchievements200ResponseToJSON,
    GetEncyclopediaArenas200ResponseFromJSON,
    GetEncyclopediaArenas200ResponseToJSON,
    GetEncyclopediaBadges200ResponseFromJSON,
    GetEncyclopediaBadges200ResponseToJSON,
    GetEncyclopediaBoosters200ResponseFromJSON,
    GetEncyclopediaBoosters200ResponseToJSON,
    GetEncyclopediaCrewroles200ResponseFromJSON,
    GetEncyclopediaCrewroles200ResponseToJSON,
    GetEncyclopediaCrewskills200ResponseFromJSON,
    GetEncyclopediaCrewskills200ResponseToJSON,
    GetEncyclopediaInfo200ResponseFromJSON,
    GetEncyclopediaInfo200ResponseToJSON,
    GetEncyclopediaModules200ResponseFromJSON,
    GetEncyclopediaModules200ResponseToJSON,
    GetEncyclopediaPersonalmissions200ResponseFromJSON,
    GetEncyclopediaPersonalmissions200ResponseToJSON,
    GetEncyclopediaProvisions200ResponseFromJSON,
    GetEncyclopediaProvisions200ResponseToJSON,
    GetEncyclopediaVehicleprofile200ResponseFromJSON,
    GetEncyclopediaVehicleprofile200ResponseToJSON,
    GetEncyclopediaVehicleprofiles200ResponseFromJSON,
    GetEncyclopediaVehicleprofiles200ResponseToJSON,
    GetEncyclopediaVehicles200ResponseFromJSON,
    GetEncyclopediaVehicles200ResponseToJSON,
} from '../models/index.js';

export interface GetEncyclopediaAchievementsRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaAchievementsLanguageEnum;
}

export interface GetEncyclopediaArenasRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaArenasLanguageEnum;
}

export interface GetEncyclopediaBadgesRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaBadgesLanguageEnum;
}

export interface GetEncyclopediaBoostersRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaBoostersLanguageEnum;
}

export interface GetEncyclopediaCrewrolesRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaCrewrolesLanguageEnum;
    role?: any;
}

export interface GetEncyclopediaCrewskillsRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaCrewskillsLanguageEnum;
    role?: string;
    skill?: any;
}

export interface GetEncyclopediaInfoRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaInfoLanguageEnum;
}

export interface GetEncyclopediaModulesRequest {
    extra?: any;
    fields?: Array<string>;
    language?: GetEncyclopediaModulesLanguageEnum;
    limit?: number;
    moduleId?: Array<number>;
    nation?: any;
    pageNo?: number;
    type?: any;
}

export interface GetEncyclopediaPersonalmissionsRequest {
    campaignId?: Array<number>;
    fields?: Array<string>;
    language?: GetEncyclopediaPersonalmissionsLanguageEnum;
    operationId?: Array<number>;
    setId?: Array<number>;
    tag?: any;
}

export interface GetEncyclopediaProvisionsRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaProvisionsLanguageEnum;
    limit?: number;
    pageNo?: number;
    provisionId?: Array<number>;
    type?: any;
}

export interface GetEncyclopediaVehicleprofileRequest {
    tankId: number;
    engineId?: number;
    fields?: Array<string>;
    gunId?: number;
    language?: GetEncyclopediaVehicleprofileLanguageEnum;
    profileId?: string;
    radioId?: number;
    suspensionId?: number;
    turretId?: number;
}

export interface GetEncyclopediaVehicleprofilesRequest {
    tankId: number;
    fields?: Array<string>;
    language?: GetEncyclopediaVehicleprofilesLanguageEnum;
    orderBy?: GetEncyclopediaVehicleprofilesOrderByEnum;
}

export interface GetEncyclopediaVehiclesRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaVehiclesLanguageEnum;
    limit?: number;
    nation?: any;
    pageNo?: number;
    tankId?: Array<number>;
    tier?: Array<number>;
    type?: any;
}

/**
 * 
 */
export class TankopediaApi extends runtime.BaseAPI {

    /**
     * Method returns information about achievements.
     * Achievements
     */
    async getEncyclopediaAchievementsRaw(requestParameters: GetEncyclopediaAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaAchievements200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/achievements/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaAchievements200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about achievements.
     * Achievements
     */
    async getEncyclopediaAchievements(requestParameters: GetEncyclopediaAchievementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaAchievements200Response> {
        const response = await this.getEncyclopediaAchievementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about maps.
     * Maps
     */
    async getEncyclopediaArenasRaw(requestParameters: GetEncyclopediaArenasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaArenas200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/arenas/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaArenas200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about maps.
     * Maps
     */
    async getEncyclopediaArenas(requestParameters: GetEncyclopediaArenasRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaArenas200Response> {
        const response = await this.getEncyclopediaArenasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of available badges a player can gain in Ranked Battles.
     * Badges
     */
    async getEncyclopediaBadgesRaw(requestParameters: GetEncyclopediaBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaBadges200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/badges/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaBadges200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of available badges a player can gain in Ranked Battles.
     * Badges
     */
    async getEncyclopediaBadges(requestParameters: GetEncyclopediaBadgesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaBadges200Response> {
        const response = await this.getEncyclopediaBadgesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about Personal Reserves.
     * Personal Reserves
     */
    async getEncyclopediaBoostersRaw(requestParameters: GetEncyclopediaBoostersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaBoosters200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/boosters/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaBoosters200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about Personal Reserves.
     * Personal Reserves
     */
    async getEncyclopediaBoosters(requestParameters: GetEncyclopediaBoostersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaBoosters200Response> {
        const response = await this.getEncyclopediaBoostersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns full description of all crew qualifications.
     * Crew qualifications
     */
    async getEncyclopediaCrewrolesRaw(requestParameters: GetEncyclopediaCrewrolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaCrewroles200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/crewroles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaCrewroles200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns full description of all crew qualifications.
     * Crew qualifications
     */
    async getEncyclopediaCrewroles(requestParameters: GetEncyclopediaCrewrolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaCrewroles200Response> {
        const response = await this.getEncyclopediaCrewrolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns full description of all crew skills.
     * Crew skills
     */
    async getEncyclopediaCrewskillsRaw(requestParameters: GetEncyclopediaCrewskillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaCrewskills200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        if (requestParameters['skill'] != null) {
            queryParameters['skill'] = requestParameters['skill'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/crewskills/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaCrewskills200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns full description of all crew skills.
     * Crew skills
     */
    async getEncyclopediaCrewskills(requestParameters: GetEncyclopediaCrewskillsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaCrewskills200Response> {
        const response = await this.getEncyclopediaCrewskillsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about Tankopedia.
     * Tankopedia information
     */
    async getEncyclopediaInfoRaw(requestParameters: GetEncyclopediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaInfo200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about Tankopedia.
     * Tankopedia information
     */
    async getEncyclopediaInfo(requestParameters: GetEncyclopediaInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaInfo200Response> {
        const response = await this.getEncyclopediaInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of available modules that can be installed on vehicles, such as engines, turrets, etc. At least one input filter parameter (module ID, type) is required to be indicated.
     * Modules
     */
    async getEncyclopediaModulesRaw(requestParameters: GetEncyclopediaModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaModules200Response>> {
        const queryParameters: any = {};

        if (requestParameters['extra'] != null) {
            queryParameters['extra'] = requestParameters['extra'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['moduleId'] != null) {
            queryParameters['module_id'] = requestParameters['moduleId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['nation'] != null) {
            queryParameters['nation'] = requestParameters['nation'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/modules/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaModules200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of available modules that can be installed on vehicles, such as engines, turrets, etc. At least one input filter parameter (module ID, type) is required to be indicated.
     * Modules
     */
    async getEncyclopediaModules(requestParameters: GetEncyclopediaModulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaModules200Response> {
        const response = await this.getEncyclopediaModulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns details on Personal Missions on the basis of specified campaign IDs, operation IDs, mission branch and tag IDs.
     * Personal Missions
     */
    async getEncyclopediaPersonalmissionsRaw(requestParameters: GetEncyclopediaPersonalmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaPersonalmissions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['campaignId'] != null) {
            queryParameters['campaign_id'] = requestParameters['campaignId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['operationId'] != null) {
            queryParameters['operation_id'] = requestParameters['operationId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['setId'] != null) {
            queryParameters['set_id'] = requestParameters['setId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/personalmissions/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaPersonalmissions200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns details on Personal Missions on the basis of specified campaign IDs, operation IDs, mission branch and tag IDs.
     * Personal Missions
     */
    async getEncyclopediaPersonalmissions(requestParameters: GetEncyclopediaPersonalmissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaPersonalmissions200Response> {
        const response = await this.getEncyclopediaPersonalmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns a list of available equipment and consumables.
     * Equipment and Consumables
     */
    async getEncyclopediaProvisionsRaw(requestParameters: GetEncyclopediaProvisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaProvisions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['provisionId'] != null) {
            queryParameters['provision_id'] = requestParameters['provisionId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/provisions/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaProvisions200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns a list of available equipment and consumables.
     * Equipment and Consumables
     */
    async getEncyclopediaProvisions(requestParameters: GetEncyclopediaProvisionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaProvisions200Response> {
        const response = await this.getEncyclopediaProvisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns vehicle configuration characteristics based on the specified module IDs.
     * Vehicle characteristics
     */
    async getEncyclopediaVehicleprofileRaw(requestParameters: GetEncyclopediaVehicleprofileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaVehicleprofile200Response>> {
        if (requestParameters['tankId'] == null) {
            throw new runtime.RequiredError(
                'tankId',
                'Required parameter "tankId" was null or undefined when calling getEncyclopediaVehicleprofile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId'];
        }

        if (requestParameters['engineId'] != null) {
            queryParameters['engine_id'] = requestParameters['engineId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['gunId'] != null) {
            queryParameters['gun_id'] = requestParameters['gunId'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['profileId'] != null) {
            queryParameters['profile_id'] = requestParameters['profileId'];
        }

        if (requestParameters['radioId'] != null) {
            queryParameters['radio_id'] = requestParameters['radioId'];
        }

        if (requestParameters['suspensionId'] != null) {
            queryParameters['suspension_id'] = requestParameters['suspensionId'];
        }

        if (requestParameters['turretId'] != null) {
            queryParameters['turret_id'] = requestParameters['turretId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/vehicleprofile/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaVehicleprofile200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns vehicle configuration characteristics based on the specified module IDs.
     * Vehicle characteristics
     */
    async getEncyclopediaVehicleprofile(requestParameters: GetEncyclopediaVehicleprofileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaVehicleprofile200Response> {
        const response = await this.getEncyclopediaVehicleprofileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns vehicle configuration characteristics.
     * Vehicle configurations
     */
    async getEncyclopediaVehicleprofilesRaw(requestParameters: GetEncyclopediaVehicleprofilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaVehicleprofiles200Response>> {
        if (requestParameters['tankId'] == null) {
            throw new runtime.RequiredError(
                'tankId',
                'Required parameter "tankId" was null or undefined when calling getEncyclopediaVehicleprofiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/vehicleprofiles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaVehicleprofiles200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns vehicle configuration characteristics.
     * Vehicle configurations
     */
    async getEncyclopediaVehicleprofiles(requestParameters: GetEncyclopediaVehicleprofilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaVehicleprofiles200Response> {
        const response = await this.getEncyclopediaVehicleprofilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of available vehicles.
     * Vehicles
     */
    async getEncyclopediaVehiclesRaw(requestParameters: GetEncyclopediaVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEncyclopediaVehicles200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['nation'] != null) {
            queryParameters['nation'] = requestParameters['nation'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['page_no'] = requestParameters['pageNo'];
        }

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tier'] != null) {
            queryParameters['tier'] = requestParameters['tier']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/vehicles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEncyclopediaVehicles200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of available vehicles.
     * Vehicles
     */
    async getEncyclopediaVehicles(requestParameters: GetEncyclopediaVehiclesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEncyclopediaVehicles200Response> {
        const response = await this.getEncyclopediaVehiclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetEncyclopediaAchievementsLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaAchievementsLanguageEnum = typeof GetEncyclopediaAchievementsLanguageEnum[keyof typeof GetEncyclopediaAchievementsLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaArenasLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaArenasLanguageEnum = typeof GetEncyclopediaArenasLanguageEnum[keyof typeof GetEncyclopediaArenasLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaBadgesLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaBadgesLanguageEnum = typeof GetEncyclopediaBadgesLanguageEnum[keyof typeof GetEncyclopediaBadgesLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaBoostersLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaBoostersLanguageEnum = typeof GetEncyclopediaBoostersLanguageEnum[keyof typeof GetEncyclopediaBoostersLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaCrewrolesLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaCrewrolesLanguageEnum = typeof GetEncyclopediaCrewrolesLanguageEnum[keyof typeof GetEncyclopediaCrewrolesLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaCrewskillsLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaCrewskillsLanguageEnum = typeof GetEncyclopediaCrewskillsLanguageEnum[keyof typeof GetEncyclopediaCrewskillsLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaInfoLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaInfoLanguageEnum = typeof GetEncyclopediaInfoLanguageEnum[keyof typeof GetEncyclopediaInfoLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaModulesLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaModulesLanguageEnum = typeof GetEncyclopediaModulesLanguageEnum[keyof typeof GetEncyclopediaModulesLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaPersonalmissionsLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaPersonalmissionsLanguageEnum = typeof GetEncyclopediaPersonalmissionsLanguageEnum[keyof typeof GetEncyclopediaPersonalmissionsLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaProvisionsLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaProvisionsLanguageEnum = typeof GetEncyclopediaProvisionsLanguageEnum[keyof typeof GetEncyclopediaProvisionsLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaVehicleprofileLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaVehicleprofileLanguageEnum = typeof GetEncyclopediaVehicleprofileLanguageEnum[keyof typeof GetEncyclopediaVehicleprofileLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaVehicleprofilesLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaVehicleprofilesLanguageEnum = typeof GetEncyclopediaVehicleprofilesLanguageEnum[keyof typeof GetEncyclopediaVehicleprofilesLanguageEnum];
/**
 * @export
 */
export const GetEncyclopediaVehicleprofilesOrderByEnum = {
    PriceCredit: 'price_credit',
    PriceCredit2: '-price_credit'
} as const;
export type GetEncyclopediaVehicleprofilesOrderByEnum = typeof GetEncyclopediaVehicleprofilesOrderByEnum[keyof typeof GetEncyclopediaVehicleprofilesOrderByEnum];
/**
 * @export
 */
export const GetEncyclopediaVehiclesLanguageEnum = {
    En: 'en',
    Ru: 'ru',
    Pl: 'pl',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    ZhCn: 'zh-cn',
    ZhTw: 'zh-tw',
    Tr: 'tr',
    Cs: 'cs',
    Th: 'th',
    Vi: 'vi',
    Ko: 'ko'
} as const;
export type GetEncyclopediaVehiclesLanguageEnum = typeof GetEncyclopediaVehiclesLanguageEnum[keyof typeof GetEncyclopediaVehiclesLanguageEnum];
