/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  EncyclopediaAchievementsResponse,
  EncyclopediaArenasResponse,
  EncyclopediaBadgesResponse,
  EncyclopediaBoostersResponse,
  EncyclopediaCrewrolesResponse,
  EncyclopediaCrewskillsResponse,
  EncyclopediaInfoResponse,
  EncyclopediaModulesResponse,
  EncyclopediaPersonalmissionsResponse,
  EncyclopediaProvisionsResponse,
  EncyclopediaVehicleprofileResponse,
  EncyclopediaVehicleprofilesResponse,
  EncyclopediaVehiclesResponse,
} from '../models/index.js';
import {
    EncyclopediaAchievementsResponseFromJSON,
    EncyclopediaAchievementsResponseToJSON,
    EncyclopediaArenasResponseFromJSON,
    EncyclopediaArenasResponseToJSON,
    EncyclopediaBadgesResponseFromJSON,
    EncyclopediaBadgesResponseToJSON,
    EncyclopediaBoostersResponseFromJSON,
    EncyclopediaBoostersResponseToJSON,
    EncyclopediaCrewrolesResponseFromJSON,
    EncyclopediaCrewrolesResponseToJSON,
    EncyclopediaCrewskillsResponseFromJSON,
    EncyclopediaCrewskillsResponseToJSON,
    EncyclopediaInfoResponseFromJSON,
    EncyclopediaInfoResponseToJSON,
    EncyclopediaModulesResponseFromJSON,
    EncyclopediaModulesResponseToJSON,
    EncyclopediaPersonalmissionsResponseFromJSON,
    EncyclopediaPersonalmissionsResponseToJSON,
    EncyclopediaProvisionsResponseFromJSON,
    EncyclopediaProvisionsResponseToJSON,
    EncyclopediaVehicleprofileResponseFromJSON,
    EncyclopediaVehicleprofileResponseToJSON,
    EncyclopediaVehicleprofilesResponseFromJSON,
    EncyclopediaVehicleprofilesResponseToJSON,
    EncyclopediaVehiclesResponseFromJSON,
    EncyclopediaVehiclesResponseToJSON,
} from '../models/index.js';

export interface GetEncyclopediaAchievementsRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaAchievementsLanguageEnum;
}

export interface GetEncyclopediaArenasRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaArenasLanguageEnum;
}

export interface GetEncyclopediaBadgesRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaBadgesLanguageEnum;
}

export interface GetEncyclopediaBoostersRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaBoostersLanguageEnum;
}

export interface GetEncyclopediaCrewrolesRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaCrewrolesLanguageEnum;
    role?: Array<string>;
}

export interface GetEncyclopediaCrewskillsRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaCrewskillsLanguageEnum;
    role?: string;
    skill?: Array<string>;
}

export interface GetEncyclopediaInfoRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaInfoLanguageEnum;
}

export interface GetEncyclopediaModulesRequest {
    extra?: Array<GetEncyclopediaModulesExtraEnum>;
    fields?: Array<string>;
    language?: GetEncyclopediaModulesLanguageEnum;
    limit?: number;
    module_id?: Array<number>;
    nation?: Array<string>;
    page_no?: number;
    type?: Array<GetEncyclopediaModulesTypeEnum>;
}

export interface GetEncyclopediaPersonalmissionsRequest {
    campaign_id?: Array<number>;
    fields?: Array<string>;
    language?: GetEncyclopediaPersonalmissionsLanguageEnum;
    operation_id?: Array<number>;
    set_id?: Array<number>;
    tag?: Array<string>;
}

export interface GetEncyclopediaProvisionsRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaProvisionsLanguageEnum;
    limit?: number;
    page_no?: number;
    provision_id?: Array<number>;
    type?: Array<GetEncyclopediaProvisionsTypeEnum>;
}

export interface GetEncyclopediaVehicleprofileRequest {
    tank_id: number;
    engine_id?: number;
    fields?: Array<string>;
    gun_id?: number;
    language?: GetEncyclopediaVehicleprofileLanguageEnum;
    profile_id?: string;
    radio_id?: number;
    suspension_id?: number;
    turret_id?: number;
}

export interface GetEncyclopediaVehicleprofilesRequest {
    tank_id: number;
    fields?: Array<string>;
    language?: GetEncyclopediaVehicleprofilesLanguageEnum;
    order_by?: GetEncyclopediaVehicleprofilesOrderByEnum;
}

export interface GetEncyclopediaVehiclesRequest {
    fields?: Array<string>;
    language?: GetEncyclopediaVehiclesLanguageEnum;
    limit?: number;
    nation?: Array<string>;
    page_no?: number;
    tank_id?: Array<number>;
    tier?: Array<number>;
    type?: Array<GetEncyclopediaVehiclesTypeEnum>;
}

/**
 * TankopediaApi - interface
 * 
 * @export
 * @interface TankopediaApiInterface
 */
export interface TankopediaApiInterface {
    /**
     * Method returns information about achievements.
     * @summary Achievements
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaAchievementsRaw(requestParameters: GetEncyclopediaAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaAchievementsResponse>>;

    /**
     * Method returns information about achievements.
     * Achievements
     */
    getEncyclopediaAchievements(requestParameters: GetEncyclopediaAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaAchievementsResponse>;

    /**
     * Method returns information about maps.
     * @summary Maps
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaArenasRaw(requestParameters: GetEncyclopediaArenasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaArenasResponse>>;

    /**
     * Method returns information about maps.
     * Maps
     */
    getEncyclopediaArenas(requestParameters: GetEncyclopediaArenasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaArenasResponse>;

    /**
     * Method returns list of available badges a player can gain in Ranked Battles.
     * @summary Badges
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaBadgesRaw(requestParameters: GetEncyclopediaBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaBadgesResponse>>;

    /**
     * Method returns list of available badges a player can gain in Ranked Battles.
     * Badges
     */
    getEncyclopediaBadges(requestParameters: GetEncyclopediaBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaBadgesResponse>;

    /**
     * Method returns information about Personal Reserves.
     * @summary Personal Reserves
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaBoostersRaw(requestParameters: GetEncyclopediaBoostersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaBoostersResponse>>;

    /**
     * Method returns information about Personal Reserves.
     * Personal Reserves
     */
    getEncyclopediaBoosters(requestParameters: GetEncyclopediaBoostersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaBoostersResponse>;

    /**
     * Method returns full description of all crew qualifications.
     * @summary Crew qualifications
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {Array<string>} [role] Сrew qualification ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaCrewrolesRaw(requestParameters: GetEncyclopediaCrewrolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaCrewrolesResponse>>;

    /**
     * Method returns full description of all crew qualifications.
     * Crew qualifications
     */
    getEncyclopediaCrewroles(requestParameters: GetEncyclopediaCrewrolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaCrewrolesResponse>;

    /**
     * Method returns full description of all crew skills.
     * @summary Crew skills
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {string} [role] Сrew qualification ID
     * @param {Array<string>} [skill] Skill ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaCrewskillsRaw(requestParameters: GetEncyclopediaCrewskillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaCrewskillsResponse>>;

    /**
     * Method returns full description of all crew skills.
     * Crew skills
     */
    getEncyclopediaCrewskills(requestParameters: GetEncyclopediaCrewskillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaCrewskillsResponse>;

    /**
     * Method returns information about Tankopedia.
     * @summary Tankopedia information
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaInfoRaw(requestParameters: GetEncyclopediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaInfoResponse>>;

    /**
     * Method returns information about Tankopedia.
     * Tankopedia information
     */
    getEncyclopediaInfo(requestParameters: GetEncyclopediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaInfoResponse>;

    /**
     * Method returns list of available modules that can be installed on vehicles, such as engines, turrets, etc. At least one input filter parameter (module ID, type) is required to be indicated.
     * @summary Modules
     * @param {Array<'default_profile'>} [extra] Extra fields that will be added to the response.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {number} [limit] Number of returned entries.
     * @param {Array<number>} [module_id] Module ID.
     * @param {Array<string>} [nation] Nation.
     * @param {number} [page_no] Result page number
     * @param {Array<'vehicleRadio' | 'vehicleEngine' | 'vehicleGun' | 'vehicleChassis' | 'vehicleTurret'>} [type] Module type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaModulesRaw(requestParameters: GetEncyclopediaModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaModulesResponse>>;

    /**
     * Method returns list of available modules that can be installed on vehicles, such as engines, turrets, etc. At least one input filter parameter (module ID, type) is required to be indicated.
     * Modules
     */
    getEncyclopediaModules(requestParameters: GetEncyclopediaModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaModulesResponse>;

    /**
     * Method returns details on Personal Missions on the basis of specified campaign IDs, operation IDs, mission branch and tag IDs.
     * @summary Personal Missions
     * @param {Array<number>} [campaign_id] Campaign ID.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {Array<number>} [operation_id] Operation ID.
     * @param {Array<number>} [set_id] Mission branch ID.
     * @param {Array<string>} [tag] Mission tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaPersonalmissionsRaw(requestParameters: GetEncyclopediaPersonalmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaPersonalmissionsResponse>>;

    /**
     * Method returns details on Personal Missions on the basis of specified campaign IDs, operation IDs, mission branch and tag IDs.
     * Personal Missions
     */
    getEncyclopediaPersonalmissions(requestParameters: GetEncyclopediaPersonalmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaPersonalmissionsResponse>;

    /**
     * Method returns a list of available equipment and consumables.
     * @summary Equipment and Consumables
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {number} [limit] Number of returned entries.
     * @param {number} [page_no] Result page number
     * @param {Array<number>} [provision_id] Equipment or consumables ID.
     * @param {Array<'equipment' | 'optionalDevice'>} [type] Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaProvisionsRaw(requestParameters: GetEncyclopediaProvisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaProvisionsResponse>>;

    /**
     * Method returns a list of available equipment and consumables.
     * Equipment and Consumables
     */
    getEncyclopediaProvisions(requestParameters: GetEncyclopediaProvisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaProvisionsResponse>;

    /**
     * Method returns vehicle configuration characteristics based on the specified module IDs.
     * @summary Vehicle characteristics
     * @param {number} tank_id Vehicle ID
     * @param {number} [engine_id] Engine ID. If module is not specified, standard module is used by default.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {number} [gun_id] Gun ID. If module is not specified, standard module is used by default.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {string} [profile_id] Configuration ID. If specified, parameters of IDs of separate modules are ignored.
     * @param {number} [radio_id] Radio ID. If module is not specified, standard module is used by default.
     * @param {number} [suspension_id] Suspension ID. If module is not specified, standard module is used by default.
     * @param {number} [turret_id] Turret ID. If module is not specified, standard module is used by default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaVehicleprofileRaw(requestParameters: GetEncyclopediaVehicleprofileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaVehicleprofileResponse>>;

    /**
     * Method returns vehicle configuration characteristics based on the specified module IDs.
     * Vehicle characteristics
     */
    getEncyclopediaVehicleprofile(requestParameters: GetEncyclopediaVehicleprofileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaVehicleprofileResponse>;

    /**
     * Method returns vehicle configuration characteristics.
     * @summary Vehicle configurations
     * @param {number} tank_id Vehicle ID
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {'price_credit' | '-price_credit'} [order_by] Sorting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaVehicleprofilesRaw(requestParameters: GetEncyclopediaVehicleprofilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaVehicleprofilesResponse>>;

    /**
     * Method returns vehicle configuration characteristics.
     * Vehicle configurations
     */
    getEncyclopediaVehicleprofiles(requestParameters: GetEncyclopediaVehicleprofilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaVehicleprofilesResponse>;

    /**
     * Method returns list of available vehicles.
     * @summary Vehicles
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'en' | 'ru' | 'pl' | 'de' | 'fr' | 'es' | 'zh-cn' | 'zh-tw' | 'tr' | 'cs' | 'th' | 'vi' | 'ko'} [language] Localization language.
     * @param {number} [limit] Number of returned entries.
     * @param {Array<string>} [nation] Nation.
     * @param {number} [page_no] Result page number
     * @param {Array<number>} [tank_id] Vehicle ID.
     * @param {Array<number>} [tier] Tier.
     * @param {Array<'heavyTank' | 'AT-SPG' | 'mediumTank' | 'lightTank' | 'SPG'>} [type] Vehicle type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TankopediaApiInterface
     */
    getEncyclopediaVehiclesRaw(requestParameters: GetEncyclopediaVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaVehiclesResponse>>;

    /**
     * Method returns list of available vehicles.
     * Vehicles
     */
    getEncyclopediaVehicles(requestParameters: GetEncyclopediaVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaVehiclesResponse>;

}

/**
 * 
 */
export class TankopediaApi extends runtime.BaseAPI implements TankopediaApiInterface {

    /**
     * Method returns information about achievements.
     * Achievements
     */
    async getEncyclopediaAchievementsRaw(requestParameters: GetEncyclopediaAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaAchievementsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/achievements/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaAchievementsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about achievements.
     * Achievements
     */
    async getEncyclopediaAchievements(requestParameters: GetEncyclopediaAchievementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaAchievementsResponse> {
        const response = await this.getEncyclopediaAchievementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about maps.
     * Maps
     */
    async getEncyclopediaArenasRaw(requestParameters: GetEncyclopediaArenasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaArenasResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/arenas/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaArenasResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about maps.
     * Maps
     */
    async getEncyclopediaArenas(requestParameters: GetEncyclopediaArenasRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaArenasResponse> {
        const response = await this.getEncyclopediaArenasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of available badges a player can gain in Ranked Battles.
     * Badges
     */
    async getEncyclopediaBadgesRaw(requestParameters: GetEncyclopediaBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaBadgesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/badges/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaBadgesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of available badges a player can gain in Ranked Battles.
     * Badges
     */
    async getEncyclopediaBadges(requestParameters: GetEncyclopediaBadgesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaBadgesResponse> {
        const response = await this.getEncyclopediaBadgesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about Personal Reserves.
     * Personal Reserves
     */
    async getEncyclopediaBoostersRaw(requestParameters: GetEncyclopediaBoostersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaBoostersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/boosters/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaBoostersResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about Personal Reserves.
     * Personal Reserves
     */
    async getEncyclopediaBoosters(requestParameters: GetEncyclopediaBoostersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaBoostersResponse> {
        const response = await this.getEncyclopediaBoostersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns full description of all crew qualifications.
     * Crew qualifications
     */
    async getEncyclopediaCrewrolesRaw(requestParameters: GetEncyclopediaCrewrolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaCrewrolesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/crewroles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaCrewrolesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns full description of all crew qualifications.
     * Crew qualifications
     */
    async getEncyclopediaCrewroles(requestParameters: GetEncyclopediaCrewrolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaCrewrolesResponse> {
        const response = await this.getEncyclopediaCrewrolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns full description of all crew skills.
     * Crew skills
     */
    async getEncyclopediaCrewskillsRaw(requestParameters: GetEncyclopediaCrewskillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaCrewskillsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        if (requestParameters['skill'] != null) {
            queryParameters['skill'] = requestParameters['skill']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/crewskills/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaCrewskillsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns full description of all crew skills.
     * Crew skills
     */
    async getEncyclopediaCrewskills(requestParameters: GetEncyclopediaCrewskillsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaCrewskillsResponse> {
        const response = await this.getEncyclopediaCrewskillsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns information about Tankopedia.
     * Tankopedia information
     */
    async getEncyclopediaInfoRaw(requestParameters: GetEncyclopediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaInfoResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaInfoResponseFromJSON(jsonValue));
    }

    /**
     * Method returns information about Tankopedia.
     * Tankopedia information
     */
    async getEncyclopediaInfo(requestParameters: GetEncyclopediaInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaInfoResponse> {
        const response = await this.getEncyclopediaInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of available modules that can be installed on vehicles, such as engines, turrets, etc. At least one input filter parameter (module ID, type) is required to be indicated.
     * Modules
     */
    async getEncyclopediaModulesRaw(requestParameters: GetEncyclopediaModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaModulesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['extra'] != null) {
            queryParameters['extra'] = requestParameters['extra']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['module_id'] != null) {
            queryParameters['module_id'] = requestParameters['module_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['nation'] != null) {
            queryParameters['nation'] = requestParameters['nation']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/modules/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaModulesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of available modules that can be installed on vehicles, such as engines, turrets, etc. At least one input filter parameter (module ID, type) is required to be indicated.
     * Modules
     */
    async getEncyclopediaModules(requestParameters: GetEncyclopediaModulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaModulesResponse> {
        const response = await this.getEncyclopediaModulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns details on Personal Missions on the basis of specified campaign IDs, operation IDs, mission branch and tag IDs.
     * Personal Missions
     */
    async getEncyclopediaPersonalmissionsRaw(requestParameters: GetEncyclopediaPersonalmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaPersonalmissionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['campaign_id'] != null) {
            queryParameters['campaign_id'] = requestParameters['campaign_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['operation_id'] != null) {
            queryParameters['operation_id'] = requestParameters['operation_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['set_id'] != null) {
            queryParameters['set_id'] = requestParameters['set_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/personalmissions/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaPersonalmissionsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns details on Personal Missions on the basis of specified campaign IDs, operation IDs, mission branch and tag IDs.
     * Personal Missions
     */
    async getEncyclopediaPersonalmissions(requestParameters: GetEncyclopediaPersonalmissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaPersonalmissionsResponse> {
        const response = await this.getEncyclopediaPersonalmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns a list of available equipment and consumables.
     * Equipment and Consumables
     */
    async getEncyclopediaProvisionsRaw(requestParameters: GetEncyclopediaProvisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaProvisionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        if (requestParameters['provision_id'] != null) {
            queryParameters['provision_id'] = requestParameters['provision_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/provisions/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaProvisionsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns a list of available equipment and consumables.
     * Equipment and Consumables
     */
    async getEncyclopediaProvisions(requestParameters: GetEncyclopediaProvisionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaProvisionsResponse> {
        const response = await this.getEncyclopediaProvisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns vehicle configuration characteristics based on the specified module IDs.
     * Vehicle characteristics
     */
    async getEncyclopediaVehicleprofileRaw(requestParameters: GetEncyclopediaVehicleprofileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaVehicleprofileResponse>> {
        if (requestParameters['tank_id'] == null) {
            throw new runtime.RequiredError(
                'tank_id',
                'Required parameter "tank_id" was null or undefined when calling getEncyclopediaVehicleprofile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tank_id'] != null) {
            queryParameters['tank_id'] = requestParameters['tank_id'];
        }

        if (requestParameters['engine_id'] != null) {
            queryParameters['engine_id'] = requestParameters['engine_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['gun_id'] != null) {
            queryParameters['gun_id'] = requestParameters['gun_id'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['profile_id'] != null) {
            queryParameters['profile_id'] = requestParameters['profile_id'];
        }

        if (requestParameters['radio_id'] != null) {
            queryParameters['radio_id'] = requestParameters['radio_id'];
        }

        if (requestParameters['suspension_id'] != null) {
            queryParameters['suspension_id'] = requestParameters['suspension_id'];
        }

        if (requestParameters['turret_id'] != null) {
            queryParameters['turret_id'] = requestParameters['turret_id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/vehicleprofile/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaVehicleprofileResponseFromJSON(jsonValue));
    }

    /**
     * Method returns vehicle configuration characteristics based on the specified module IDs.
     * Vehicle characteristics
     */
    async getEncyclopediaVehicleprofile(requestParameters: GetEncyclopediaVehicleprofileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaVehicleprofileResponse> {
        const response = await this.getEncyclopediaVehicleprofileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns vehicle configuration characteristics.
     * Vehicle configurations
     */
    async getEncyclopediaVehicleprofilesRaw(requestParameters: GetEncyclopediaVehicleprofilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaVehicleprofilesResponse>> {
        if (requestParameters['tank_id'] == null) {
            throw new runtime.RequiredError(
                'tank_id',
                'Required parameter "tank_id" was null or undefined when calling getEncyclopediaVehicleprofiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tank_id'] != null) {
            queryParameters['tank_id'] = requestParameters['tank_id'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['order_by'] != null) {
            queryParameters['order_by'] = requestParameters['order_by'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/vehicleprofiles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaVehicleprofilesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns vehicle configuration characteristics.
     * Vehicle configurations
     */
    async getEncyclopediaVehicleprofiles(requestParameters: GetEncyclopediaVehicleprofilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaVehicleprofilesResponse> {
        const response = await this.getEncyclopediaVehicleprofilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns list of available vehicles.
     * Vehicles
     */
    async getEncyclopediaVehiclesRaw(requestParameters: GetEncyclopediaVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncyclopediaVehiclesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['nation'] != null) {
            queryParameters['nation'] = requestParameters['nation']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page_no'] != null) {
            queryParameters['page_no'] = requestParameters['page_no'];
        }

        if (requestParameters['tank_id'] != null) {
            queryParameters['tank_id'] = requestParameters['tank_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tier'] != null) {
            queryParameters['tier'] = requestParameters['tier']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/encyclopedia/vehicles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncyclopediaVehiclesResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of available vehicles.
     * Vehicles
     */
    async getEncyclopediaVehicles(requestParameters: GetEncyclopediaVehiclesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncyclopediaVehiclesResponse> {
        const response = await this.getEncyclopediaVehiclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaAchievementsLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaArenasLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaBadgesLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaBoostersLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaCrewrolesLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaCrewskillsLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaInfoLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaModulesExtraEnum {
    DefaultProfile = 'default_profile'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaModulesLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaModulesTypeEnum {
    VehicleRadio = 'vehicleRadio',
    VehicleEngine = 'vehicleEngine',
    VehicleGun = 'vehicleGun',
    VehicleChassis = 'vehicleChassis',
    VehicleTurret = 'vehicleTurret'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaPersonalmissionsLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaProvisionsLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaProvisionsTypeEnum {
    Equipment = 'equipment',
    OptionalDevice = 'optionalDevice'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaVehicleprofileLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaVehicleprofilesLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaVehicleprofilesOrderByEnum {
    PriceCredit = 'price_credit',
    MinusPriceCredit = '-price_credit'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaVehiclesLanguageEnum {
    En = 'en',
    Ru = 'ru',
    Pl = 'pl',
    De = 'de',
    Fr = 'fr',
    Es = 'es',
    ZhMinusCn = 'zh-cn',
    ZhMinusTw = 'zh-tw',
    Tr = 'tr',
    Cs = 'cs',
    Th = 'th',
    Vi = 'vi',
    Ko = 'ko'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEncyclopediaVehiclesTypeEnum {
    HeavyTank = 'heavyTank',
    AtMinusSpg = 'AT-SPG',
    MediumTank = 'mediumTank',
    LightTank = 'lightTank',
    Spg = 'SPG'
}
