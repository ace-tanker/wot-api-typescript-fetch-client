/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  TanksAchievementsResponse,
  TanksMasteryResponse,
  TanksStatsResponse,
} from '../models/index.js';
import {
    TanksAchievementsResponseFromJSON,
    TanksAchievementsResponseToJSON,
    TanksMasteryResponseFromJSON,
    TanksMasteryResponseToJSON,
    TanksStatsResponseFromJSON,
    TanksStatsResponseToJSON,
} from '../models/index.js';

export interface GetTanksAchievementsRequest {
    account_id: number;
    access_token?: string;
    fields?: Array<string>;
    in_garage?: GetTanksAchievementsInGarageEnum;
    tank_id?: Array<number>;
}

export interface GetTanksMasteryRequest {
    distribution: GetTanksMasteryDistributionEnum;
    percentile: Array<number>;
    fields?: Array<string>;
    tank_id?: Array<number>;
}

export interface GetTanksStatsRequest {
    account_id: number;
    access_token?: string;
    extra?: Array<GetTanksStatsExtraEnum>;
    fields?: Array<string>;
    in_garage?: GetTanksStatsInGarageEnum;
    tank_id?: Array<number>;
}

/**
 * PlayersVehiclesApi - interface
 * 
 * @export
 * @interface PlayersVehiclesApiInterface
 */
export interface PlayersVehiclesApiInterface {
    /**
     * Method returns list of achievements on all player\'s vehicles.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * @summary Vehicle achievements
     * @param {number} account_id Player account ID
     * @param {string} [access_token] [Access token](https://developers.wargaming.net/documentation/guide/principles/#access_token) for the private data of a user\&#39;s account; can be received via the authorization method; valid within a stated time period
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'1' | '0'} [in_garage] Filter by vehicle availability in the Garage. If the parameter is not specified, all vehicles are returned. Parameter processing requires a valid access_token for the specified account_id.
     * @param {Array<number>} [tank_id] Player\&#39;s vehicle ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersVehiclesApiInterface
     */
    getTanksAchievementsRaw(requestParameters: GetTanksAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TanksAchievementsResponse>>;

    /**
     * Method returns list of achievements on all player\'s vehicles.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Vehicle achievements
     */
    getTanksAchievements(requestParameters: GetTanksAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TanksAchievementsResponse>;

    /**
     * The method returns percentiles of the distribution of average damage or experience values for each piece of equipment
     * @summary Vehicle mastery distribution
     * @param {'damage' | 'xp'} distribution Type of data.
     * @param {Array<number>} percentile A list of percentiles to be included in the response.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {Array<number>} [tank_id] Player\&#39;s vehicle ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersVehiclesApiInterface
     */
    getTanksMasteryRaw(requestParameters: GetTanksMasteryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TanksMasteryResponse>>;

    /**
     * The method returns percentiles of the distribution of average damage or experience values for each piece of equipment
     * Vehicle mastery distribution
     */
    getTanksMastery(requestParameters: GetTanksMasteryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TanksMasteryResponse>;

    /**
     * Method returns overall statistics, Tank Company statistics, and clan statistics per each vehicle for each user.
     * @summary Vehicle statistics
     * @param {number} account_id Player account ID
     * @param {string} [access_token] [Access token](https://developers.wargaming.net/documentation/guide/principles/#access_token) for the private data of a user\&#39;s account; can be received via the authorization method; valid within a stated time period
     * @param {Array<'epic' | 'fallout' | 'random' | 'ranked_10x10' | 'ranked_battles'>} [extra] Extra fields that will be added to the response.
     * @param {Array<string>} [fields] Response field. Embedded fields are separated with dots. To exclude a field, use “-” in front of its name. In case the parameter is not defined, the method returns all fields.
     * @param {'1' | '0'} [in_garage] Filter by vehicle availability in the Garage. If the parameter is not specified, all vehicles are returned. Parameter processing requires a valid access_token for the specified account_id.
     * @param {Array<number>} [tank_id] Player\&#39;s vehicle ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersVehiclesApiInterface
     */
    getTanksStatsRaw(requestParameters: GetTanksStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TanksStatsResponse>>;

    /**
     * Method returns overall statistics, Tank Company statistics, and clan statistics per each vehicle for each user.
     * Vehicle statistics
     */
    getTanksStats(requestParameters: GetTanksStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TanksStatsResponse>;

}

/**
 * 
 */
export class PlayersVehiclesApi extends runtime.BaseAPI implements PlayersVehiclesApiInterface {

    /**
     * Method returns list of achievements on all player\'s vehicles.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Vehicle achievements
     */
    async getTanksAchievementsRaw(requestParameters: GetTanksAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TanksAchievementsResponse>> {
        if (requestParameters['account_id'] == null) {
            throw new runtime.RequiredError(
                'account_id',
                'Required parameter "account_id" was null or undefined when calling getTanksAchievements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['account_id'] != null) {
            queryParameters['account_id'] = requestParameters['account_id'];
        }

        if (requestParameters['access_token'] != null) {
            queryParameters['access_token'] = requestParameters['access_token'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['in_garage'] != null) {
            queryParameters['in_garage'] = requestParameters['in_garage'];
        }

        if (requestParameters['tank_id'] != null) {
            queryParameters['tank_id'] = requestParameters['tank_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/tanks/achievements/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TanksAchievementsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of achievements on all player\'s vehicles.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Vehicle achievements
     */
    async getTanksAchievements(requestParameters: GetTanksAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TanksAchievementsResponse> {
        const response = await this.getTanksAchievementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method returns percentiles of the distribution of average damage or experience values for each piece of equipment
     * Vehicle mastery distribution
     */
    async getTanksMasteryRaw(requestParameters: GetTanksMasteryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TanksMasteryResponse>> {
        if (requestParameters['distribution'] == null) {
            throw new runtime.RequiredError(
                'distribution',
                'Required parameter "distribution" was null or undefined when calling getTanksMastery().'
            );
        }

        if (requestParameters['percentile'] == null) {
            throw new runtime.RequiredError(
                'percentile',
                'Required parameter "percentile" was null or undefined when calling getTanksMastery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['distribution'] != null) {
            queryParameters['distribution'] = requestParameters['distribution'];
        }

        if (requestParameters['percentile'] != null) {
            queryParameters['percentile'] = requestParameters['percentile']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tank_id'] != null) {
            queryParameters['tank_id'] = requestParameters['tank_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/tanks/mastery/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TanksMasteryResponseFromJSON(jsonValue));
    }

    /**
     * The method returns percentiles of the distribution of average damage or experience values for each piece of equipment
     * Vehicle mastery distribution
     */
    async getTanksMastery(requestParameters: GetTanksMasteryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TanksMasteryResponse> {
        const response = await this.getTanksMasteryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns overall statistics, Tank Company statistics, and clan statistics per each vehicle for each user.
     * Vehicle statistics
     */
    async getTanksStatsRaw(requestParameters: GetTanksStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TanksStatsResponse>> {
        if (requestParameters['account_id'] == null) {
            throw new runtime.RequiredError(
                'account_id',
                'Required parameter "account_id" was null or undefined when calling getTanksStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['account_id'] != null) {
            queryParameters['account_id'] = requestParameters['account_id'];
        }

        if (requestParameters['access_token'] != null) {
            queryParameters['access_token'] = requestParameters['access_token'];
        }

        if (requestParameters['extra'] != null) {
            queryParameters['extra'] = requestParameters['extra']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['in_garage'] != null) {
            queryParameters['in_garage'] = requestParameters['in_garage'];
        }

        if (requestParameters['tank_id'] != null) {
            queryParameters['tank_id'] = requestParameters['tank_id']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/tanks/stats/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TanksStatsResponseFromJSON(jsonValue));
    }

    /**
     * Method returns overall statistics, Tank Company statistics, and clan statistics per each vehicle for each user.
     * Vehicle statistics
     */
    async getTanksStats(requestParameters: GetTanksStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TanksStatsResponse> {
        const response = await this.getTanksStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetTanksAchievementsInGarageEnum {
    _1 = '1',
    _0 = '0'
}
/**
  * @export
  * @enum {string}
  */
export enum GetTanksMasteryDistributionEnum {
    Damage = 'damage',
    Xp = 'xp'
}
/**
  * @export
  * @enum {string}
  */
export enum GetTanksStatsExtraEnum {
    Epic = 'epic',
    Fallout = 'fallout',
    Random = 'random',
    Ranked10x10 = 'ranked_10x10',
    RankedBattles = 'ranked_battles'
}
/**
  * @export
  * @enum {string}
  */
export enum GetTanksStatsInGarageEnum {
    _1 = '1',
    _0 = '0'
}
