/* tslint:disable */
/* eslint-disable */
/**
 * World of Tanks
 * OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer\'s room](https://developers.wargaming.net/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@ace-tanker.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetTanksAchievements200Response,
  GetTanksMastery200Response,
  GetTanksStats200Response,
} from '../models/index.js';
import {
    GetTanksAchievements200ResponseFromJSON,
    GetTanksAchievements200ResponseToJSON,
    GetTanksMastery200ResponseFromJSON,
    GetTanksMastery200ResponseToJSON,
    GetTanksStats200ResponseFromJSON,
    GetTanksStats200ResponseToJSON,
} from '../models/index.js';

export interface GetTanksAchievementsRequest {
    accountId: number;
    accessToken?: string;
    fields?: Array<string>;
    inGarage?: GetTanksAchievementsInGarageEnum;
    tankId?: Array<number>;
}

export interface GetTanksMasteryRequest {
    distribution: GetTanksMasteryDistributionEnum;
    percentile: Array<number>;
    fields?: Array<string>;
    tankId?: Array<number>;
}

export interface GetTanksStatsRequest {
    accountId: number;
    accessToken?: string;
    extra?: Array<GetTanksStatsExtraEnum>;
    fields?: Array<string>;
    inGarage?: GetTanksStatsInGarageEnum;
    tankId?: Array<number>;
}

/**
 * 
 */
export class PlayersVehiclesApi extends runtime.BaseAPI {

    /**
     * Method returns list of achievements on all player\'s vehicles.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Vehicle achievements
     */
    async getTanksAchievementsRaw(requestParameters: GetTanksAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTanksAchievements200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getTanksAchievements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['inGarage'] != null) {
            queryParameters['in_garage'] = requestParameters['inGarage'];
        }

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/tanks/achievements/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTanksAchievements200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns list of achievements on all player\'s vehicles.  Achievement properties define the **achievements** field values:   * 1-4 for Mastery Badges and Stage Achievements (type: \"class\");  * maximum value of Achievement series (type: \"series\");  * number of achievements earned from sections: Battle Hero, Epic Achievements, Group Achievements, Special Achievements, etc. (type: \"repeatable, single, custom\"). 
     * Vehicle achievements
     */
    async getTanksAchievements(requestParameters: GetTanksAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTanksAchievements200Response> {
        const response = await this.getTanksAchievementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method returns percentiles of the distribution of average damage or experience values for each piece of equipment
     * Vehicle mastery distribution
     */
    async getTanksMasteryRaw(requestParameters: GetTanksMasteryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTanksMastery200Response>> {
        if (requestParameters['distribution'] == null) {
            throw new runtime.RequiredError(
                'distribution',
                'Required parameter "distribution" was null or undefined when calling getTanksMastery().'
            );
        }

        if (requestParameters['percentile'] == null) {
            throw new runtime.RequiredError(
                'percentile',
                'Required parameter "percentile" was null or undefined when calling getTanksMastery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['distribution'] != null) {
            queryParameters['distribution'] = requestParameters['distribution'];
        }

        if (requestParameters['percentile'] != null) {
            queryParameters['percentile'] = requestParameters['percentile']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/tanks/mastery/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTanksMastery200ResponseFromJSON(jsonValue));
    }

    /**
     * The method returns percentiles of the distribution of average damage or experience values for each piece of equipment
     * Vehicle mastery distribution
     */
    async getTanksMastery(requestParameters: GetTanksMasteryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTanksMastery200Response> {
        const response = await this.getTanksMasteryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method returns overall statistics, Tank Company statistics, and clan statistics per each vehicle for each user.
     * Vehicle statistics
     */
    async getTanksStatsRaw(requestParameters: GetTanksStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTanksStats200Response>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getTanksStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['accessToken'] != null) {
            queryParameters['access_token'] = requestParameters['accessToken'];
        }

        if (requestParameters['extra'] != null) {
            queryParameters['extra'] = requestParameters['extra']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['inGarage'] != null) {
            queryParameters['in_garage'] = requestParameters['inGarage'];
        }

        if (requestParameters['tankId'] != null) {
            queryParameters['tank_id'] = requestParameters['tankId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["application_id"] = await this.configuration.apiKey("application_id"); // application_id authentication
        }


        let urlPath = `/tanks/stats/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTanksStats200ResponseFromJSON(jsonValue));
    }

    /**
     * Method returns overall statistics, Tank Company statistics, and clan statistics per each vehicle for each user.
     * Vehicle statistics
     */
    async getTanksStats(requestParameters: GetTanksStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTanksStats200Response> {
        const response = await this.getTanksStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTanksAchievementsInGarageEnum = {
    _1: '1',
    _0: '0'
} as const;
export type GetTanksAchievementsInGarageEnum = typeof GetTanksAchievementsInGarageEnum[keyof typeof GetTanksAchievementsInGarageEnum];
/**
 * @export
 */
export const GetTanksMasteryDistributionEnum = {
    Damage: 'damage',
    Xp: 'xp'
} as const;
export type GetTanksMasteryDistributionEnum = typeof GetTanksMasteryDistributionEnum[keyof typeof GetTanksMasteryDistributionEnum];
/**
 * @export
 */
export const GetTanksStatsExtraEnum = {
    Epic: 'epic',
    Fallout: 'fallout',
    Random: 'random',
    Ranked10x10: 'ranked_10x10',
    RankedBattles: 'ranked_battles'
} as const;
export type GetTanksStatsExtraEnum = typeof GetTanksStatsExtraEnum[keyof typeof GetTanksStatsExtraEnum];
/**
 * @export
 */
export const GetTanksStatsInGarageEnum = {
    _1: '1',
    _0: '0'
} as const;
export type GetTanksStatsInGarageEnum = typeof GetTanksStatsInGarageEnum[keyof typeof GetTanksStatsInGarageEnum];
